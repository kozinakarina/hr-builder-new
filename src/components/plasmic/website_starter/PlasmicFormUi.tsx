/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sDZjsPZfHxS5aFWp43RghU
// Component: J28QxplbYqXI

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import TextField from "../../TextField"; // plasmic-import: N-XREVNSHa2i/component
import Select from "../../Select"; // plasmic-import: HhjbKLn-Q9iQ/component
import MenuItem from "../../MenuItem"; // plasmic-import: F-akhht0x6mU/component
import Switch from "../../Switch"; // plasmic-import: _q5EromkXpDp/component
import Button from "../../Button"; // plasmic-import: 9zXv9_EQiDeP/component
import MainComponentV1 from "../../MainComponentV1"; // plasmic-import: 8Hv_cBirVFf9/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: sDZjsPZfHxS5aFWp43RghU/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: sDZjsPZfHxS5aFWp43RghU/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: sDZjsPZfHxS5aFWp43RghU/projectcss
import sty from "./PlasmicFormUi.module.css"; // plasmic-import: J28QxplbYqXI/css

import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: L30EB6wZ4vfX/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: Om3KJhcOrS0O/icon

createPlasmicElementProxy;

export type PlasmicFormUi__VariantMembers = {};
export type PlasmicFormUi__VariantsArgs = {};
type VariantPropType = keyof PlasmicFormUi__VariantsArgs;
export const PlasmicFormUi__VariantProps = new Array<VariantPropType>();

export type PlasmicFormUi__ArgsType = {};
type ArgPropType = keyof PlasmicFormUi__ArgsType;
export const PlasmicFormUi__ArgProps = new Array<ArgPropType>();

export type PlasmicFormUi__OverridesType = {
  main?: Flex__<"div">;
  блоки?: Flex__<"div">;
  блокДата?: Flex__<"div">;
  дата?: Flex__<"div">;
  день?: Flex__<typeof TextField>;
  месяц?: Flex__<typeof Select>;
  январь?: Flex__<typeof MenuItem>;
  февраль?: Flex__<typeof MenuItem>;
  март?: Flex__<typeof MenuItem>;
  апрель?: Flex__<typeof MenuItem>;
  май?: Flex__<typeof MenuItem>;
  июнь?: Flex__<typeof MenuItem>;
  июль?: Flex__<typeof MenuItem>;
  август?: Flex__<typeof MenuItem>;
  сентябрь?: Flex__<typeof MenuItem>;
  октябрь?: Flex__<typeof MenuItem>;
  ноябрь?: Flex__<typeof MenuItem>;
  декабрь?: Flex__<typeof MenuItem>;
  год?: Flex__<typeof TextField>;
  блок01Offer5?: Flex__<"div">;
  блок01Offer?: Flex__<"div">;
  showOffer?: Flex__<typeof Switch>;
  offer?: Flex__<"section">;
  блок01Offer2?: Flex__<"div">;
  switchПозиция?: Flex__<typeof Switch>;
  позиция?: Flex__<typeof TextField>;
  имяФамилия?: Flex__<typeof TextField>;
  блок01Offer4?: Flex__<"div">;
  switchОтдел?: Flex__<typeof Switch>;
  отдел?: Flex__<typeof TextField>;
  блок01Offer3?: Flex__<"div">;
  switchНаниматель?: Flex__<typeof Switch>;
  наниматель?: Flex__<typeof TextField>;
  telegram?: Flex__<typeof TextField>;
  блок02Info?: Flex__<"div">;
  блок01Info?: Flex__<"div">;
  showInfo?: Flex__<typeof Switch>;
  offer2?: Flex__<"section">;
  блок01Offer6?: Flex__<"div">;
  switchМестоРаботы?: Flex__<typeof Switch>;
  локация?: Flex__<typeof TextField>;
  блок01Offer7?: Flex__<"div">;
  switchИс?: Flex__<typeof Switch>;
  испСрок?: Flex__<typeof TextField>;
  блок01Offer8?: Flex__<"div">;
  switchГрафик?: Flex__<typeof Switch>;
  график?: Flex__<typeof TextField>;
  блок01Offer9?: Flex__<"div">;
  switchРежим?: Flex__<typeof Switch>;
  время?: Flex__<typeof TextField>;
  блок04Bonuses2?: Flex__<"div">;
  блок04Bonuses?: Flex__<"div">;
  showBonuses?: Flex__<typeof Switch>;
  offer4?: Flex__<"section">;
  блок01Offer10?: Flex__<"div">;
  switchRelocation?: Flex__<typeof Switch>;
  relocation?: Flex__<typeof TextField>;
  блок01Offer15?: Flex__<"div">;
  switchCorporate?: Flex__<typeof Switch>;
  corporate?: Flex__<typeof TextField>;
  блок01Offer11?: Flex__<"div">;
  switchОбучение?: Flex__<typeof Switch>;
  education?: Flex__<typeof TextField>;
  блок01Offer12?: Flex__<"div">;
  switchСпорт?: Flex__<typeof Switch>;
  sportsActivities?: Flex__<typeof TextField>;
  блок01Offer13?: Flex__<"div">;
  switchОтпуск?: Flex__<typeof Switch>;
  vacation?: Flex__<typeof TextField>;
  блок01Offer14?: Flex__<"div">;
  switchДмс?: Flex__<typeof Switch>;
  dms?: Flex__<typeof TextField>;
  блок05Salary2?: Flex__<"div">;
  блок05Salary?: Flex__<"div">;
  showSalary?: Flex__<typeof Switch>;
  offer3?: Flex__<"section">;
  зарплата?: Flex__<typeof TextField>;
  блок01Offer16?: Flex__<"div">;
  switchЗпис?: Flex__<typeof Switch>;
  зпИс?: Flex__<typeof TextField>;
  валюта?: Flex__<typeof Select>;
  рубль?: Flex__<typeof MenuItem>;
  доллар?: Flex__<typeof MenuItem>;
  евро?: Flex__<typeof MenuItem>;
  рупия?: Flex__<typeof MenuItem>;
  buttons?: Flex__<"div">;
  button?: Flex__<typeof Button>;
  file?: Flex__<"div">;
  mainComponentV1?: Flex__<typeof MainComponentV1>;
};

export interface DefaultFormUiProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicFormUi__RenderFunc(props: {
  variants: PlasmicFormUi__VariantsArgs;
  args: PlasmicFormUi__ArgsType;
  overrides: PlasmicFormUi__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "позиция.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "наниматель.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "отдел.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ``
      },
      {
        path: "имяФамилия.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "telegram.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "локация.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "испСрок.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "график.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "время.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "зарплата.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "зпИс.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "showOffer.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "showInfo.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "showSalary.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "валюта.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "валюта.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "\u20bd"
      },
      {
        path: "switchПозиция.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "switchНаниматель.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "switchОтдел.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "showBonuses.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "switchМестоРаботы.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "switchИс.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "switchГрафик.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "switchРежим.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "switchRelocation.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "relocation.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "\u0420\u0435\u043b\u043e\u043a\u0435\u0439\u0442-\u043f\u0430\u043a\u0435\u0442 \u0434\u043b\u044f \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432"
      },
      {
        path: "switchОбучение.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "education.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "\u0427\u0430\u0441\u0442\u0438\u0447\u043d\u0430\u044f \u043a\u043e\u043c\u043f\u0435\u043d\u0441\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0444\u0438\u043b\u044c\u043d\u044b\u0445, \u044f\u0437\u044b\u043a\u043e\u0432\u044b\u0445 \u043a\u0443\u0440\u0441\u043e\u0432 \u0438 \u0441\u043f\u043e\u0440\u0442\u0438\u0432\u043d\u044b\u0445 \u0437\u0430\u043d\u044f\u0442\u0438\u0439 \u043d\u0430 \u0432\u044b\u0431\u043e\u0440"
      },
      {
        path: "switchСпорт.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "sportsActivities.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "\u041a\u043e\u043d\u0441\u0443\u043b\u044c\u0442\u0430\u0446\u0438\u0438 \u0443 \u0444\u0438\u0442\u043d\u0435\u0441-\u0442\u0440\u0435\u043d\u0435\u0440\u0430 \u043d\u0443\u0442\u0440\u0438\u0446\u0438\u043e\u043b\u043e\u0433\u0430, \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043f\u0438\u0442\u0430\u043d\u0438\u044f \u0438 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u043a"
      },
      {
        path: "switchОтпуск.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "vacation.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "28 \u0434\u043d\u0435\u0439 \u043e\u0442\u043f\u0443\u0441\u043a\u0430"
      },
      {
        path: "switchДмс.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "dms.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "\u041f\u043e\u0441\u043b\u0435 \u0438\u0441\u043f\u044b\u0442\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u0440\u043e\u043a\u0430"
      },
      {
        path: "месяц.isOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "месяц.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "день.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "год.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "2025"
      },
      {
        path: "switchCorporate.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "corporate.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          "\u041a\u043e\u0440\u043f\u043e\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0435 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u044f \u0422\u0438\u043c\u0431\u0438\u043b\u0434\u0438\u043d\u0433\u0438"
      },
      {
        path: "switchЗпис.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      },
      {
        path: "showFile",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  const styleTokensClassNames = _useStyleTokens();

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"main"}
          data-plasmic-override={overrides.main}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.main
          )}
        >
          <Embed
            className={classNames("__wab_instance", sty.embedHtml__psFum)}
            code={
              '<script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js"></script>\n'
            }
          />

          <div className={classNames(projectcss.all, sty.freeBox__sVgsB)}>
            <div
              data-plasmic-name={"\u0431\u043b\u043e\u043a\u0438"}
              data-plasmic-override={overrides.блоки}
              className={classNames(projectcss.all, sty.блоки)}
            >
              <div
                data-plasmic-name={
                  "\u0431\u043b\u043e\u043a\u0414\u0430\u0442\u0430"
                }
                data-plasmic-override={overrides.блокДата}
                className={classNames(projectcss.all, sty.блокдата)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__kv00)}>
                  <div
                    data-plasmic-name={"\u0434\u0430\u0442\u0430"}
                    data-plasmic-override={overrides.дата}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.дата
                    )}
                  >
                    {"\u0414\u0430\u0442\u0430"}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__zuZ3A)}>
                  <TextField
                    data-plasmic-name={"\u0434\u0435\u043d\u044c"}
                    data-plasmic-override={overrides.день}
                    className={classNames("__wab_instance", sty.день)}
                    description={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pAnDo
                        )}
                      >
                        {"Description..."}
                      </div>
                    }
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__uRLT
                        )}
                      >
                        {"\u0414\u0435\u043d\u044c"}
                      </div>
                    }
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "день",
                        "value"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    placeholder={"11"}
                    value={generateStateValueProp($state, ["день", "value"])}
                  />

                  <Select
                    data-plasmic-name={"\u043c\u0435\u0441\u044f\u0446"}
                    data-plasmic-override={overrides.месяц}
                    className={classNames("__wab_instance", sty.месяц)}
                    isOpen={generateStateValueProp($state, ["месяц", "isOpen"])}
                    items={
                      <React.Fragment>
                        <MenuItem
                          data-plasmic-name={
                            "\u044f\u043d\u0432\u0430\u0440\u044c"
                          }
                          data-plasmic-override={overrides.январь}
                          label={"\u042f\u043d\u0432\u0430\u0440\u044c"}
                          value={"\u042f\u043d\u0432\u0430\u0440\u044c"}
                        />

                        <MenuItem
                          data-plasmic-name={
                            "\u0444\u0435\u0432\u0440\u0430\u043b\u044c"
                          }
                          data-plasmic-override={overrides.февраль}
                          label={"\u0424\u0435\u0432\u0440\u0430\u043b\u044c"}
                          value={"\u0424\u0435\u0432\u0440\u0430\u043b\u044c"}
                        />

                        <MenuItem
                          data-plasmic-name={"\u043c\u0430\u0440\u0442"}
                          data-plasmic-override={overrides.март}
                          label={"\u041c\u0430\u0440\u0442"}
                          value={"\u041c\u0430\u0440\u0442"}
                        />

                        <MenuItem
                          data-plasmic-name={
                            "\u0430\u043f\u0440\u0435\u043b\u044c"
                          }
                          data-plasmic-override={overrides.апрель}
                          label={"\u0410\u043f\u0440\u0435\u043b\u044c"}
                          value={"\u0410\u043f\u0440\u0435\u043b\u044c"}
                        />

                        <MenuItem
                          data-plasmic-name={"\u043c\u0430\u0439"}
                          data-plasmic-override={overrides.май}
                          label={"\u041c\u0430\u0439"}
                          value={"\u041c\u0430\u0439"}
                        />

                        <MenuItem
                          data-plasmic-name={"\u0438\u044e\u043d\u044c"}
                          data-plasmic-override={overrides.июнь}
                          label={"\u0418\u044e\u043d\u044c"}
                          value={"\u0418\u044e\u043d\u044c"}
                        />

                        <MenuItem
                          data-plasmic-name={"\u0438\u044e\u043b\u044c"}
                          data-plasmic-override={overrides.июль}
                          label={"\u0418\u044e\u043b\u044c"}
                          value={"\u0418\u044e\u043b\u044c"}
                        />

                        <MenuItem
                          data-plasmic-name={
                            "\u0430\u0432\u0433\u0443\u0441\u0442"
                          }
                          data-plasmic-override={overrides.август}
                          label={"\u0410\u0432\u0433\u0443\u0441\u0442"}
                          value={"\u0410\u0432\u0433\u0443\u0441\u0442"}
                        />

                        <MenuItem
                          data-plasmic-name={
                            "\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044c"
                          }
                          data-plasmic-override={overrides.сентябрь}
                          label={
                            "\u0421\u0435\u043d\u0442\u044f\u0431\u0440\u044c"
                          }
                          value={
                            "\u0421\u0435\u043d\u0442\u0440\u044f\u0431\u0440\u044c"
                          }
                        />

                        <MenuItem
                          data-plasmic-name={
                            "\u043e\u043a\u0442\u044f\u0431\u0440\u044c"
                          }
                          data-plasmic-override={overrides.октябрь}
                          label={"\u041e\u043a\u0442\u044f\u0431\u0440\u044c"}
                          value={"\u041e\u043a\u0442\u044f\u0431\u0440\u044c"}
                        />

                        <MenuItem
                          data-plasmic-name={
                            "\u043d\u043e\u044f\u0431\u0440\u044c"
                          }
                          data-plasmic-override={overrides.ноябрь}
                          label={"\u041d\u043e\u044f\u0431\u0440\u044c"}
                          value={"\u041d\u043e\u044f\u0431\u0440\u044c"}
                        />

                        <MenuItem
                          data-plasmic-name={
                            "\u0434\u0435\u043a\u0430\u0431\u0440\u044c"
                          }
                          data-plasmic-override={overrides.декабрь}
                          label={"\u0414\u0435\u043a\u0430\u0431\u0440\u044c"}
                          value={"\u0414\u0435\u043a\u0430\u0431\u0440\u044c"}
                        />
                      </React.Fragment>
                    }
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__w1UEk
                        )}
                      >
                        {"\u041c\u0435\u0441\u044f\u0446"}
                      </div>
                    }
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "месяц",
                        "value"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    onOpenChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "месяц",
                        "isOpen"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    placeholder={"\u0418\u044e\u043d\u044c"}
                    value={generateStateValueProp($state, ["месяц", "value"])}
                  />

                  <TextField
                    data-plasmic-name={"\u0433\u043e\u0434"}
                    data-plasmic-override={overrides.год}
                    className={classNames("__wab_instance", sty.год)}
                    description={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___8Jc4W
                        )}
                      >
                        {"Description..."}
                      </div>
                    }
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__cff2Y
                        )}
                      >
                        {"\u0413\u043e\u0434"}
                      </div>
                    }
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, ["год", "value"]).apply(
                        null,
                        eventArgs
                      );

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    placeholder={"2025"}
                    value={generateStateValueProp($state, ["год", "value"])}
                  />
                </div>
              </div>
              <div
                data-plasmic-name={"\u0431\u043b\u043e\u043a01Offer5"}
                data-plasmic-override={overrides.блок01Offer5}
                className={classNames(projectcss.all, sty.блок01Offer5)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__j3K2C)}>
                  <div
                    data-plasmic-name={"\u0431\u043b\u043e\u043a01Offer"}
                    data-plasmic-override={overrides.блок01Offer}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.блок01Offer
                    )}
                  >
                    {"\u0411\u043b\u043e\u043a 01 - Offer"}
                  </div>
                  <Switch
                    data-plasmic-name={"showOffer"}
                    data-plasmic-override={overrides.showOffer}
                    className={classNames("__wab_instance", sty.showOffer)}
                    isSelected={generateStateValueProp($state, [
                      "showOffer",
                      "isSelected"
                    ])}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__eiByy
                        )}
                      >
                        {"ShowOffer"}
                      </div>
                    }
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "showOffer",
                        "isSelected"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    showLabel={false}
                  />
                </div>
                {(() => {
                  try {
                    return $state.showOffer.isSelected;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <section
                    data-plasmic-name={"offer"}
                    data-plasmic-override={overrides.offer}
                    className={classNames(projectcss.all, sty.offer)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__djrHu)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__f5YMe
                        )}
                      >
                        <div
                          data-plasmic-name={"\u0431\u043b\u043e\u043a01Offer2"}
                          data-plasmic-override={overrides.блок01Offer2}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.блок01Offer2
                          )}
                        >
                          {
                            "\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u0437\u0438\u0446\u0438\u0438"
                          }
                        </div>
                        <Switch
                          data-plasmic-name={
                            "switch\u041f\u043e\u0437\u0438\u0446\u0438\u044f"
                          }
                          data-plasmic-override={overrides.switchПозиция}
                          className={classNames(
                            "__wab_instance",
                            sty.switchпозиция
                          )}
                          isSelected={generateStateValueProp($state, [
                            "switchПозиция",
                            "isSelected"
                          ])}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "switchПозиция",
                              "isSelected"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          showLabel={false}
                        />
                      </div>
                      {(() => {
                        try {
                          return $state.switchПозиция.isSelected;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <TextField
                          data-plasmic-name={
                            "\u043f\u043e\u0437\u0438\u0446\u0438\u044f"
                          }
                          data-plasmic-override={overrides.позиция}
                          className={classNames("__wab_instance", sty.позиция)}
                          description={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__c6P0O
                              )}
                            >
                              {"Description..."}
                            </div>
                          }
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__lHlbq
                              )}
                            >
                              {
                                "\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u0437\u0438\u0446\u0438\u0438"
                              }
                            </div>
                          }
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "позиция",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={
                            "\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a"
                          }
                          showLabel={false}
                          value={generateStateValueProp($state, [
                            "позиция",
                            "value"
                          ])}
                        />
                      ) : null}
                    </div>
                    <TextField
                      data-plasmic-name={
                        "\u0438\u043c\u044f\u0424\u0430\u043c\u0438\u043b\u0438\u044f"
                      }
                      data-plasmic-override={overrides.имяФамилия}
                      className={classNames("__wab_instance", sty.имяфамилия)}
                      description={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__mD7Aw
                          )}
                        >
                          {"Description..."}
                        </div>
                      }
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xtgFv
                          )}
                        >
                          {
                            "\u0418\u043c\u044f \u0438 \u0444\u0430\u043c\u0438\u043b\u0438\u044f \u043a\u0430\u043d\u0434\u0438\u0434\u0430\u0442\u0430"
                          }
                        </div>
                      }
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "имяФамилия",
                          "value"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      placeholder={
                        "\u041f\u0435\u0442\u0440 \u041f\u0435\u0442\u0440\u043e\u0432"
                      }
                      value={generateStateValueProp($state, [
                        "имяФамилия",
                        "value"
                      ])}
                    />

                    <div
                      className={classNames(projectcss.all, sty.freeBox__t2OgH)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__zVspU
                        )}
                      >
                        <div
                          data-plasmic-name={"\u0431\u043b\u043e\u043a01Offer4"}
                          data-plasmic-override={overrides.блок01Offer4}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.блок01Offer4
                          )}
                        >
                          {"\u041e\u0442\u0434\u0435\u043b"}
                        </div>
                        <Switch
                          data-plasmic-name={
                            "switch\u041e\u0442\u0434\u0435\u043b"
                          }
                          data-plasmic-override={overrides.switchОтдел}
                          className={classNames(
                            "__wab_instance",
                            sty.switchотдел
                          )}
                          isSelected={generateStateValueProp($state, [
                            "switchОтдел",
                            "isSelected"
                          ])}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "switchОтдел",
                              "isSelected"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          showLabel={false}
                        />
                      </div>
                      {(() => {
                        try {
                          return $state.switchОтдел.isSelected;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <TextField
                          data-plasmic-name={"\u043e\u0442\u0434\u0435\u043b"}
                          data-plasmic-override={overrides.отдел}
                          className={classNames("__wab_instance", sty.отдел)}
                          description={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__gSz3U
                              )}
                            >
                              {"Description..."}
                            </div>
                          }
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___0XnBa
                              )}
                            >
                              {"\u041e\u0442\u0434\u0435\u043b"}
                            </div>
                          }
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "отдел",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"AI"}
                          showLabel={false}
                          value={generateStateValueProp($state, [
                            "отдел",
                            "value"
                          ])}
                        />
                      ) : null}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__nFiRb)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__zk136
                        )}
                      >
                        <div
                          data-plasmic-name={"\u0431\u043b\u043e\u043a01Offer3"}
                          data-plasmic-override={overrides.блок01Offer3}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.блок01Offer3
                          )}
                        >
                          {
                            "\u041d\u0430\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c"
                          }
                        </div>
                        <Switch
                          data-plasmic-name={
                            "switch\u041d\u0430\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c"
                          }
                          data-plasmic-override={overrides.switchНаниматель}
                          className={classNames(
                            "__wab_instance",
                            sty.switchнаниматель
                          )}
                          isSelected={generateStateValueProp($state, [
                            "switchНаниматель",
                            "isSelected"
                          ])}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "switchНаниматель",
                              "isSelected"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          showLabel={false}
                        />
                      </div>
                      {(() => {
                        try {
                          return $state.switchНаниматель.isSelected;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <TextField
                          data-plasmic-name={
                            "\u043d\u0430\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c"
                          }
                          data-plasmic-override={overrides.наниматель}
                          className={classNames(
                            "__wab_instance",
                            sty.наниматель
                          )}
                          description={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__dqUt
                              )}
                            >
                              {"Description..."}
                            </div>
                          }
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__d9Ga
                              )}
                            >
                              {
                                "\u041d\u0430\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c"
                              }
                            </div>
                          }
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "наниматель",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={
                            "\u0418\u0432\u0430\u043d \u0418\u0432\u0430\u043d\u043e\u0432"
                          }
                          showLabel={false}
                          value={generateStateValueProp($state, [
                            "наниматель",
                            "value"
                          ])}
                        />
                      ) : null}
                    </div>
                    <TextField
                      data-plasmic-name={"telegram"}
                      data-plasmic-override={overrides.telegram}
                      className={classNames("__wab_instance", sty.telegram)}
                      description={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ySjQb
                          )}
                        >
                          {"Description..."}
                        </div>
                      }
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__j9RjC
                          )}
                        >
                          {
                            "Telegram \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430"
                          }
                        </div>
                      }
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "telegram",
                          "value"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      placeholder={"@nickname"}
                      value={generateStateValueProp($state, [
                        "telegram",
                        "value"
                      ])}
                    />
                  </section>
                ) : null}
              </div>
              <div
                data-plasmic-name={"\u0431\u043b\u043e\u043a02Info"}
                data-plasmic-override={overrides.блок02Info}
                className={classNames(projectcss.all, sty.блок02Info)}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___6Id4S)}
                >
                  <div
                    data-plasmic-name={"\u0431\u043b\u043e\u043a01Info"}
                    data-plasmic-override={overrides.блок01Info}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.блок01Info
                    )}
                  >
                    {"\u0411\u043b\u043e\u043a 02 - Info"}
                  </div>
                  <Switch
                    data-plasmic-name={"showInfo"}
                    data-plasmic-override={overrides.showInfo}
                    className={classNames("__wab_instance", sty.showInfo)}
                    isSelected={generateStateValueProp($state, [
                      "showInfo",
                      "isSelected"
                    ])}
                    label={"ShowInfo"}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "showInfo",
                        "isSelected"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    showLabel={false}
                  />
                </div>
                {(() => {
                  try {
                    return $state.showInfo.isSelected;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <section
                    data-plasmic-name={"offer2"}
                    data-plasmic-override={overrides.offer2}
                    className={classNames(projectcss.all, sty.offer2)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__oCocs)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__lZveP
                        )}
                      >
                        <div
                          data-plasmic-name={"\u0431\u043b\u043e\u043a01Offer6"}
                          data-plasmic-override={overrides.блок01Offer6}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.блок01Offer6
                          )}
                        >
                          {
                            "\u041c\u0435\u0441\u0442\u043e \u0440\u0430\u0431\u043e\u0442\u044b"
                          }
                        </div>
                        <Switch
                          data-plasmic-name={
                            "switch\u041c\u0435\u0441\u0442\u043e\u0420\u0430\u0431\u043e\u0442\u044b"
                          }
                          data-plasmic-override={overrides.switchМестоРаботы}
                          className={classNames(
                            "__wab_instance",
                            sty.switchместоработы
                          )}
                          isSelected={generateStateValueProp($state, [
                            "switchМестоРаботы",
                            "isSelected"
                          ])}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "switchМестоРаботы",
                              "isSelected"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          showLabel={false}
                        />
                      </div>
                      {(() => {
                        try {
                          return $state.switchМестоРаботы.isSelected;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <TextField
                          data-plasmic-name={
                            "\u043b\u043e\u043a\u0430\u0446\u0438\u044f"
                          }
                          data-plasmic-override={overrides.локация}
                          className={classNames("__wab_instance", sty.локация)}
                          description={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__puk2V
                              )}
                            >
                              {"Description..."}
                            </div>
                          }
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__aM7R
                              )}
                            >
                              {
                                "\u041c\u0435\u0441\u0442\u043e \u0440\u0430\u0431\u043e\u0442\u044b"
                              }
                            </div>
                          }
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "локация",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={
                            "\u0423\u0434\u0430\u043b\u0435\u043d\u043d\u043e"
                          }
                          showLabel={false}
                          value={generateStateValueProp($state, [
                            "локация",
                            "value"
                          ])}
                        />
                      ) : null}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__nPu6O)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__ghUFj
                        )}
                      >
                        <div
                          data-plasmic-name={"\u0431\u043b\u043e\u043a01Offer7"}
                          data-plasmic-override={overrides.блок01Offer7}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.блок01Offer7
                          )}
                        >
                          {
                            "\u0418\u0441\u043f\u044b\u0442\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u0440\u043e\u043a (\u043c\u0435\u0441)"
                          }
                        </div>
                        <Switch
                          data-plasmic-name={"switch\u0418\u0441"}
                          data-plasmic-override={overrides.switchИс}
                          className={classNames("__wab_instance", sty.switchис)}
                          isSelected={generateStateValueProp($state, [
                            "switchИс",
                            "isSelected"
                          ])}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "switchИс",
                              "isSelected"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          showLabel={false}
                        />
                      </div>
                      {(() => {
                        try {
                          return $state.switchИс.isSelected;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <TextField
                          data-plasmic-name={
                            "\u0438\u0441\u043f\u0421\u0440\u043e\u043a"
                          }
                          data-plasmic-override={overrides.испСрок}
                          className={classNames("__wab_instance", sty.испсрок)}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__y3Bo
                              )}
                            >
                              {
                                "\u0418\u0441\u043f\u044b\u0442\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u0440\u043e\u043a (\u043c\u0435\u0441)"
                              }
                            </div>
                          }
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "испСрок",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"3"}
                          showLabel={false}
                          value={generateStateValueProp($state, [
                            "испСрок",
                            "value"
                          ])}
                        />
                      ) : null}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__yFf6J)}
                    >
                      <div
                        data-plasmic-name={"\u0431\u043b\u043e\u043a01Offer8"}
                        data-plasmic-override={overrides.блок01Offer8}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.блок01Offer8
                        )}
                      >
                        {
                          "\u0413\u0440\u0430\u0444\u0438\u043a (\u0434\u043d\u0438)"
                        }
                      </div>
                      <Switch
                        data-plasmic-name={
                          "switch\u0413\u0440\u0430\u0444\u0438\u043a"
                        }
                        data-plasmic-override={overrides.switchГрафик}
                        className={classNames(
                          "__wab_instance",
                          sty.switchграфик
                        )}
                        isSelected={generateStateValueProp($state, [
                          "switchГрафик",
                          "isSelected"
                        ])}
                        onChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "switchГрафик",
                            "isSelected"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        showLabel={false}
                      />
                    </div>
                    {(() => {
                      try {
                        return $state.switchГрафик.isSelected;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <TextField
                        data-plasmic-name={
                          "\u0433\u0440\u0430\u0444\u0438\u043a"
                        }
                        data-plasmic-override={overrides.график}
                        className={classNames("__wab_instance", sty.график)}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__pvExo
                            )}
                          >
                            {
                              "\u0413\u0440\u0430\u0444\u0438\u043a \u0440\u0430\u0431\u043e\u0442\u044b (\u0434\u043d\u0438)"
                            }
                          </div>
                        }
                        onChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "график",
                            "value"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        placeholder={"5/2"}
                        showLabel={false}
                        value={generateStateValueProp($state, [
                          "график",
                          "value"
                        ])}
                      />
                    ) : null}
                    <div
                      className={classNames(projectcss.all, sty.freeBox__bLtMm)}
                    >
                      <div
                        data-plasmic-name={"\u0431\u043b\u043e\u043a01Offer9"}
                        data-plasmic-override={overrides.блок01Offer9}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.блок01Offer9
                        )}
                      >
                        {
                          "\u0420\u0435\u0436\u0438\u043c (\u0432\u0440\u0435\u043c\u044f)"
                        }
                      </div>
                      <Switch
                        data-plasmic-name={
                          "switch\u0420\u0435\u0436\u0438\u043c"
                        }
                        data-plasmic-override={overrides.switchРежим}
                        className={classNames(
                          "__wab_instance",
                          sty.switchрежим
                        )}
                        isSelected={generateStateValueProp($state, [
                          "switchРежим",
                          "isSelected"
                        ])}
                        onChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "switchРежим",
                            "isSelected"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        showLabel={false}
                      />
                    </div>
                    {(() => {
                      try {
                        return $state.switchРежим.isSelected;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <TextField
                        data-plasmic-name={"\u0432\u0440\u0435\u043c\u044f"}
                        data-plasmic-override={overrides.время}
                        className={classNames("__wab_instance", sty.время)}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__dUusb
                            )}
                          >
                            {"\u0420\u0435\u0436\u0438\u043c"}
                          </div>
                        }
                        onChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "время",
                            "value"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        placeholder={
                          "c 10:00 \u0434\u043e 20:00 10 \u0447 (9 + 1 \u0447 \u043f\u0435\u0440\u0435\u0440\u044b\u0432\u0430)"
                        }
                        showLabel={false}
                        value={generateStateValueProp($state, [
                          "время",
                          "value"
                        ])}
                      />
                    ) : null}
                  </section>
                ) : null}
              </div>
              <div
                data-plasmic-name={"\u0431\u043b\u043e\u043a04Bonuses2"}
                data-plasmic-override={overrides.блок04Bonuses2}
                className={classNames(projectcss.all, sty.блок04Bonuses2)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__c7L4B)}>
                  <div
                    data-plasmic-name={"\u0431\u043b\u043e\u043a04Bonuses"}
                    data-plasmic-override={overrides.блок04Bonuses}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.блок04Bonuses
                    )}
                  >
                    {"\u0411\u043b\u043e\u043a 04 - Bonuses"}
                  </div>
                  <Switch
                    data-plasmic-name={"showBonuses"}
                    data-plasmic-override={overrides.showBonuses}
                    className={classNames("__wab_instance", sty.showBonuses)}
                    isSelected={generateStateValueProp($state, [
                      "showBonuses",
                      "isSelected"
                    ])}
                    label={"ShowSalary"}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "showBonuses",
                        "isSelected"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    showLabel={false}
                  />
                </div>
                {(() => {
                  try {
                    return $state.showBonuses.isSelected;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <section
                    data-plasmic-name={"offer4"}
                    data-plasmic-override={overrides.offer4}
                    className={classNames(projectcss.all, sty.offer4)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__uw6XV)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__qA7S
                        )}
                      >
                        <div
                          data-plasmic-name={
                            "\u0431\u043b\u043e\u043a01Offer10"
                          }
                          data-plasmic-override={overrides.блок01Offer10}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.блок01Offer10
                          )}
                        >
                          {
                            "\u0420\u0435\u043b\u043e\u043a\u0430\u0446\u0438\u044f"
                          }
                        </div>
                        <Switch
                          data-plasmic-name={"switchRelocation"}
                          data-plasmic-override={overrides.switchRelocation}
                          className={classNames(
                            "__wab_instance",
                            sty.switchRelocation
                          )}
                          isSelected={generateStateValueProp($state, [
                            "switchRelocation",
                            "isSelected"
                          ])}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "switchRelocation",
                              "isSelected"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          showLabel={false}
                        />
                      </div>
                      {(() => {
                        try {
                          return $state.switchRelocation.isSelected;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <TextField
                          data-plasmic-name={"relocation"}
                          data-plasmic-override={overrides.relocation}
                          className={classNames(
                            "__wab_instance",
                            sty.relocation
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__urQuZ
                              )}
                            >
                              {
                                "\u0418\u0441\u043f\u044b\u0442\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u0440\u043e\u043a (\u043c\u0435\u0441)"
                              }
                            </div>
                          }
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "relocation",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"3"}
                          showLabel={false}
                          value={generateStateValueProp($state, [
                            "relocation",
                            "value"
                          ])}
                        />
                      ) : null}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__hsC3F)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__bkxGe
                        )}
                      >
                        <div
                          data-plasmic-name={
                            "\u0431\u043b\u043e\u043a01Offer15"
                          }
                          data-plasmic-override={overrides.блок01Offer15}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.блок01Offer15
                          )}
                        >
                          {
                            "\u041a\u043e\u0440\u043f\u043e\u0440\u0430\u0442\u0438\u0432\u044b"
                          }
                        </div>
                        <Switch
                          data-plasmic-name={"switchCorporate"}
                          data-plasmic-override={overrides.switchCorporate}
                          className={classNames(
                            "__wab_instance",
                            sty.switchCorporate
                          )}
                          isSelected={generateStateValueProp($state, [
                            "switchCorporate",
                            "isSelected"
                          ])}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "switchCorporate",
                              "isSelected"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          showLabel={false}
                        />
                      </div>
                      {(() => {
                        try {
                          return $state.switchCorporate.isSelected;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <TextField
                          data-plasmic-name={"corporate"}
                          data-plasmic-override={overrides.corporate}
                          className={classNames(
                            "__wab_instance",
                            sty.corporate
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__lcDM
                              )}
                            >
                              {
                                "\u0418\u0441\u043f\u044b\u0442\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u0440\u043e\u043a (\u043c\u0435\u0441)"
                              }
                            </div>
                          }
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "corporate",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"3"}
                          showLabel={false}
                          value={generateStateValueProp($state, [
                            "corporate",
                            "value"
                          ])}
                        />
                      ) : null}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__dcA6I)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__hpZ8
                        )}
                      >
                        <div
                          data-plasmic-name={
                            "\u0431\u043b\u043e\u043a01Offer11"
                          }
                          data-plasmic-override={overrides.блок01Offer11}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.блок01Offer11
                          )}
                        >
                          {"\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435"}
                        </div>
                        <Switch
                          data-plasmic-name={
                            "switch\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435"
                          }
                          data-plasmic-override={overrides.switchОбучение}
                          className={classNames(
                            "__wab_instance",
                            sty.switchобучение
                          )}
                          isSelected={generateStateValueProp($state, [
                            "switchОбучение",
                            "isSelected"
                          ])}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "switchОбучение",
                              "isSelected"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          showLabel={false}
                        />
                      </div>
                      {(() => {
                        try {
                          return $state.switchОбучение.isSelected;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <TextField
                          data-plasmic-name={"education"}
                          data-plasmic-override={overrides.education}
                          className={classNames(
                            "__wab_instance",
                            sty.education
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__qjToX
                              )}
                            >
                              {
                                "\u0418\u0441\u043f\u044b\u0442\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u0440\u043e\u043a (\u043c\u0435\u0441)"
                              }
                            </div>
                          }
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "education",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"3"}
                          showLabel={false}
                          value={generateStateValueProp($state, [
                            "education",
                            "value"
                          ])}
                        />
                      ) : null}
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__r9JfK)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__zpQsw
                        )}
                      >
                        <div
                          data-plasmic-name={
                            "\u0431\u043b\u043e\u043a01Offer12"
                          }
                          data-plasmic-override={overrides.блок01Offer12}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.блок01Offer12
                          )}
                        >
                          {
                            "\u0421\u043f\u043e\u0440\u0442\u0438\u0432\u043d\u044b\u0435 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u044f"
                          }
                        </div>
                        <Switch
                          data-plasmic-name={
                            "switch\u0421\u043f\u043e\u0440\u0442"
                          }
                          data-plasmic-override={overrides.switchСпорт}
                          className={classNames(
                            "__wab_instance",
                            sty.switchспорт
                          )}
                          isSelected={generateStateValueProp($state, [
                            "switchСпорт",
                            "isSelected"
                          ])}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "switchСпорт",
                              "isSelected"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          showLabel={false}
                        />
                      </div>
                      {(() => {
                        try {
                          return $state.switchСпорт.isSelected;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <TextField
                          data-plasmic-name={"sportsActivities"}
                          data-plasmic-override={overrides.sportsActivities}
                          className={classNames(
                            "__wab_instance",
                            sty.sportsActivities
                          )}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__jPuzk
                              )}
                            >
                              {
                                "\u0418\u0441\u043f\u044b\u0442\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u0440\u043e\u043a (\u043c\u0435\u0441)"
                              }
                            </div>
                          }
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "sportsActivities",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"3"}
                          showLabel={false}
                          value={generateStateValueProp($state, [
                            "sportsActivities",
                            "value"
                          ])}
                        />
                      ) : null}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___0AOkM
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__eY3Qg
                        )}
                      >
                        <div
                          data-plasmic-name={
                            "\u0431\u043b\u043e\u043a01Offer13"
                          }
                          data-plasmic-override={overrides.блок01Offer13}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.блок01Offer13
                          )}
                        >
                          {
                            "\u0414\u043d\u0438 \u043e\u0442\u043f\u0443\u0441\u043a\u0430"
                          }
                        </div>
                        <Switch
                          data-plasmic-name={
                            "switch\u041e\u0442\u043f\u0443\u0441\u043a"
                          }
                          data-plasmic-override={overrides.switchОтпуск}
                          className={classNames(
                            "__wab_instance",
                            sty.switchотпуск
                          )}
                          isSelected={generateStateValueProp($state, [
                            "switchОтпуск",
                            "isSelected"
                          ])}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "switchОтпуск",
                              "isSelected"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          showLabel={false}
                        />
                      </div>
                      {(() => {
                        try {
                          return $state.switchОтпуск.isSelected;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <TextField
                          data-plasmic-name={"vacation"}
                          data-plasmic-override={overrides.vacation}
                          className={classNames("__wab_instance", sty.vacation)}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__rIxod
                              )}
                            >
                              {
                                "\u0418\u0441\u043f\u044b\u0442\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u0440\u043e\u043a (\u043c\u0435\u0441)"
                              }
                            </div>
                          }
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "vacation",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"3"}
                          showLabel={false}
                          value={generateStateValueProp($state, [
                            "vacation",
                            "value"
                          ])}
                        />
                      ) : null}
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___49VXw
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__jh4Ec
                        )}
                      >
                        <div
                          data-plasmic-name={
                            "\u0431\u043b\u043e\u043a01Offer14"
                          }
                          data-plasmic-override={overrides.блок01Offer14}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.блок01Offer14
                          )}
                        >
                          {"\u0414\u041c\u0421"}
                        </div>
                        <Switch
                          data-plasmic-name={"switch\u0414\u043c\u0441"}
                          data-plasmic-override={overrides.switchДмс}
                          className={classNames(
                            "__wab_instance",
                            sty.switchдмс
                          )}
                          isSelected={generateStateValueProp($state, [
                            "switchДмс",
                            "isSelected"
                          ])}
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "switchДмс",
                              "isSelected"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          showLabel={false}
                        />
                      </div>
                      {(() => {
                        try {
                          return $state.switchДмс.isSelected;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <TextField
                          data-plasmic-name={"dms"}
                          data-plasmic-override={overrides.dms}
                          className={classNames("__wab_instance", sty.dms)}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___8Hbwe
                              )}
                            >
                              {
                                "\u0418\u0441\u043f\u044b\u0442\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u0440\u043e\u043a (\u043c\u0435\u0441)"
                              }
                            </div>
                          }
                          onChange={async (...eventArgs: any) => {
                            generateStateOnChangeProp($state, [
                              "dms",
                              "value"
                            ]).apply(null, eventArgs);

                            if (
                              eventArgs.length > 1 &&
                              eventArgs[1] &&
                              eventArgs[1]._plasmic_state_init_
                            ) {
                              return;
                            }
                          }}
                          placeholder={"3"}
                          showLabel={false}
                          value={generateStateValueProp($state, [
                            "dms",
                            "value"
                          ])}
                        />
                      ) : null}
                    </div>
                  </section>
                ) : null}
              </div>
              <div
                data-plasmic-name={"\u0431\u043b\u043e\u043a05Salary2"}
                data-plasmic-override={overrides.блок05Salary2}
                className={classNames(projectcss.all, sty.блок05Salary2)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__iIu)}>
                  <div
                    data-plasmic-name={"\u0431\u043b\u043e\u043a05Salary"}
                    data-plasmic-override={overrides.блок05Salary}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.блок05Salary
                    )}
                  >
                    {"\u0411\u043b\u043e\u043a 05 - Salary"}
                  </div>
                  <Switch
                    data-plasmic-name={"showSalary"}
                    data-plasmic-override={overrides.showSalary}
                    className={classNames("__wab_instance", sty.showSalary)}
                    isSelected={generateStateValueProp($state, [
                      "showSalary",
                      "isSelected"
                    ])}
                    label={"ShowSalary"}
                    onChange={async (...eventArgs: any) => {
                      generateStateOnChangeProp($state, [
                        "showSalary",
                        "isSelected"
                      ]).apply(null, eventArgs);

                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    showLabel={false}
                  />
                </div>
                {(() => {
                  try {
                    return $state.showSalary.isSelected;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <section
                    data-plasmic-name={"offer3"}
                    data-plasmic-override={overrides.offer3}
                    className={classNames(projectcss.all, sty.offer3)}
                  >
                    <TextField
                      data-plasmic-name={
                        "\u0437\u0430\u0440\u043f\u043b\u0430\u0442\u0430"
                      }
                      data-plasmic-override={overrides.зарплата}
                      className={classNames("__wab_instance", sty.зарплата)}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__i0Og9
                          )}
                        >
                          {"\u0417\u0430\u0440\u043f\u043b\u0430\u0442\u0430"}
                        </div>
                      }
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "зарплата",
                          "value"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      placeholder={"300 000"}
                      value={generateStateValueProp($state, [
                        "зарплата",
                        "value"
                      ])}
                    />

                    <div
                      className={classNames(projectcss.all, sty.freeBox__xvyrV)}
                    >
                      <div
                        data-plasmic-name={"\u0431\u043b\u043e\u043a01Offer16"}
                        data-plasmic-override={overrides.блок01Offer16}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.блок01Offer16
                        )}
                      >
                        {
                          "\u0417\u0430\u0440\u043f\u043b\u0430\u0442\u0430 \u043d\u0430 \u0438\u0441\u043f\u044b\u0442\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u043c \u0441\u0440\u043e\u043a\u0435"
                        }
                      </div>
                      <Switch
                        data-plasmic-name={"switch\u0417\u043f\u0438\u0441"}
                        data-plasmic-override={overrides.switchЗпис}
                        className={classNames("__wab_instance", sty.switchзпис)}
                        isSelected={generateStateValueProp($state, [
                          "switchЗпис",
                          "isSelected"
                        ])}
                        onChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "switchЗпис",
                            "isSelected"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        showLabel={false}
                      />
                    </div>
                    {(() => {
                      try {
                        return $state.switchЗпис.isSelected;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <TextField
                        data-plasmic-name={"\u0437\u043f\u0418\u0441"}
                        data-plasmic-override={overrides.зпИс}
                        className={classNames("__wab_instance", sty.зпис)}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__oQsW
                            )}
                          >
                            {
                              "\u0417\u0430\u0440\u043f\u043b\u0430\u0442\u0430 \u043d\u0430 \u0438\u0441\u043f\u044b\u0442\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u043c \u0441\u0440\u043e\u043a\u0435"
                            }
                          </div>
                        }
                        onChange={async (...eventArgs: any) => {
                          generateStateOnChangeProp($state, [
                            "зпИс",
                            "value"
                          ]).apply(null, eventArgs);

                          if (
                            eventArgs.length > 1 &&
                            eventArgs[1] &&
                            eventArgs[1]._plasmic_state_init_
                          ) {
                            return;
                          }
                        }}
                        placeholder={"150 000"}
                        showLabel={false}
                        value={generateStateValueProp($state, [
                          "зпИс",
                          "value"
                        ])}
                      />
                    ) : null}
                    <Select
                      data-plasmic-name={"\u0432\u0430\u043b\u044e\u0442\u0430"}
                      data-plasmic-override={overrides.валюта}
                      className={classNames("__wab_instance", sty.валюта)}
                      isOpen={generateStateValueProp($state, [
                        "валюта",
                        "isOpen"
                      ])}
                      items={
                        <React.Fragment>
                          <MenuItem
                            data-plasmic-name={"\u0440\u0443\u0431\u043b\u044c"}
                            data-plasmic-override={overrides.рубль}
                            label={
                              "\u20bd \u0420\u043e\u0441\u0441\u0438\u0439\u0441\u043a\u0438\u0439 \u0440\u0443\u0431\u043b\u044c"
                            }
                            value={"\u20bd"}
                          />

                          <MenuItem
                            data-plasmic-name={
                              "\u0434\u043e\u043b\u043b\u0430\u0440"
                            }
                            data-plasmic-override={overrides.доллар}
                            label={"$ \u0414\u043e\u043b\u043b\u0430\u0440"}
                            value={"$"}
                          />

                          <MenuItem
                            data-plasmic-name={"\u0435\u0432\u0440\u043e"}
                            data-plasmic-override={overrides.евро}
                            label={"\u20ac \u0415\u0432\u0440\u043e"}
                            value={"\u20ac"}
                          />

                          <MenuItem
                            data-plasmic-name={"\u0440\u0443\u043f\u0438\u044f"}
                            data-plasmic-override={overrides.рупия}
                            label={
                              "\u20b9 \u0418\u043d\u0434\u0438\u0439\u0441\u043a\u0430\u044f \u0440\u0443\u043f\u0438\u044f"
                            }
                            value={"\u20b9"}
                          />
                        </React.Fragment>
                      }
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___8WbiV
                          )}
                        >
                          {"\u0412\u0430\u043b\u044e\u0442\u0430"}
                        </div>
                      }
                      onChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "валюта",
                          "value"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      onOpenChange={async (...eventArgs: any) => {
                        generateStateOnChangeProp($state, [
                          "валюта",
                          "isOpen"
                        ]).apply(null, eventArgs);

                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      placeholder={"\u0412\u0430\u043b\u044e\u0442\u0430"}
                      value={generateStateValueProp($state, [
                        "валюта",
                        "value"
                      ])}
                    />
                  </section>
                ) : null}
              </div>
              <div
                data-plasmic-name={"buttons"}
                data-plasmic-override={overrides.buttons}
                className={classNames(projectcss.all, sty.buttons)}
              >
                <Button
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames("__wab_instance", sty.button)}
                  color={"v2"}
                  flatSide={[]}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__nG9J
                      )}
                    >
                      {
                        "\u041f\u0440\u0435\u0434\u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440"
                      }
                    </div>
                  }
                  onClick={async event => {
                    const $steps = {};

                    $steps["updateShowFile"] = true
                      ? (() => {
                          const actionArgs = {
                            variable: {
                              objRoot: $state,
                              variablePath: ["showFile"]
                            },
                            operation: 4
                          };
                          return (({
                            variable,
                            value,
                            startIndex,
                            deleteCount
                          }) => {
                            if (!variable) {
                              return;
                            }
                            const { objRoot, variablePath } = variable;

                            const oldValue = $stateGet(objRoot, variablePath);
                            $stateSet(objRoot, variablePath, !oldValue);
                            return !oldValue;
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["updateShowFile"] != null &&
                      typeof $steps["updateShowFile"] === "object" &&
                      typeof $steps["updateShowFile"].then === "function"
                    ) {
                      $steps["updateShowFile"] = await $steps["updateShowFile"];
                    }
                  }}
                  roundedFull={true}
                />
              </div>
            </div>
            <div
              data-plasmic-name={"file"}
              data-plasmic-override={overrides.file}
              className={classNames(projectcss.all, sty.file)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__qi8OT)}>
                <MainComponentV1
                  data-plasmic-name={"mainComponentV1"}
                  data-plasmic-override={overrides.mainComponentV1}
                  candidate={(() => {
                    try {
                      return $state.имяФамилия.value;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  className={classNames("__wab_instance", sty.mainComponentV1)}
                  corporate={(() => {
                    try {
                      return $state.corporate.value;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  currency={(() => {
                    try {
                      return $state.валюта.value;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "\u20bd";
                      }
                      throw e;
                    }
                  })()}
                  day={(() => {
                    try {
                      return $state.день.value;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "1";
                      }
                      throw e;
                    }
                  })()}
                  department={(() => {
                    try {
                      return $state.отдел.value;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  dms={(() => {
                    try {
                      return $state.dms.value;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  education={(() => {
                    try {
                      return $state.education.value;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  location={(() => {
                    try {
                      return $state.локация.value;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  manager={(() => {
                    try {
                      return $state.наниматель.value;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  month={(() => {
                    try {
                      return $state.месяц.value;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "\u0418\u044e\u043d\u044c";
                      }
                      throw e;
                    }
                  })()}
                  position={(() => {
                    try {
                      return $state.позиция.value;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  probation={(() => {
                    try {
                      return $state.испСрок.value;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  relocation={(() => {
                    try {
                      return $state.relocation.value;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  salary={(() => {
                    try {
                      return $state.зарплата.value;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  schedule={(() => {
                    try {
                      return $state.график.value;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  showBonuses={(() => {
                    try {
                      return $state.showBonuses.isSelected;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()}
                  showCorporate={(() => {
                    try {
                      return $state.switchCorporate.isSelected;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()}
                  showDepartment={(() => {
                    try {
                      return $state.switchОтдел.isSelected;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()}
                  showDms={(() => {
                    try {
                      return $state.switchДмс.isSelected;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()}
                  showEducation={(() => {
                    try {
                      return $state.switchОбучение.isSelected;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()}
                  showInfo={(() => {
                    try {
                      return $state.showInfo.isSelected;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()}
                  showManager={(() => {
                    try {
                      return $state.switchНаниматель.isSelected;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()}
                  showOffer={(() => {
                    try {
                      return $state.showOffer.isSelected;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()}
                  showPosition={(() => {
                    try {
                      return $state.switchПозиция.isSelected;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()}
                  showProbation={(() => {
                    try {
                      return $state.switchИс.isSelected;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()}
                  showRelocation={(() => {
                    try {
                      return $state.switchRelocation.isSelected;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()}
                  showSalary={(() => {
                    try {
                      return $state.showSalary.isSelected;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()}
                  showSchedule={(() => {
                    try {
                      return $state.switchГрафик.isSelected;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()}
                  showSport={(() => {
                    try {
                      return $state.switchСпорт.isSelected;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()}
                  showTime={(() => {
                    try {
                      return $state.switchРежим.isSelected;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()}
                  showTrialSalary={(() => {
                    try {
                      return $state.switchЗпис.isSelected;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()}
                  showVacation={(() => {
                    try {
                      return $state.switchОтпуск.isSelected;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()}
                  showWorkplace={(() => {
                    try {
                      return $state.switchМестоРаботы.isSelected;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })()}
                  sport={(() => {
                    try {
                      return $state.sportsActivities.value;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  telegram={(() => {
                    try {
                      return $state.telegram.value;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  time={(() => {
                    try {
                      return $state.время.value;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  trialSalary={(() => {
                    try {
                      return $state.зпИс.value;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "50 000";
                      }
                      throw e;
                    }
                  })()}
                  vacation={(() => {
                    try {
                      return $state.vacation.value;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  year={(() => {
                    try {
                      return $state.год.value;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return 2025;
                      }
                      throw e;
                    }
                  })()}
                />

                <Embed
                  className={classNames("__wab_instance", sty.embedHtml__ftn9G)}
                  code={
                    '<div>\n  <button id="downloadBtn" \n          style="padding:10px 20px; background:#0075ff; color:white; border:none; border-radius:8px;">\n    \u0421\u043a\u0430\u0447\u0430\u0442\u044c PDF\n  </button>\n</div>\n\n<script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js"></script>\n<script>\n  function downloadPdf() {\n    const element = document.getElementById("offer-block");\n    if (!element) {\n      alert("\u274c \u0411\u043b\u043e\u043a #offer-block \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d!");\n      return;\n    }\n    const opt = {\n      margin: 0.5,\n      filename: \'offer.pdf\',\n      image: { type: \'jpeg\', quality: 0.98 },\n      html2canvas: { scale: 2, useCORS: true },\n      jsPDF: { unit: \'pt\', format: \'a4\', orientation: \'portrait\' }\n    };\n    html2pdf().set(opt).from(element).save();\n  }\n\n  document.addEventListener("DOMContentLoaded", () => {\n    document.getElementById("downloadBtn")?.addEventListener("click", downloadPdf);\n  });\n</script>\n'
                  }
                />
              </div>
            </div>
          </div>
          <Embed
            className={classNames("__wab_instance", sty.embedHtml__bcdf6)}
            code={
              '<script src="https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js"></script>\n<script>\n  function downloadPdf() {\n    const element = document.getElementById("offer-block");\n    if (!element) {\n      alert("\u274c \u0411\u043b\u043e\u043a #offer-block \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d!");\n      return;\n    }\n    const opt = {\n      margin: 0.5,\n      filename: \'offer.pdf\',\n      image: { type: \'jpeg\', quality: 0.98 },\n      html2canvas: { scale: 2, useCORS: true },\n      jsPDF: { unit: \'pt\', format: \'a4\', orientation: \'portrait\' }\n    };\n    html2pdf().set(opt).from(element).save();\n  }\n\n  // \u0416\u0434\u0451\u043c \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0438 \u0432\u0435\u0448\u0430\u0435\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\n  document.addEventListener("DOMContentLoaded", () => {\n    const btn = document.getElementById("downloadBtn");\n    if (btn) {\n      btn.addEventListener("click", downloadPdf);\n    }\n  });\n</script>\n'
            }
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  main: [
    "main",
    "\u0431\u043b\u043e\u043a\u0438",
    "\u0431\u043b\u043e\u043a\u0414\u0430\u0442\u0430",
    "\u0434\u0430\u0442\u0430",
    "\u0434\u0435\u043d\u044c",
    "\u043c\u0435\u0441\u044f\u0446",
    "\u044f\u043d\u0432\u0430\u0440\u044c",
    "\u0444\u0435\u0432\u0440\u0430\u043b\u044c",
    "\u043c\u0430\u0440\u0442",
    "\u0430\u043f\u0440\u0435\u043b\u044c",
    "\u043c\u0430\u0439",
    "\u0438\u044e\u043d\u044c",
    "\u0438\u044e\u043b\u044c",
    "\u0430\u0432\u0433\u0443\u0441\u0442",
    "\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044c",
    "\u043e\u043a\u0442\u044f\u0431\u0440\u044c",
    "\u043d\u043e\u044f\u0431\u0440\u044c",
    "\u0434\u0435\u043a\u0430\u0431\u0440\u044c",
    "\u0433\u043e\u0434",
    "\u0431\u043b\u043e\u043a01Offer5",
    "\u0431\u043b\u043e\u043a01Offer",
    "showOffer",
    "offer",
    "\u0431\u043b\u043e\u043a01Offer2",
    "switch\u041f\u043e\u0437\u0438\u0446\u0438\u044f",
    "\u043f\u043e\u0437\u0438\u0446\u0438\u044f",
    "\u0438\u043c\u044f\u0424\u0430\u043c\u0438\u043b\u0438\u044f",
    "\u0431\u043b\u043e\u043a01Offer4",
    "switch\u041e\u0442\u0434\u0435\u043b",
    "\u043e\u0442\u0434\u0435\u043b",
    "\u0431\u043b\u043e\u043a01Offer3",
    "switch\u041d\u0430\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c",
    "\u043d\u0430\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c",
    "telegram",
    "\u0431\u043b\u043e\u043a02Info",
    "\u0431\u043b\u043e\u043a01Info",
    "showInfo",
    "offer2",
    "\u0431\u043b\u043e\u043a01Offer6",
    "switch\u041c\u0435\u0441\u0442\u043e\u0420\u0430\u0431\u043e\u0442\u044b",
    "\u043b\u043e\u043a\u0430\u0446\u0438\u044f",
    "\u0431\u043b\u043e\u043a01Offer7",
    "switch\u0418\u0441",
    "\u0438\u0441\u043f\u0421\u0440\u043e\u043a",
    "\u0431\u043b\u043e\u043a01Offer8",
    "switch\u0413\u0440\u0430\u0444\u0438\u043a",
    "\u0433\u0440\u0430\u0444\u0438\u043a",
    "\u0431\u043b\u043e\u043a01Offer9",
    "switch\u0420\u0435\u0436\u0438\u043c",
    "\u0432\u0440\u0435\u043c\u044f",
    "\u0431\u043b\u043e\u043a04Bonuses2",
    "\u0431\u043b\u043e\u043a04Bonuses",
    "showBonuses",
    "offer4",
    "\u0431\u043b\u043e\u043a01Offer10",
    "switchRelocation",
    "relocation",
    "\u0431\u043b\u043e\u043a01Offer15",
    "switchCorporate",
    "corporate",
    "\u0431\u043b\u043e\u043a01Offer11",
    "switch\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435",
    "education",
    "\u0431\u043b\u043e\u043a01Offer12",
    "switch\u0421\u043f\u043e\u0440\u0442",
    "sportsActivities",
    "\u0431\u043b\u043e\u043a01Offer13",
    "switch\u041e\u0442\u043f\u0443\u0441\u043a",
    "vacation",
    "\u0431\u043b\u043e\u043a01Offer14",
    "switch\u0414\u043c\u0441",
    "dms",
    "\u0431\u043b\u043e\u043a05Salary2",
    "\u0431\u043b\u043e\u043a05Salary",
    "showSalary",
    "offer3",
    "\u0437\u0430\u0440\u043f\u043b\u0430\u0442\u0430",
    "\u0431\u043b\u043e\u043a01Offer16",
    "switch\u0417\u043f\u0438\u0441",
    "\u0437\u043f\u0418\u0441",
    "\u0432\u0430\u043b\u044e\u0442\u0430",
    "\u0440\u0443\u0431\u043b\u044c",
    "\u0434\u043e\u043b\u043b\u0430\u0440",
    "\u0435\u0432\u0440\u043e",
    "\u0440\u0443\u043f\u0438\u044f",
    "buttons",
    "button",
    "file",
    "mainComponentV1"
  ],
  блоки: [
    "\u0431\u043b\u043e\u043a\u0438",
    "\u0431\u043b\u043e\u043a\u0414\u0430\u0442\u0430",
    "\u0434\u0430\u0442\u0430",
    "\u0434\u0435\u043d\u044c",
    "\u043c\u0435\u0441\u044f\u0446",
    "\u044f\u043d\u0432\u0430\u0440\u044c",
    "\u0444\u0435\u0432\u0440\u0430\u043b\u044c",
    "\u043c\u0430\u0440\u0442",
    "\u0430\u043f\u0440\u0435\u043b\u044c",
    "\u043c\u0430\u0439",
    "\u0438\u044e\u043d\u044c",
    "\u0438\u044e\u043b\u044c",
    "\u0430\u0432\u0433\u0443\u0441\u0442",
    "\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044c",
    "\u043e\u043a\u0442\u044f\u0431\u0440\u044c",
    "\u043d\u043e\u044f\u0431\u0440\u044c",
    "\u0434\u0435\u043a\u0430\u0431\u0440\u044c",
    "\u0433\u043e\u0434",
    "\u0431\u043b\u043e\u043a01Offer5",
    "\u0431\u043b\u043e\u043a01Offer",
    "showOffer",
    "offer",
    "\u0431\u043b\u043e\u043a01Offer2",
    "switch\u041f\u043e\u0437\u0438\u0446\u0438\u044f",
    "\u043f\u043e\u0437\u0438\u0446\u0438\u044f",
    "\u0438\u043c\u044f\u0424\u0430\u043c\u0438\u043b\u0438\u044f",
    "\u0431\u043b\u043e\u043a01Offer4",
    "switch\u041e\u0442\u0434\u0435\u043b",
    "\u043e\u0442\u0434\u0435\u043b",
    "\u0431\u043b\u043e\u043a01Offer3",
    "switch\u041d\u0430\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c",
    "\u043d\u0430\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c",
    "telegram",
    "\u0431\u043b\u043e\u043a02Info",
    "\u0431\u043b\u043e\u043a01Info",
    "showInfo",
    "offer2",
    "\u0431\u043b\u043e\u043a01Offer6",
    "switch\u041c\u0435\u0441\u0442\u043e\u0420\u0430\u0431\u043e\u0442\u044b",
    "\u043b\u043e\u043a\u0430\u0446\u0438\u044f",
    "\u0431\u043b\u043e\u043a01Offer7",
    "switch\u0418\u0441",
    "\u0438\u0441\u043f\u0421\u0440\u043e\u043a",
    "\u0431\u043b\u043e\u043a01Offer8",
    "switch\u0413\u0440\u0430\u0444\u0438\u043a",
    "\u0433\u0440\u0430\u0444\u0438\u043a",
    "\u0431\u043b\u043e\u043a01Offer9",
    "switch\u0420\u0435\u0436\u0438\u043c",
    "\u0432\u0440\u0435\u043c\u044f",
    "\u0431\u043b\u043e\u043a04Bonuses2",
    "\u0431\u043b\u043e\u043a04Bonuses",
    "showBonuses",
    "offer4",
    "\u0431\u043b\u043e\u043a01Offer10",
    "switchRelocation",
    "relocation",
    "\u0431\u043b\u043e\u043a01Offer15",
    "switchCorporate",
    "corporate",
    "\u0431\u043b\u043e\u043a01Offer11",
    "switch\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435",
    "education",
    "\u0431\u043b\u043e\u043a01Offer12",
    "switch\u0421\u043f\u043e\u0440\u0442",
    "sportsActivities",
    "\u0431\u043b\u043e\u043a01Offer13",
    "switch\u041e\u0442\u043f\u0443\u0441\u043a",
    "vacation",
    "\u0431\u043b\u043e\u043a01Offer14",
    "switch\u0414\u043c\u0441",
    "dms",
    "\u0431\u043b\u043e\u043a05Salary2",
    "\u0431\u043b\u043e\u043a05Salary",
    "showSalary",
    "offer3",
    "\u0437\u0430\u0440\u043f\u043b\u0430\u0442\u0430",
    "\u0431\u043b\u043e\u043a01Offer16",
    "switch\u0417\u043f\u0438\u0441",
    "\u0437\u043f\u0418\u0441",
    "\u0432\u0430\u043b\u044e\u0442\u0430",
    "\u0440\u0443\u0431\u043b\u044c",
    "\u0434\u043e\u043b\u043b\u0430\u0440",
    "\u0435\u0432\u0440\u043e",
    "\u0440\u0443\u043f\u0438\u044f",
    "buttons",
    "button"
  ],
  блокДата: [
    "\u0431\u043b\u043e\u043a\u0414\u0430\u0442\u0430",
    "\u0434\u0430\u0442\u0430",
    "\u0434\u0435\u043d\u044c",
    "\u043c\u0435\u0441\u044f\u0446",
    "\u044f\u043d\u0432\u0430\u0440\u044c",
    "\u0444\u0435\u0432\u0440\u0430\u043b\u044c",
    "\u043c\u0430\u0440\u0442",
    "\u0430\u043f\u0440\u0435\u043b\u044c",
    "\u043c\u0430\u0439",
    "\u0438\u044e\u043d\u044c",
    "\u0438\u044e\u043b\u044c",
    "\u0430\u0432\u0433\u0443\u0441\u0442",
    "\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044c",
    "\u043e\u043a\u0442\u044f\u0431\u0440\u044c",
    "\u043d\u043e\u044f\u0431\u0440\u044c",
    "\u0434\u0435\u043a\u0430\u0431\u0440\u044c",
    "\u0433\u043e\u0434"
  ],
  дата: ["\u0434\u0430\u0442\u0430"],
  день: ["\u0434\u0435\u043d\u044c"],
  месяц: [
    "\u043c\u0435\u0441\u044f\u0446",
    "\u044f\u043d\u0432\u0430\u0440\u044c",
    "\u0444\u0435\u0432\u0440\u0430\u043b\u044c",
    "\u043c\u0430\u0440\u0442",
    "\u0430\u043f\u0440\u0435\u043b\u044c",
    "\u043c\u0430\u0439",
    "\u0438\u044e\u043d\u044c",
    "\u0438\u044e\u043b\u044c",
    "\u0430\u0432\u0433\u0443\u0441\u0442",
    "\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044c",
    "\u043e\u043a\u0442\u044f\u0431\u0440\u044c",
    "\u043d\u043e\u044f\u0431\u0440\u044c",
    "\u0434\u0435\u043a\u0430\u0431\u0440\u044c"
  ],
  январь: ["\u044f\u043d\u0432\u0430\u0440\u044c"],
  февраль: ["\u0444\u0435\u0432\u0440\u0430\u043b\u044c"],
  март: ["\u043c\u0430\u0440\u0442"],
  апрель: ["\u0430\u043f\u0440\u0435\u043b\u044c"],
  май: ["\u043c\u0430\u0439"],
  июнь: ["\u0438\u044e\u043d\u044c"],
  июль: ["\u0438\u044e\u043b\u044c"],
  август: ["\u0430\u0432\u0433\u0443\u0441\u0442"],
  сентябрь: ["\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044c"],
  октябрь: ["\u043e\u043a\u0442\u044f\u0431\u0440\u044c"],
  ноябрь: ["\u043d\u043e\u044f\u0431\u0440\u044c"],
  декабрь: ["\u0434\u0435\u043a\u0430\u0431\u0440\u044c"],
  год: ["\u0433\u043e\u0434"],
  блок01Offer5: [
    "\u0431\u043b\u043e\u043a01Offer5",
    "\u0431\u043b\u043e\u043a01Offer",
    "showOffer",
    "offer",
    "\u0431\u043b\u043e\u043a01Offer2",
    "switch\u041f\u043e\u0437\u0438\u0446\u0438\u044f",
    "\u043f\u043e\u0437\u0438\u0446\u0438\u044f",
    "\u0438\u043c\u044f\u0424\u0430\u043c\u0438\u043b\u0438\u044f",
    "\u0431\u043b\u043e\u043a01Offer4",
    "switch\u041e\u0442\u0434\u0435\u043b",
    "\u043e\u0442\u0434\u0435\u043b",
    "\u0431\u043b\u043e\u043a01Offer3",
    "switch\u041d\u0430\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c",
    "\u043d\u0430\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c",
    "telegram"
  ],
  блок01Offer: ["\u0431\u043b\u043e\u043a01Offer"],
  showOffer: ["showOffer"],
  offer: [
    "offer",
    "\u0431\u043b\u043e\u043a01Offer2",
    "switch\u041f\u043e\u0437\u0438\u0446\u0438\u044f",
    "\u043f\u043e\u0437\u0438\u0446\u0438\u044f",
    "\u0438\u043c\u044f\u0424\u0430\u043c\u0438\u043b\u0438\u044f",
    "\u0431\u043b\u043e\u043a01Offer4",
    "switch\u041e\u0442\u0434\u0435\u043b",
    "\u043e\u0442\u0434\u0435\u043b",
    "\u0431\u043b\u043e\u043a01Offer3",
    "switch\u041d\u0430\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c",
    "\u043d\u0430\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c",
    "telegram"
  ],
  блок01Offer2: ["\u0431\u043b\u043e\u043a01Offer2"],
  switchПозиция: ["switch\u041f\u043e\u0437\u0438\u0446\u0438\u044f"],
  позиция: ["\u043f\u043e\u0437\u0438\u0446\u0438\u044f"],
  имяФамилия: ["\u0438\u043c\u044f\u0424\u0430\u043c\u0438\u043b\u0438\u044f"],
  блок01Offer4: ["\u0431\u043b\u043e\u043a01Offer4"],
  switchОтдел: ["switch\u041e\u0442\u0434\u0435\u043b"],
  отдел: ["\u043e\u0442\u0434\u0435\u043b"],
  блок01Offer3: ["\u0431\u043b\u043e\u043a01Offer3"],
  switchНаниматель: [
    "switch\u041d\u0430\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c"
  ],
  наниматель: ["\u043d\u0430\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c"],
  telegram: ["telegram"],
  блок02Info: [
    "\u0431\u043b\u043e\u043a02Info",
    "\u0431\u043b\u043e\u043a01Info",
    "showInfo",
    "offer2",
    "\u0431\u043b\u043e\u043a01Offer6",
    "switch\u041c\u0435\u0441\u0442\u043e\u0420\u0430\u0431\u043e\u0442\u044b",
    "\u043b\u043e\u043a\u0430\u0446\u0438\u044f",
    "\u0431\u043b\u043e\u043a01Offer7",
    "switch\u0418\u0441",
    "\u0438\u0441\u043f\u0421\u0440\u043e\u043a",
    "\u0431\u043b\u043e\u043a01Offer8",
    "switch\u0413\u0440\u0430\u0444\u0438\u043a",
    "\u0433\u0440\u0430\u0444\u0438\u043a",
    "\u0431\u043b\u043e\u043a01Offer9",
    "switch\u0420\u0435\u0436\u0438\u043c",
    "\u0432\u0440\u0435\u043c\u044f"
  ],
  блок01Info: ["\u0431\u043b\u043e\u043a01Info"],
  showInfo: ["showInfo"],
  offer2: [
    "offer2",
    "\u0431\u043b\u043e\u043a01Offer6",
    "switch\u041c\u0435\u0441\u0442\u043e\u0420\u0430\u0431\u043e\u0442\u044b",
    "\u043b\u043e\u043a\u0430\u0446\u0438\u044f",
    "\u0431\u043b\u043e\u043a01Offer7",
    "switch\u0418\u0441",
    "\u0438\u0441\u043f\u0421\u0440\u043e\u043a",
    "\u0431\u043b\u043e\u043a01Offer8",
    "switch\u0413\u0440\u0430\u0444\u0438\u043a",
    "\u0433\u0440\u0430\u0444\u0438\u043a",
    "\u0431\u043b\u043e\u043a01Offer9",
    "switch\u0420\u0435\u0436\u0438\u043c",
    "\u0432\u0440\u0435\u043c\u044f"
  ],
  блок01Offer6: ["\u0431\u043b\u043e\u043a01Offer6"],
  switchМестоРаботы: [
    "switch\u041c\u0435\u0441\u0442\u043e\u0420\u0430\u0431\u043e\u0442\u044b"
  ],
  локация: ["\u043b\u043e\u043a\u0430\u0446\u0438\u044f"],
  блок01Offer7: ["\u0431\u043b\u043e\u043a01Offer7"],
  switchИс: ["switch\u0418\u0441"],
  испСрок: ["\u0438\u0441\u043f\u0421\u0440\u043e\u043a"],
  блок01Offer8: ["\u0431\u043b\u043e\u043a01Offer8"],
  switchГрафик: ["switch\u0413\u0440\u0430\u0444\u0438\u043a"],
  график: ["\u0433\u0440\u0430\u0444\u0438\u043a"],
  блок01Offer9: ["\u0431\u043b\u043e\u043a01Offer9"],
  switchРежим: ["switch\u0420\u0435\u0436\u0438\u043c"],
  время: ["\u0432\u0440\u0435\u043c\u044f"],
  блок04Bonuses2: [
    "\u0431\u043b\u043e\u043a04Bonuses2",
    "\u0431\u043b\u043e\u043a04Bonuses",
    "showBonuses",
    "offer4",
    "\u0431\u043b\u043e\u043a01Offer10",
    "switchRelocation",
    "relocation",
    "\u0431\u043b\u043e\u043a01Offer15",
    "switchCorporate",
    "corporate",
    "\u0431\u043b\u043e\u043a01Offer11",
    "switch\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435",
    "education",
    "\u0431\u043b\u043e\u043a01Offer12",
    "switch\u0421\u043f\u043e\u0440\u0442",
    "sportsActivities",
    "\u0431\u043b\u043e\u043a01Offer13",
    "switch\u041e\u0442\u043f\u0443\u0441\u043a",
    "vacation",
    "\u0431\u043b\u043e\u043a01Offer14",
    "switch\u0414\u043c\u0441",
    "dms"
  ],
  блок04Bonuses: ["\u0431\u043b\u043e\u043a04Bonuses"],
  showBonuses: ["showBonuses"],
  offer4: [
    "offer4",
    "\u0431\u043b\u043e\u043a01Offer10",
    "switchRelocation",
    "relocation",
    "\u0431\u043b\u043e\u043a01Offer15",
    "switchCorporate",
    "corporate",
    "\u0431\u043b\u043e\u043a01Offer11",
    "switch\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435",
    "education",
    "\u0431\u043b\u043e\u043a01Offer12",
    "switch\u0421\u043f\u043e\u0440\u0442",
    "sportsActivities",
    "\u0431\u043b\u043e\u043a01Offer13",
    "switch\u041e\u0442\u043f\u0443\u0441\u043a",
    "vacation",
    "\u0431\u043b\u043e\u043a01Offer14",
    "switch\u0414\u043c\u0441",
    "dms"
  ],
  блок01Offer10: ["\u0431\u043b\u043e\u043a01Offer10"],
  switchRelocation: ["switchRelocation"],
  relocation: ["relocation"],
  блок01Offer15: ["\u0431\u043b\u043e\u043a01Offer15"],
  switchCorporate: ["switchCorporate"],
  corporate: ["corporate"],
  блок01Offer11: ["\u0431\u043b\u043e\u043a01Offer11"],
  switchОбучение: ["switch\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435"],
  education: ["education"],
  блок01Offer12: ["\u0431\u043b\u043e\u043a01Offer12"],
  switchСпорт: ["switch\u0421\u043f\u043e\u0440\u0442"],
  sportsActivities: ["sportsActivities"],
  блок01Offer13: ["\u0431\u043b\u043e\u043a01Offer13"],
  switchОтпуск: ["switch\u041e\u0442\u043f\u0443\u0441\u043a"],
  vacation: ["vacation"],
  блок01Offer14: ["\u0431\u043b\u043e\u043a01Offer14"],
  switchДмс: ["switch\u0414\u043c\u0441"],
  dms: ["dms"],
  блок05Salary2: [
    "\u0431\u043b\u043e\u043a05Salary2",
    "\u0431\u043b\u043e\u043a05Salary",
    "showSalary",
    "offer3",
    "\u0437\u0430\u0440\u043f\u043b\u0430\u0442\u0430",
    "\u0431\u043b\u043e\u043a01Offer16",
    "switch\u0417\u043f\u0438\u0441",
    "\u0437\u043f\u0418\u0441",
    "\u0432\u0430\u043b\u044e\u0442\u0430",
    "\u0440\u0443\u0431\u043b\u044c",
    "\u0434\u043e\u043b\u043b\u0430\u0440",
    "\u0435\u0432\u0440\u043e",
    "\u0440\u0443\u043f\u0438\u044f"
  ],
  блок05Salary: ["\u0431\u043b\u043e\u043a05Salary"],
  showSalary: ["showSalary"],
  offer3: [
    "offer3",
    "\u0437\u0430\u0440\u043f\u043b\u0430\u0442\u0430",
    "\u0431\u043b\u043e\u043a01Offer16",
    "switch\u0417\u043f\u0438\u0441",
    "\u0437\u043f\u0418\u0441",
    "\u0432\u0430\u043b\u044e\u0442\u0430",
    "\u0440\u0443\u0431\u043b\u044c",
    "\u0434\u043e\u043b\u043b\u0430\u0440",
    "\u0435\u0432\u0440\u043e",
    "\u0440\u0443\u043f\u0438\u044f"
  ],
  зарплата: ["\u0437\u0430\u0440\u043f\u043b\u0430\u0442\u0430"],
  блок01Offer16: ["\u0431\u043b\u043e\u043a01Offer16"],
  switchЗпис: ["switch\u0417\u043f\u0438\u0441"],
  зпИс: ["\u0437\u043f\u0418\u0441"],
  валюта: [
    "\u0432\u0430\u043b\u044e\u0442\u0430",
    "\u0440\u0443\u0431\u043b\u044c",
    "\u0434\u043e\u043b\u043b\u0430\u0440",
    "\u0435\u0432\u0440\u043e",
    "\u0440\u0443\u043f\u0438\u044f"
  ],
  рубль: ["\u0440\u0443\u0431\u043b\u044c"],
  доллар: ["\u0434\u043e\u043b\u043b\u0430\u0440"],
  евро: ["\u0435\u0432\u0440\u043e"],
  рупия: ["\u0440\u0443\u043f\u0438\u044f"],
  buttons: ["buttons", "button"],
  button: ["button"],
  file: ["file", "mainComponentV1"],
  mainComponentV1: ["mainComponentV1"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  main: "div";
  блоки: "div";
  блокДата: "div";
  дата: "div";
  день: typeof TextField;
  месяц: typeof Select;
  январь: typeof MenuItem;
  февраль: typeof MenuItem;
  март: typeof MenuItem;
  апрель: typeof MenuItem;
  май: typeof MenuItem;
  июнь: typeof MenuItem;
  июль: typeof MenuItem;
  август: typeof MenuItem;
  сентябрь: typeof MenuItem;
  октябрь: typeof MenuItem;
  ноябрь: typeof MenuItem;
  декабрь: typeof MenuItem;
  год: typeof TextField;
  блок01Offer5: "div";
  блок01Offer: "div";
  showOffer: typeof Switch;
  offer: "section";
  блок01Offer2: "div";
  switchПозиция: typeof Switch;
  позиция: typeof TextField;
  имяФамилия: typeof TextField;
  блок01Offer4: "div";
  switchОтдел: typeof Switch;
  отдел: typeof TextField;
  блок01Offer3: "div";
  switchНаниматель: typeof Switch;
  наниматель: typeof TextField;
  telegram: typeof TextField;
  блок02Info: "div";
  блок01Info: "div";
  showInfo: typeof Switch;
  offer2: "section";
  блок01Offer6: "div";
  switchМестоРаботы: typeof Switch;
  локация: typeof TextField;
  блок01Offer7: "div";
  switchИс: typeof Switch;
  испСрок: typeof TextField;
  блок01Offer8: "div";
  switchГрафик: typeof Switch;
  график: typeof TextField;
  блок01Offer9: "div";
  switchРежим: typeof Switch;
  время: typeof TextField;
  блок04Bonuses2: "div";
  блок04Bonuses: "div";
  showBonuses: typeof Switch;
  offer4: "section";
  блок01Offer10: "div";
  switchRelocation: typeof Switch;
  relocation: typeof TextField;
  блок01Offer15: "div";
  switchCorporate: typeof Switch;
  corporate: typeof TextField;
  блок01Offer11: "div";
  switchОбучение: typeof Switch;
  education: typeof TextField;
  блок01Offer12: "div";
  switchСпорт: typeof Switch;
  sportsActivities: typeof TextField;
  блок01Offer13: "div";
  switchОтпуск: typeof Switch;
  vacation: typeof TextField;
  блок01Offer14: "div";
  switchДмс: typeof Switch;
  dms: typeof TextField;
  блок05Salary2: "div";
  блок05Salary: "div";
  showSalary: typeof Switch;
  offer3: "section";
  зарплата: typeof TextField;
  блок01Offer16: "div";
  switchЗпис: typeof Switch;
  зпИс: typeof TextField;
  валюта: typeof Select;
  рубль: typeof MenuItem;
  доллар: typeof MenuItem;
  евро: typeof MenuItem;
  рупия: typeof MenuItem;
  buttons: "div";
  button: typeof Button;
  file: "div";
  mainComponentV1: typeof MainComponentV1;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFormUi__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFormUi__VariantsArgs;
    args?: PlasmicFormUi__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFormUi__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFormUi__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicFormUi__ArgProps,
          internalVariantPropNames: PlasmicFormUi__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFormUi__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "main") {
    func.displayName = "PlasmicFormUi";
  } else {
    func.displayName = `PlasmicFormUi.${nodeName}`;
  }
  return func;
}

export const PlasmicFormUi = Object.assign(
  // Top-level PlasmicFormUi renders the root element
  makeNodeComponent("main"),
  {
    // Helper components rendering sub-elements
    блоки: makeNodeComponent("\u0431\u043b\u043e\u043a\u0438"),
    блокДата: makeNodeComponent(
      "\u0431\u043b\u043e\u043a\u0414\u0430\u0442\u0430"
    ),
    дата: makeNodeComponent("\u0434\u0430\u0442\u0430"),
    день: makeNodeComponent("\u0434\u0435\u043d\u044c"),
    месяц: makeNodeComponent("\u043c\u0435\u0441\u044f\u0446"),
    январь: makeNodeComponent("\u044f\u043d\u0432\u0430\u0440\u044c"),
    февраль: makeNodeComponent("\u0444\u0435\u0432\u0440\u0430\u043b\u044c"),
    март: makeNodeComponent("\u043c\u0430\u0440\u0442"),
    апрель: makeNodeComponent("\u0430\u043f\u0440\u0435\u043b\u044c"),
    май: makeNodeComponent("\u043c\u0430\u0439"),
    июнь: makeNodeComponent("\u0438\u044e\u043d\u044c"),
    июль: makeNodeComponent("\u0438\u044e\u043b\u044c"),
    август: makeNodeComponent("\u0430\u0432\u0433\u0443\u0441\u0442"),
    сентябрь: makeNodeComponent(
      "\u0441\u0435\u043d\u0442\u044f\u0431\u0440\u044c"
    ),
    октябрь: makeNodeComponent("\u043e\u043a\u0442\u044f\u0431\u0440\u044c"),
    ноябрь: makeNodeComponent("\u043d\u043e\u044f\u0431\u0440\u044c"),
    декабрь: makeNodeComponent("\u0434\u0435\u043a\u0430\u0431\u0440\u044c"),
    год: makeNodeComponent("\u0433\u043e\u0434"),
    блок01Offer5: makeNodeComponent("\u0431\u043b\u043e\u043a01Offer5"),
    блок01Offer: makeNodeComponent("\u0431\u043b\u043e\u043a01Offer"),
    showOffer: makeNodeComponent("showOffer"),
    offer: makeNodeComponent("offer"),
    блок01Offer2: makeNodeComponent("\u0431\u043b\u043e\u043a01Offer2"),
    switchПозиция: makeNodeComponent(
      "switch\u041f\u043e\u0437\u0438\u0446\u0438\u044f"
    ),
    позиция: makeNodeComponent("\u043f\u043e\u0437\u0438\u0446\u0438\u044f"),
    имяФамилия: makeNodeComponent(
      "\u0438\u043c\u044f\u0424\u0430\u043c\u0438\u043b\u0438\u044f"
    ),
    блок01Offer4: makeNodeComponent("\u0431\u043b\u043e\u043a01Offer4"),
    switchОтдел: makeNodeComponent("switch\u041e\u0442\u0434\u0435\u043b"),
    отдел: makeNodeComponent("\u043e\u0442\u0434\u0435\u043b"),
    блок01Offer3: makeNodeComponent("\u0431\u043b\u043e\u043a01Offer3"),
    switchНаниматель: makeNodeComponent(
      "switch\u041d\u0430\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c"
    ),
    наниматель: makeNodeComponent(
      "\u043d\u0430\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c"
    ),
    telegram: makeNodeComponent("telegram"),
    блок02Info: makeNodeComponent("\u0431\u043b\u043e\u043a02Info"),
    блок01Info: makeNodeComponent("\u0431\u043b\u043e\u043a01Info"),
    showInfo: makeNodeComponent("showInfo"),
    offer2: makeNodeComponent("offer2"),
    блок01Offer6: makeNodeComponent("\u0431\u043b\u043e\u043a01Offer6"),
    switchМестоРаботы: makeNodeComponent(
      "switch\u041c\u0435\u0441\u0442\u043e\u0420\u0430\u0431\u043e\u0442\u044b"
    ),
    локация: makeNodeComponent("\u043b\u043e\u043a\u0430\u0446\u0438\u044f"),
    блок01Offer7: makeNodeComponent("\u0431\u043b\u043e\u043a01Offer7"),
    switchИс: makeNodeComponent("switch\u0418\u0441"),
    испСрок: makeNodeComponent("\u0438\u0441\u043f\u0421\u0440\u043e\u043a"),
    блок01Offer8: makeNodeComponent("\u0431\u043b\u043e\u043a01Offer8"),
    switchГрафик: makeNodeComponent(
      "switch\u0413\u0440\u0430\u0444\u0438\u043a"
    ),
    график: makeNodeComponent("\u0433\u0440\u0430\u0444\u0438\u043a"),
    блок01Offer9: makeNodeComponent("\u0431\u043b\u043e\u043a01Offer9"),
    switchРежим: makeNodeComponent("switch\u0420\u0435\u0436\u0438\u043c"),
    время: makeNodeComponent("\u0432\u0440\u0435\u043c\u044f"),
    блок04Bonuses2: makeNodeComponent("\u0431\u043b\u043e\u043a04Bonuses2"),
    блок04Bonuses: makeNodeComponent("\u0431\u043b\u043e\u043a04Bonuses"),
    showBonuses: makeNodeComponent("showBonuses"),
    offer4: makeNodeComponent("offer4"),
    блок01Offer10: makeNodeComponent("\u0431\u043b\u043e\u043a01Offer10"),
    switchRelocation: makeNodeComponent("switchRelocation"),
    relocation: makeNodeComponent("relocation"),
    блок01Offer15: makeNodeComponent("\u0431\u043b\u043e\u043a01Offer15"),
    switchCorporate: makeNodeComponent("switchCorporate"),
    corporate: makeNodeComponent("corporate"),
    блок01Offer11: makeNodeComponent("\u0431\u043b\u043e\u043a01Offer11"),
    switchОбучение: makeNodeComponent(
      "switch\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435"
    ),
    education: makeNodeComponent("education"),
    блок01Offer12: makeNodeComponent("\u0431\u043b\u043e\u043a01Offer12"),
    switchСпорт: makeNodeComponent("switch\u0421\u043f\u043e\u0440\u0442"),
    sportsActivities: makeNodeComponent("sportsActivities"),
    блок01Offer13: makeNodeComponent("\u0431\u043b\u043e\u043a01Offer13"),
    switchОтпуск: makeNodeComponent(
      "switch\u041e\u0442\u043f\u0443\u0441\u043a"
    ),
    vacation: makeNodeComponent("vacation"),
    блок01Offer14: makeNodeComponent("\u0431\u043b\u043e\u043a01Offer14"),
    switchДмс: makeNodeComponent("switch\u0414\u043c\u0441"),
    dms: makeNodeComponent("dms"),
    блок05Salary2: makeNodeComponent("\u0431\u043b\u043e\u043a05Salary2"),
    блок05Salary: makeNodeComponent("\u0431\u043b\u043e\u043a05Salary"),
    showSalary: makeNodeComponent("showSalary"),
    offer3: makeNodeComponent("offer3"),
    зарплата: makeNodeComponent(
      "\u0437\u0430\u0440\u043f\u043b\u0430\u0442\u0430"
    ),
    блок01Offer16: makeNodeComponent("\u0431\u043b\u043e\u043a01Offer16"),
    switchЗпис: makeNodeComponent("switch\u0417\u043f\u0438\u0441"),
    зпИс: makeNodeComponent("\u0437\u043f\u0418\u0441"),
    валюта: makeNodeComponent("\u0432\u0430\u043b\u044e\u0442\u0430"),
    рубль: makeNodeComponent("\u0440\u0443\u0431\u043b\u044c"),
    доллар: makeNodeComponent("\u0434\u043e\u043b\u043b\u0430\u0440"),
    евро: makeNodeComponent("\u0435\u0432\u0440\u043e"),
    рупия: makeNodeComponent("\u0440\u0443\u043f\u0438\u044f"),
    buttons: makeNodeComponent("buttons"),
    button: makeNodeComponent("button"),
    file: makeNodeComponent("file"),
    mainComponentV1: makeNodeComponent("mainComponentV1"),

    // Metadata about props expected for PlasmicFormUi
    internalVariantProps: PlasmicFormUi__VariantProps,
    internalArgProps: PlasmicFormUi__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicFormUi;
/* prettier-ignore-end */
