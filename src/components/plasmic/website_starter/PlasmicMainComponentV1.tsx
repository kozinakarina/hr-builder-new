/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sDZjsPZfHxS5aFWp43RghU
// Component: 8Hv_cBirVFf9

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { _useGlobalVariants } from "./plasmic"; // plasmic-import: sDZjsPZfHxS5aFWp43RghU/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: sDZjsPZfHxS5aFWp43RghU/styleTokensProvider

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: sDZjsPZfHxS5aFWp43RghU/projectcss
import sty from "./PlasmicMainComponentV1.module.css"; // plasmic-import: 8Hv_cBirVFf9/css

import ЛогоIcon from "./icons/PlasmicIcon__\u041B\u043E\u0433\u043E"; // plasmic-import: G36Zx6Nn4iV8/icon
import Group2087327872Icon from "./icons/PlasmicIcon__Group2087327872"; // plasmic-import: 25HuVMFMNDy3/icon
import Layer1Icon from "./icons/PlasmicIcon__Layer1"; // plasmic-import: vHCJuG21r3L0/icon
import Line54Icon from "./icons/PlasmicIcon__Line54"; // plasmic-import: DXajv0t44wf5/icon
import Group2087329733Icon from "./icons/PlasmicIcon__Group2087329733"; // plasmic-import: Cbn5g0rJ8hRq/icon
import Group2087329730Icon from "./icons/PlasmicIcon__Group2087329730"; // plasmic-import: 7v9y-RE0tL0k/icon

createPlasmicElementProxy;

export type PlasmicMainComponentV1__VariantMembers = {};
export type PlasmicMainComponentV1__VariantsArgs = {};
type VariantPropType = keyof PlasmicMainComponentV1__VariantsArgs;
export const PlasmicMainComponentV1__VariantProps =
  new Array<VariantPropType>();

export type PlasmicMainComponentV1__ArgsType = {
  position?: string;
  manager?: string;
  department?: string;
  candidate?: string;
  telegram?: string;
  location?: string;
  schedule?: string;
  probation?: number;
  time?: string;
  relocation?: string;
  corporate?: string;
  education?: string;
  sport?: string;
  vacation?: string;
  dms?: string;
  salary?: string;
  trialSalary?: string;
  currency?: "\u20bd" | "$" | "\u20ac" | "\u20b9";
  day?:
    | "1"
    | 2
    | 3
    | 4
    | 5
    | 6
    | 7
    | 8
    | 9
    | 10
    | 11
    | 12
    | 13
    | 14
    | 15
    | 16
    | 17
    | 18
    | 19
    | 20
    | 21
    | 22
    | 23
    | 24
    | 25
    | 26
    | 27
    | 28
    | 29
    | 30
    | 31;
  month?:
    | "\u042f\u043d\u0432\u0430\u0440\u044c"
    | "\u0424\u0435\u0432\u0440\u0430\u043b\u044c"
    | "\u041c\u0430\u0440\u0442"
    | "\u0410\u043f\u0440\u0435\u043b\u044c"
    | "\u041c\u0430\u0439"
    | "\u0418\u044e\u043d\u044c"
    | "\u0418\u044e\u043b\u044c"
    | "\u0410\u0432\u0433\u0443\u0441\u0442"
    | "\u0421\u0435\u043d\u0442\u044f\u0431\u0440\u044c"
    | "\u041e\u043a\u0442\u044f\u0431\u0440\u044c"
    | "\u041d\u043e\u044f\u0431\u0440\u044c"
    | "\u0414\u0435\u043a\u0430\u0431\u0440\u044c";
  year?: number;
  showOffer?: boolean;
  showPosition?: boolean;
  showManager?: boolean;
  showDepartment?: boolean;
  showInfo?: boolean;
  showWorkplace?: boolean;
  showProbation?: boolean;
  showSchedule?: boolean;
  showBonuses?: boolean;
  showRelocation?: boolean;
  showCorporate?: boolean;
  showEducation?: boolean;
  showSport?: boolean;
  showVacation?: boolean;
  showDms?: boolean;
  showSalary?: boolean;
  showTrialSalary?: boolean;
  showTime?: boolean;
};
type ArgPropType = keyof PlasmicMainComponentV1__ArgsType;
export const PlasmicMainComponentV1__ArgProps = new Array<ArgPropType>(
  "position",
  "manager",
  "department",
  "candidate",
  "telegram",
  "location",
  "schedule",
  "probation",
  "time",
  "relocation",
  "corporate",
  "education",
  "sport",
  "vacation",
  "dms",
  "salary",
  "trialSalary",
  "currency",
  "day",
  "month",
  "year",
  "showOffer",
  "showPosition",
  "showManager",
  "showDepartment",
  "showInfo",
  "showWorkplace",
  "showProbation",
  "showSchedule",
  "showBonuses",
  "showRelocation",
  "showCorporate",
  "showEducation",
  "showSport",
  "showVacation",
  "showDms",
  "showSalary",
  "showTrialSalary",
  "showTime"
);

export type PlasmicMainComponentV1__OverridesType = {
  mainComponentVer1?: Flex__<"div">;
  блок01Data?: Flex__<"div">;
  фон?: Flex__<"div">;
  rectangle240649526?: Flex__<"div">;
  img?: Flex__<typeof PlasmicImg__>;
  статичныйЗаголовок?: Flex__<"div">;
  датаОффера?: Flex__<"div">;
  ic?: Flex__<"div">;
  frame?: Flex__<"div">;
  frame2?: Flex__<"div">;
  frame3?: Flex__<"div">;
  месяцRu?: Flex__<"div">;
  январь?: Flex__<"div">;
  месяцEn?: Flex__<"div">;
  january?: Flex__<"div">;
  _31?: Flex__<"div">;
  _2025?: Flex__<"div">;
  блоки?: Flex__<"div">;
  блок02Offer?: Flex__<"div">;
  frame4?: Flex__<"div">;
  frame5?: Flex__<"div">;
  позицияBoolean?: Flex__<"div">;
  лейбл?: Flex__<"div">;
  текстПозиция?: Flex__<"div">;
  нанимательBoolean?: Flex__<"div">;
  лейбл2?: Flex__<"div">;
  текстНаниматель?: Flex__<"div">;
  отделBoolean?: Flex__<"div">;
  лейбл3?: Flex__<"div">;
  текстОтдел?: Flex__<"div">;
  frame6?: Flex__<"div">;
  имяФамилия?: Flex__<"div">;
  текстИмяФамилия?: Flex__<"div">;
  статичныйТекст2?: Flex__<"div">;
  статичныйТекст3?: Flex__<"div">;
  менеджер?: Flex__<"div">;
  frame7?: Flex__<"div">;
  текстТгНикнейм?: Flex__<"div">;
  блок03Info?: Flex__<"div">;
  frame12?: Flex__<"div">;
  buttonYpwbaox5E6Nkkyq1L1H01?: Flex__<"div">;
  frame8?: Flex__<"div">;
  frame9?: Flex__<"div">;
  changeTxt?: Flex__<"div">;
  мыРадыСделатьВам2?: Flex__<"div">;
  поля?: Flex__<"div">;
  местоРаботы?: Flex__<"div">;
  лейбл4?: Flex__<"div">;
  текстМестоРаботы?: Flex__<"div">;
  испСрок?: Flex__<"div">;
  лейбл5?: Flex__<"div">;
  текстИспСрок?: Flex__<"div">;
  текстИспСрок2?: Flex__<"div">;
  график?: Flex__<"div">;
  лейбл6?: Flex__<"div">;
  frame10?: Flex__<"div">;
  текстДни52?: Flex__<"div">;
  мыРадыСделатьВам3?: Flex__<"div">;
  текстСДоС1000До1500?: Flex__<"div">;
  c1000До200010Ч91ЧПерерыва2?: Flex__<"div">;
  engНачалоКонец2?: Flex__<"div">;
  c1000До200010Ч91ЧПерерыва3?: Flex__<"div">;
  frame11?: Flex__<"div">;
  buttonXnq8Xhka4Cls4Mo1Hw1H0?: Flex__<"div">;
  блок04Bonuses?: Flex__<"div">;
  frame13?: Flex__<"div">;
  статичныйТекст4?: Flex__<"div">;
  статичныйТекст?: Flex__<"div">;
  frame14?: Flex__<"div">;
  графикBoolean?: Flex__<"div">;
  frame15?: Flex__<"div">;
  frame16?: Flex__<"div">;
  рабочийДеньBoolean?: Flex__<"div">;
  лейбл7?: Flex__<"div">;
  ruНачалоКонец?: Flex__<"div">;
  текстСГрафикаРаботы?: Flex__<"div">;
  engНачалоКонец?: Flex__<"div">;
  c1000До200010Ч91ЧПерерыва?: Flex__<"div">;
  релокацияBoolean?: Flex__<"div">;
  лейбл8?: Flex__<"div">;
  текстРелокация?: Flex__<"div">;
  бенефитыBoolean?: Flex__<"div">;
  frame17?: Flex__<"div">;
  frame18?: Flex__<"div">;
  frame19?: Flex__<"div">;
  frame2087329735?: Flex__<"div">;
  frame20?: Flex__<"div">;
  maskGroup?: Flex__<"div">;
  realisticGiftIconBlueBlackOrangeJ8Gf1Wo9Qhsap8B8N9Vp32?: Flex__<"div">;
  frame21?: Flex__<"div">;
  корпоративыBoolean?: Flex__<"div">;
  лейбл9?: Flex__<"div">;
  текстКорпоративы?: Flex__<"div">;
  обучениеBoolean?: Flex__<"div">;
  лейбл10?: Flex__<"div">;
  текстОбучение?: Flex__<"div">;
  спортBoolean?: Flex__<"div">;
  лейбл11?: Flex__<"div">;
  текстСпорт?: Flex__<"div">;
  frame22?: Flex__<"div">;
  frame23?: Flex__<"div">;
  frame24?: Flex__<"div">;
  frame2087329778?: Flex__<"div">;
  усталиИНуженОтдых?: Flex__<"div">;
  frame25?: Flex__<"div">;
  отпускBoolean?: Flex__<"div">;
  лейбл12?: Flex__<"div">;
  текстОтпуск?: Flex__<"div">;
  дмсBoolean?: Flex__<"div">;
  лейбл13?: Flex__<"div">;
  текстДмс?: Flex__<"div">;
  suitcaseHeEnteredIcon1E3C0B4Luzshs6Ur47I12?: Flex__<"div">;
  блок05Salary?: Flex__<"div">;
  frame29?: Flex__<"div">;
  frame30?: Flex__<"div">;
  liquidChromeShape71?: Flex__<"div">;
  frame31?: Flex__<"div">;
  зпИспСрок?: Flex__<"div">;
  зпИспСрокBoolean?: Flex__<"div">;
  frame32?: Flex__<"div">;
  валютаДо2?: Flex__<"div">;
  рубль?: Flex__<"div">;
  текстЧисло2?: Flex__<"div">;
  мыРадыСделатьВам4?: Flex__<"div">;
  валютаПосле2?: Flex__<"div">;
  рубль2?: Flex__<"div">;
  мыРадыСделатьВам?: Flex__<"div">;
  зарплата2?: Flex__<"div">;
  валютаДо3?: Flex__<"div">;
  рубль4?: Flex__<"div">;
  текстЧисло3?: Flex__<"div">;
  _301?: Flex__<"div">;
};

export interface DefaultMainComponentV1Props {
  position?: string;
  manager?: string;
  department?: string;
  candidate?: string;
  telegram?: string;
  location?: string;
  schedule?: string;
  probation?: number;
  time?: string;
  relocation?: string;
  corporate?: string;
  education?: string;
  sport?: string;
  vacation?: string;
  dms?: string;
  salary?: string;
  trialSalary?: string;
  currency?: "\u20bd" | "$" | "\u20ac" | "\u20b9";
  day?:
    | "1"
    | 2
    | 3
    | 4
    | 5
    | 6
    | 7
    | 8
    | 9
    | 10
    | 11
    | 12
    | 13
    | 14
    | 15
    | 16
    | 17
    | 18
    | 19
    | 20
    | 21
    | 22
    | 23
    | 24
    | 25
    | 26
    | 27
    | 28
    | 29
    | 30
    | 31;
  month?:
    | "\u042f\u043d\u0432\u0430\u0440\u044c"
    | "\u0424\u0435\u0432\u0440\u0430\u043b\u044c"
    | "\u041c\u0430\u0440\u0442"
    | "\u0410\u043f\u0440\u0435\u043b\u044c"
    | "\u041c\u0430\u0439"
    | "\u0418\u044e\u043d\u044c"
    | "\u0418\u044e\u043b\u044c"
    | "\u0410\u0432\u0433\u0443\u0441\u0442"
    | "\u0421\u0435\u043d\u0442\u044f\u0431\u0440\u044c"
    | "\u041e\u043a\u0442\u044f\u0431\u0440\u044c"
    | "\u041d\u043e\u044f\u0431\u0440\u044c"
    | "\u0414\u0435\u043a\u0430\u0431\u0440\u044c";
  year?: number;
  showOffer?: boolean;
  showPosition?: boolean;
  showManager?: boolean;
  showDepartment?: boolean;
  showInfo?: boolean;
  showWorkplace?: boolean;
  showProbation?: boolean;
  showSchedule?: boolean;
  showBonuses?: boolean;
  showRelocation?: boolean;
  showCorporate?: boolean;
  showEducation?: boolean;
  showSport?: boolean;
  showVacation?: boolean;
  showDms?: boolean;
  showSalary?: boolean;
  showTrialSalary?: boolean;
  showTime?: boolean;
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMainComponentV1__RenderFunc(props: {
  variants: PlasmicMainComponentV1__VariantsArgs;
  args: PlasmicMainComponentV1__ArgsType;
  overrides: PlasmicMainComponentV1__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(
    () =>
      Object.assign(
        {
          position:
            "\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u0437\u0438\u0446\u0438\u0438",
          manager:
            "\u041d\u0430\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c",
          department:
            "\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0434\u0435\u043b\u0430",
          candidate:
            "\u0418\u043c\u044f \u0424\u0430\u043c\u0438\u043b\u0438\u044f",
          telegram: "@nikname",
          location:
            "\u041c\u0435\u0441\u0442\u043e \u0440\u0430\u0431\u043e\u0442\u044b",
          schedule: "5/2",
          probation: 0,
          time: "c 10:00 \u0434\u043e 20:00 10 \u0447 (9 + 1 \u0447 \u043f\u0435\u0440\u0435\u0440\u044b\u0432\u0430)",
          relocation:
            "\u0420\u0435\u043b\u043e\u043a\u0435\u0439\u0442-\u043f\u0430\u043a\u0435\u0442 \u0434\u043b\u044f \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432",
          corporate:
            "\u041a\u043e\u0440\u043f\u043e\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0435 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u044f \u0422\u0438\u043c\u0431\u0438\u043b\u0434\u0438\u043d\u0433\u0438",
          education:
            "\u0427\u0430\u0441\u0442\u0438\u0447\u043d\u0430\u044f \u043a\u043e\u043c\u043f\u0435\u043d\u0441\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0444\u0438\u043b\u044c\u043d\u044b\u0445, \u044f\u0437\u044b\u043a\u043e\u0432\u044b\u0445 \u043a\u0443\u0440\u0441\u043e\u0432\u2028\u0438 \u0441\u043f\u043e\u0440\u0442\u0438\u0432\u043d\u044b\u0445 \u0437\u0430\u043d\u044f\u0442\u0438\u0439 \u043d\u0430 \u0432\u044b\u0431\u043e\u0440 \u0414\u043e\u0441\u0442\u0443\u043f \u043a \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435",
          sport:
            "\u041a\u043e\u043d\u0441\u0443\u043b\u044c\u0442\u0430\u0446\u0438\u0438 \u0443 \u0444\u0438\u0442\u043d\u0435\u0441-\u0442\u0440\u0435\u043d\u0435\u0440\u0430 \u043d\u0443\u0442\u0440\u0438\u0446\u0438\u043e\u043b\u043e\u0433\u0430, \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043f\u0438\u0442\u0430\u043d\u0438\u044f \u0438 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u043a",
          vacation:
            "28 \u0434\u043d\u0435\u0439 \u043e\u0442\u043f\u0443\u0441\u043a\u0430",
          dms: "\u041f\u043e\u0441\u043b\u0435 \u0438\u0441\u043f\u044b\u0442\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u0440\u043e\u043a\u0430",
          salary: "000 000",
          trialSalary: "00 000",
          currency: "\u20bd",
          day: "11",
          month: "\u0418\u044e\u043d\u044c",
          year: 2025,
          showOffer: true,
          showPosition: true,
          showManager: true,
          showDepartment: true,
          showInfo: true,
          showWorkplace: true,
          showProbation: true,
          showSchedule: true,
          showBonuses: true,
          showRelocation: true,
          showCorporate: true,
          showEducation: true,
          showSport: true,
          showVacation: true,
          showDms: true,
          showSalary: true,
          showTrialSalary: true,
          showTime: true
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();

  return (
    <div
      data-plasmic-name={"mainComponentVer1"}
      data-plasmic-override={overrides.mainComponentVer1}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.mainComponentVer1
      )}
      id={"offer-block"}
    >
      <div
        data-plasmic-name={"\u0431\u043b\u043e\u043a01Data"}
        data-plasmic-override={overrides.блок01Data}
        className={classNames(projectcss.all, sty.блок01Data)}
      >
        <div
          data-plasmic-name={"\u0444\u043e\u043d"}
          data-plasmic-override={overrides.фон}
          className={classNames(projectcss.all, sty.фон)}
        >
          <div
            data-plasmic-name={"rectangle240649526"}
            data-plasmic-override={overrides.rectangle240649526}
            className={classNames(projectcss.all, sty.rectangle240649526)}
          />

          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"100%"}
            loading={"lazy"}
            src={{
              src: "/plasmic/website_starter/images/mainComponentVer1Svg.svg",
              fullWidth: 597,
              fullHeight: 369,
              aspectRatio: undefined
            }}
          />

          <ЛогоIcon
            className={classNames(projectcss.all, sty.svg__bjml)}
            role={"img"}
          />
        </div>
        <div
          data-plasmic-name={
            "\u0441\u0442\u0430\u0442\u0438\u0447\u043d\u044b\u0439\u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a"
          }
          data-plasmic-override={overrides.статичныйЗаголовок}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.статичныйзаголовок
          )}
        >
          {"Offer\nyou\u2019re hired"}
        </div>
        <div
          data-plasmic-name={
            "\u0434\u0430\u0442\u0430\u041e\u0444\u0444\u0435\u0440\u0430"
          }
          data-plasmic-override={overrides.датаОффера}
          className={classNames(projectcss.all, sty.датаоффера)}
        >
          <div
            data-plasmic-name={"ic"}
            data-plasmic-override={overrides.ic}
            className={classNames(projectcss.all, sty.ic)}
          >
            <Group2087327872Icon
              className={classNames(projectcss.all, sty.svg___0KzD)}
              role={"img"}
            />
          </div>
          <div
            data-plasmic-name={"frame"}
            data-plasmic-override={overrides.frame}
            className={classNames(projectcss.all, sty.frame)}
          >
            <div
              data-plasmic-name={"frame2"}
              data-plasmic-override={overrides.frame2}
              className={classNames(projectcss.all, sty.frame2)}
            >
              <div
                data-plasmic-name={"frame3"}
                data-plasmic-override={overrides.frame3}
                className={classNames(projectcss.all, sty.frame3)}
              >
                <div
                  data-plasmic-name={"\u043c\u0435\u0441\u044f\u0446Ru"}
                  data-plasmic-override={overrides.месяцRu}
                  className={classNames(projectcss.all, sty.месяцRu)}
                >
                  <div
                    data-plasmic-name={"\u044f\u043d\u0432\u0430\u0440\u044c"}
                    data-plasmic-override={overrides.январь}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.январь
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $props.month;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "\u0418\u044e\u043d\u044c";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                </div>
                {false ? (
                  <div
                    data-plasmic-name={"\u043c\u0435\u0441\u044f\u0446En"}
                    data-plasmic-override={overrides.месяцEn}
                    className={classNames(projectcss.all, sty.месяцEn)}
                  >
                    {false ? (
                      <div
                        data-plasmic-name={"january"}
                        data-plasmic-override={overrides.january}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.january
                        )}
                      >
                        {"\u0418\u044e\u043d\u044c"}
                      </div>
                    ) : null}
                  </div>
                ) : null}
                <div
                  data-plasmic-name={"_31"}
                  data-plasmic-override={overrides._31}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty._31
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.day;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "15";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___7G1CV
                )}
              >
                {","}
              </div>
            </div>
            <div
              data-plasmic-name={"_2025"}
              data-plasmic-override={overrides._2025}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty._2025
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.year;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "2023";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
        </div>
      </div>
      <div
        data-plasmic-name={"\u0431\u043b\u043e\u043a\u0438"}
        data-plasmic-override={overrides.блоки}
        className={classNames(projectcss.all, sty.блоки)}
      >
        {(() => {
          try {
            return $props.showOffer;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div
            data-plasmic-name={"\u0431\u043b\u043e\u043a02Offer"}
            data-plasmic-override={overrides.блок02Offer}
            className={classNames(projectcss.all, sty.блок02Offer)}
          >
            <div
              data-plasmic-name={"frame4"}
              data-plasmic-override={overrides.frame4}
              className={classNames(projectcss.all, sty.frame4)}
            >
              <div
                data-plasmic-name={"frame5"}
                data-plasmic-override={overrides.frame5}
                className={classNames(projectcss.all, sty.frame5)}
              >
                {(() => {
                  try {
                    return $props.showPosition;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    data-plasmic-name={
                      "\u043f\u043e\u0437\u0438\u0446\u0438\u044fBoolean"
                    }
                    data-plasmic-override={overrides.позицияBoolean}
                    className={classNames(projectcss.all, sty.позицияBoolean)}
                  >
                    <div
                      data-plasmic-name={"\u043b\u0435\u0439\u0431\u043b"}
                      data-plasmic-override={overrides.лейбл}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.лейбл
                      )}
                    >
                      {"\u041f\u043e\u0437\u0438\u0446\u0438\u044f"}
                    </div>
                    <div
                      data-plasmic-name={
                        "\u0442\u0435\u043a\u0441\u0442\u041f\u043e\u0437\u0438\u0446\u0438\u044f"
                      }
                      data-plasmic-override={overrides.текстПозиция}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.текстпозиция
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $props.position;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043f\u043e\u0437\u0438\u0446\u0438\u0438";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                ) : null}
                {(() => {
                  try {
                    return $props.showManager;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    data-plasmic-name={
                      "\u043d\u0430\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044cBoolean"
                    }
                    data-plasmic-override={overrides.нанимательBoolean}
                    className={classNames(
                      projectcss.all,
                      sty.нанимательBoolean
                    )}
                  >
                    <div
                      data-plasmic-name={"\u043b\u0435\u0439\u0431\u043b2"}
                      data-plasmic-override={overrides.лейбл2}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.лейбл2
                      )}
                    >
                      {
                        "\u041d\u0430\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c"
                      }
                    </div>
                    <div
                      data-plasmic-name={
                        "\u0442\u0435\u043a\u0441\u0442\u041d\u0430\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c"
                      }
                      data-plasmic-override={overrides.текстНаниматель}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.текстнаниматель
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $props.manager;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u041d\u0430\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                ) : null}
                {(() => {
                  try {
                    return $props.showDepartment;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    data-plasmic-name={"\u043e\u0442\u0434\u0435\u043bBoolean"}
                    data-plasmic-override={overrides.отделBoolean}
                    className={classNames(projectcss.all, sty.отделBoolean)}
                  >
                    <div
                      data-plasmic-name={"\u043b\u0435\u0439\u0431\u043b3"}
                      data-plasmic-override={overrides.лейбл3}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.лейбл3
                      )}
                    >
                      {"\u041e\u0442\u0434\u0435\u043b"}
                    </div>
                    <div
                      data-plasmic-name={
                        "\u0442\u0435\u043a\u0441\u0442\u041e\u0442\u0434\u0435\u043b"
                      }
                      data-plasmic-override={overrides.текстОтдел}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.текстотдел
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $props.department;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u041d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0434\u0435\u043b\u0430";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                ) : null}
              </div>
              <div
                data-plasmic-name={"frame6"}
                data-plasmic-override={overrides.frame6}
                className={classNames(projectcss.all, sty.frame6)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__xZlVa)}>
                  <div
                    data-plasmic-name={
                      "\u0438\u043c\u044f\u0424\u0430\u043c\u0438\u043b\u0438\u044f"
                    }
                    data-plasmic-override={overrides.имяФамилия}
                    className={classNames(projectcss.all, sty.имяфамилия)}
                  >
                    <div
                      data-plasmic-name={
                        "\u0442\u0435\u043a\u0441\u0442\u0418\u043c\u044f\u0424\u0430\u043c\u0438\u043b\u0438\u044f"
                      }
                      data-plasmic-override={overrides.текстИмяФамилия}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.текстимяфамилия
                      )}
                      style={{ "white-space": "nowrap" }}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $props.candidate;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u0418\u043c\u044f \u0424\u0430\u043c\u0438\u043b\u0438\u044f";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__kgMvu)}>
                  <div
                    data-plasmic-name={
                      "\u0441\u0442\u0430\u0442\u0438\u0447\u043d\u044b\u0439\u0422\u0435\u043a\u0441\u04422"
                    }
                    data-plasmic-override={overrides.статичныйТекст2}
                    className={classNames(projectcss.all, sty.статичныйтекст2)}
                  >
                    <div
                      data-plasmic-name={
                        "\u0441\u0442\u0430\u0442\u0438\u0447\u043d\u044b\u0439\u0422\u0435\u043a\u0441\u04423"
                      }
                      data-plasmic-override={overrides.статичныйТекст3}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.статичныйтекст3
                      )}
                    >
                      {
                        "\u041c\u044b \u0440\u0430\u0434\u044b \u043f\u0440\u0438\u0433\u043b\u0430\u0441\u0438\u0442\u044c\n\u0432\u0430\u0441 \u0432 \u043d\u0430\u0448\u0443 \u043a\u043e\u043c\u0430\u043d\u0434\u0443!"
                      }
                    </div>
                  </div>
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={
                "\u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440"
              }
              data-plasmic-override={overrides.менеджер}
              className={classNames(projectcss.all, sty.менеджер)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__jIkUk
                )}
              >
                {
                  "\u0414\u043b\u044f \u0441\u0432\u044f\u0437\u0438 \u0441 \u0432\u0430\u0448\u0438\u043c HR-\u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u043e\u043c"
                }
              </div>
              <div
                data-plasmic-name={"frame7"}
                data-plasmic-override={overrides.frame7}
                className={classNames(projectcss.all, sty.frame7)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__g2E4V
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>
                      {
                        "\u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0435\u043c\u0443 "
                      }
                    </React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 400 }}
                    >
                      {"\u0432 Telegram "}
                    </span>
                  </React.Fragment>
                </div>
                <div
                  data-plasmic-name={
                    "\u0442\u0435\u043a\u0441\u0442\u0422\u0433\u041d\u0438\u043a\u043d\u0435\u0439\u043c"
                  }
                  data-plasmic-override={overrides.текстТгНикнейм}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.тексттгникнейм
                  )}
                  style={{ "white-space": "nowrap" }}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.telegram;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "@nkkn";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </div>
            </div>
          </div>
        ) : null}
        {(() => {
          try {
            return $props.showInfo;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div
            data-plasmic-name={"\u0431\u043b\u043e\u043a03Info"}
            data-plasmic-override={overrides.блок03Info}
            className={classNames(projectcss.all, sty.блок03Info)}
          >
            <div
              data-plasmic-name={"frame12"}
              data-plasmic-override={overrides.frame12}
              className={classNames(projectcss.all, sty.frame12)}
            >
              <div
                data-plasmic-name={"buttonYpwbaox5E6Nkkyq1L1H01"}
                data-plasmic-override={overrides.buttonYpwbaox5E6Nkkyq1L1H01}
                className={classNames(
                  projectcss.all,
                  sty.buttonYpwbaox5E6Nkkyq1L1H01
                )}
              />
            </div>
            <div
              data-plasmic-name={"frame8"}
              data-plasmic-override={overrides.frame8}
              className={classNames(projectcss.all, sty.frame8)}
            >
              <div
                data-plasmic-name={"frame9"}
                data-plasmic-override={overrides.frame9}
                className={classNames(projectcss.all, sty.frame9)}
              >
                <div
                  data-plasmic-name={"changeTxt"}
                  data-plasmic-override={overrides.changeTxt}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.changeTxt
                  )}
                >
                  {"\u0418\u043d\u0444\u043e"}
                </div>
                <div
                  data-plasmic-name={
                    "\u043c\u044b\u0420\u0430\u0434\u044b\u0421\u0434\u0435\u043b\u0430\u0442\u044c\u0412\u0430\u043c2"
                  }
                  data-plasmic-override={overrides.мыРадыСделатьВам2}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.мырадысделатьвам2
                  )}
                >
                  {
                    "\u041d\u0435\u043c\u043d\u043e\u0433\u043e \u043e\u0431 \u0443\u0441\u043b\u043e\u0432\u0438\u044f\u0445 \u0440\u0430\u0431\u043e\u0442\u044b"
                  }
                </div>
              </div>
              <div
                data-plasmic-name={"\u043f\u043e\u043b\u044f"}
                data-plasmic-override={overrides.поля}
                className={classNames(projectcss.all, sty.поля)}
              >
                {(() => {
                  try {
                    return $props.showWorkplace;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    data-plasmic-name={
                      "\u043c\u0435\u0441\u0442\u043e\u0420\u0430\u0431\u043e\u0442\u044b"
                    }
                    data-plasmic-override={overrides.местоРаботы}
                    className={classNames(projectcss.all, sty.местоработы)}
                  >
                    <div
                      data-plasmic-name={"\u043b\u0435\u0439\u0431\u043b4"}
                      data-plasmic-override={overrides.лейбл4}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.лейбл4
                      )}
                    >
                      {
                        "\u041c\u0435\u0441\u0442\u043e \u0440\u0430\u0431\u043e\u0442\u044b"
                      }
                    </div>
                    <div
                      data-plasmic-name={
                        "\u0442\u0435\u043a\u0441\u0442\u041c\u0435\u0441\u0442\u043e\u0420\u0430\u0431\u043e\u0442\u044b"
                      }
                      data-plasmic-override={overrides.текстМестоРаботы}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.текстместоработы
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return $props.location;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "\u041e\u0444\u0438\u0441";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </div>
                ) : null}
                {(() => {
                  try {
                    return $props.showProbation;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    data-plasmic-name={
                      "\u0438\u0441\u043f\u0421\u0440\u043e\u043a"
                    }
                    data-plasmic-override={overrides.испСрок}
                    className={classNames(projectcss.all, sty.испсрок)}
                  >
                    <div
                      data-plasmic-name={"\u043b\u0435\u0439\u0431\u043b5"}
                      data-plasmic-override={overrides.лейбл5}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.лейбл5
                      )}
                    >
                      {
                        "\u0418\u0441\u043f\u044b\u0442\u0430\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u0441\u0440\u043e\u043a"
                      }
                    </div>
                    <div
                      className={classNames(projectcss.all, sty.freeBox__vAhSl)}
                    >
                      <div
                        data-plasmic-name={
                          "\u0442\u0435\u043a\u0441\u0442\u0418\u0441\u043f\u0421\u0440\u043e\u043a"
                        }
                        data-plasmic-override={overrides.текстИспСрок}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.текстиспсрок
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $props.probation;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "3";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        data-plasmic-name={
                          "\u0442\u0435\u043a\u0441\u0442\u0418\u0441\u043f\u0421\u0440\u043e\u043a2"
                        }
                        data-plasmic-override={overrides.текстИспСрок2}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.текстиспсрок2
                        )}
                      >
                        {"\u043c\u0435\u0441."}
                      </div>
                    </div>
                  </div>
                ) : null}
                {(() => {
                  try {
                    return $props.showSchedule;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    data-plasmic-name={"\u0433\u0440\u0430\u0444\u0438\u043a"}
                    data-plasmic-override={overrides.график}
                    className={classNames(projectcss.all, sty.график)}
                  >
                    <div
                      data-plasmic-name={"\u043b\u0435\u0439\u0431\u043b6"}
                      data-plasmic-override={overrides.лейбл6}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.лейбл6
                      )}
                    >
                      {
                        "\u0413\u0440\u0430\u0444\u0438\u043a \u0440\u0430\u0431\u043e\u0442\u044b"
                      }
                    </div>
                    <div
                      data-plasmic-name={"frame10"}
                      data-plasmic-override={overrides.frame10}
                      className={classNames(projectcss.all, sty.frame10)}
                    >
                      <div
                        data-plasmic-name={
                          "\u0442\u0435\u043a\u0441\u0442\u0414\u043d\u043852"
                        }
                        data-plasmic-override={overrides.текстДни52}
                        className={classNames(projectcss.all, sty.текстдни52)}
                      >
                        <div
                          data-plasmic-name={
                            "\u043c\u044b\u0420\u0430\u0434\u044b\u0421\u0434\u0435\u043b\u0430\u0442\u044c\u0412\u0430\u043c3"
                          }
                          data-plasmic-override={overrides.мыРадыСделатьВам3}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.мырадысделатьвам3
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $props.schedule;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "5/2";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                      <div
                        data-plasmic-name={
                          "\u0442\u0435\u043a\u0441\u0442\u0421\u0414\u043e\u04211000\u0414\u043e1500"
                        }
                        data-plasmic-override={overrides.текстСДоС1000До1500}
                        className={classNames(
                          projectcss.all,
                          sty.текстсдос1000До1500
                        )}
                      >
                        {(() => {
                          try {
                            return $props.showTime;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return true;
                            }
                            throw e;
                          }
                        })() ? (
                          <div
                            data-plasmic-name={
                              "c1000\u0414\u043e200010\u042791\u0427\u041f\u0435\u0440\u0435\u0440\u044b\u0432\u04302"
                            }
                            data-plasmic-override={
                              overrides.c1000До200010Ч91ЧПерерыва2
                            }
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.c1000До200010Ч91Чперерыва2
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $props.time;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "c 10:00 \u0434\u043e 20:00 10 \u0447 (9 + 1 \u0447 \u043f\u0435\u0440\u0435\u0440\u044b\u0432\u0430)";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        ) : null}
                      </div>
                      {false ? (
                        <div
                          data-plasmic-name={
                            "eng\u041d\u0430\u0447\u0430\u043b\u043e\u041a\u043e\u043d\u0435\u04462"
                          }
                          data-plasmic-override={overrides.engНачалоКонец2}
                          className={classNames(
                            projectcss.all,
                            sty.engначалоконец2
                          )}
                        >
                          <div
                            data-plasmic-name={
                              "c1000\u0414\u043e200010\u042791\u0427\u041f\u0435\u0440\u0435\u0440\u044b\u0432\u04303"
                            }
                            data-plasmic-override={
                              overrides.c1000До200010Ч91ЧПерерыва3
                            }
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.c1000До200010Ч91Чперерыва3
                            )}
                          >
                            {"10 - 15"}
                          </div>
                        </div>
                      ) : null}
                    </div>
                  </div>
                ) : null}
              </div>
            </div>
            <div
              data-plasmic-name={"frame11"}
              data-plasmic-override={overrides.frame11}
              className={classNames(projectcss.all, sty.frame11)}
            >
              <div
                data-plasmic-name={"buttonXnq8Xhka4Cls4Mo1Hw1H0"}
                data-plasmic-override={overrides.buttonXnq8Xhka4Cls4Mo1Hw1H0}
                className={classNames(
                  projectcss.all,
                  sty.buttonXnq8Xhka4Cls4Mo1Hw1H0
                )}
              />
            </div>
          </div>
        ) : null}
        {(() => {
          try {
            return $props.showBonuses;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div
            data-plasmic-name={"\u0431\u043b\u043e\u043a04Bonuses"}
            data-plasmic-override={overrides.блок04Bonuses}
            className={classNames(projectcss.all, sty.блок04Bonuses)}
          >
            <div
              data-plasmic-name={"frame13"}
              data-plasmic-override={overrides.frame13}
              className={classNames(projectcss.all, sty.frame13)}
            >
              <div
                data-plasmic-name={
                  "\u0441\u0442\u0430\u0442\u0438\u0447\u043d\u044b\u0439\u0422\u0435\u043a\u0441\u04424"
                }
                data-plasmic-override={overrides.статичныйТекст4}
                className={classNames(projectcss.all, sty.статичныйтекст4)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___61KzZ
                  )}
                >
                  {"\u0411\u0435\u043d\u0435\u0444\u0438\u0442\u044b"}
                </div>
                <div
                  data-plasmic-name={
                    "\u0441\u0442\u0430\u0442\u0438\u0447\u043d\u044b\u0439\u0422\u0435\u043a\u0441\u0442"
                  }
                  data-plasmic-override={overrides.статичныйТекст}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.статичныйтекст
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>
                      {
                        "\u0421\u0430\u043c\u043e\u0435 \u043b\u044e\u0431\u0438\u043c\u043e\u0435\u00a0\u2014 "
                      }
                    </React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 400 }}
                    >
                      {
                        "\u043f\u0440\u043e\u00a0\u0431\u043e\u043d\u0443\u0441\u044b"
                      }
                    </span>
                    <React.Fragment>
                      {
                        " \u041c\u044b\u00a0\u0437\u0430\u0431\u043e\u0442\u0438\u043c\u0441\u044f \u043e\u00a0\u043d\u0430\u0448\u0438\u0445 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430\u0445,\n\u0438\u00a0\u0432\u043e\u0442 \u0447\u0442\u043e \u0432\u0430\u0441 \u0436\u0434\u0435\u0442"
                      }
                    </React.Fragment>
                  </React.Fragment>
                </div>
              </div>
              <div
                data-plasmic-name={"frame14"}
                data-plasmic-override={overrides.frame14}
                className={classNames(projectcss.all, sty.frame14)}
              >
                <div
                  data-plasmic-name={
                    "\u0433\u0440\u0430\u0444\u0438\u043aBoolean"
                  }
                  data-plasmic-override={overrides.графикBoolean}
                  className={classNames(projectcss.all, sty.графикBoolean)}
                >
                  <div
                    data-plasmic-name={"frame15"}
                    data-plasmic-override={overrides.frame15}
                    className={classNames(projectcss.all, sty.frame15)}
                  >
                    <Layer1Icon
                      className={classNames(projectcss.all, sty.svg__k9Vf3)}
                      role={"img"}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pYaXq
                      )}
                    >
                      {
                        "\u0423\u0434\u043e\u0431\u043d\u044b\u0439 \u0433\u0440\u0430\u0444\u0438\u043a"
                      }
                    </div>
                  </div>
                  <div
                    data-plasmic-name={"frame16"}
                    data-plasmic-override={overrides.frame16}
                    className={classNames(projectcss.all, sty.frame16)}
                  >
                    {(() => {
                      try {
                        return $props.showTime;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        data-plasmic-name={
                          "\u0440\u0430\u0431\u043e\u0447\u0438\u0439\u0414\u0435\u043d\u044cBoolean"
                        }
                        data-plasmic-override={overrides.рабочийДеньBoolean}
                        className={classNames(
                          projectcss.all,
                          sty.рабочийденьBoolean
                        )}
                      >
                        <div
                          data-plasmic-name={"\u043b\u0435\u0439\u0431\u043b7"}
                          data-plasmic-override={overrides.лейбл7}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.лейбл7
                          )}
                        >
                          {
                            "\u0420\u0430\u0431\u043e\u0447\u0438\u0439 \u0434\u0435\u043d\u044c"
                          }
                        </div>
                        <div
                          data-plasmic-name={
                            "ru\u041d\u0430\u0447\u0430\u043b\u043e\u041a\u043e\u043d\u0435\u0446"
                          }
                          data-plasmic-override={overrides.ruНачалоКонец}
                          className={classNames(
                            projectcss.all,
                            sty.ruначалоконец
                          )}
                        >
                          <div
                            data-plasmic-name={
                              "\u0442\u0435\u043a\u0441\u0442\u0421\u0413\u0440\u0430\u0444\u0438\u043a\u0430\u0420\u0430\u0431\u043e\u0442\u044b"
                            }
                            data-plasmic-override={
                              overrides.текстСГрафикаРаботы
                            }
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.текстсграфикаработы
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $props.time;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "c 10:00 \u0434\u043e 20:00 10 \u0447 (9 + 1 \u0447 \u043f\u0435\u0440\u0435\u0440\u044b\u0432\u0430)";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                        {false ? (
                          <div
                            data-plasmic-name={
                              "eng\u041d\u0430\u0447\u0430\u043b\u043e\u041a\u043e\u043d\u0435\u0446"
                            }
                            data-plasmic-override={overrides.engНачалоКонец}
                            className={classNames(
                              projectcss.all,
                              sty.engначалоконец
                            )}
                          >
                            <div
                              data-plasmic-name={
                                "c1000\u0414\u043e200010\u042791\u0427\u041f\u0435\u0440\u0435\u0440\u044b\u0432\u0430"
                              }
                              data-plasmic-override={
                                overrides.c1000До200010Ч91ЧПерерыва
                              }
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.c1000До200010Ч91Чперерыва
                              )}
                            >
                              {"17:00 - 23:00"}
                            </div>
                          </div>
                        ) : null}
                      </div>
                    ) : null}
                    {(() => {
                      try {
                        return $props.showRelocation;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return true;
                        }
                        throw e;
                      }
                    })() ? (
                      <div
                        data-plasmic-name={
                          "\u0440\u0435\u043b\u043e\u043a\u0430\u0446\u0438\u044fBoolean"
                        }
                        data-plasmic-override={overrides.релокацияBoolean}
                        className={classNames(
                          projectcss.all,
                          sty.релокацияBoolean
                        )}
                      >
                        <div
                          data-plasmic-name={"\u043b\u0435\u0439\u0431\u043b8"}
                          data-plasmic-override={overrides.лейбл8}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.лейбл8
                          )}
                        >
                          {
                            "\u0420\u0435\u043b\u043e\u043a\u0430\u0446\u0438\u044f"
                          }
                        </div>
                        <div
                          data-plasmic-name={
                            "\u0442\u0435\u043a\u0441\u0442\u0420\u0435\u043b\u043e\u043a\u0430\u0446\u0438\u044f"
                          }
                          data-plasmic-override={overrides.текстРелокация}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.текстрелокация
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $props.relocation;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u0420\u0435\u043b\u043e\u043a\u0435\u0439\u0442-\u043f\u0430\u043a\u0435\u0442 \u0434\u043b\u044f \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                    ) : null}
                  </div>
                </div>
                <div
                  data-plasmic-name={
                    "\u0431\u0435\u043d\u0435\u0444\u0438\u0442\u044bBoolean"
                  }
                  data-plasmic-override={overrides.бенефитыBoolean}
                  className={classNames(projectcss.all, sty.бенефитыBoolean)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__zsvGq)}
                  >
                    <Line54Icon
                      className={classNames(projectcss.all, sty.svg__lmKkC)}
                      role={"img"}
                    />
                  </div>
                  <div
                    data-plasmic-name={"frame17"}
                    data-plasmic-override={overrides.frame17}
                    className={classNames(projectcss.all, sty.frame17)}
                  >
                    <div
                      data-plasmic-name={"frame18"}
                      data-plasmic-override={overrides.frame18}
                      className={classNames(projectcss.all, sty.frame18)}
                    >
                      <div
                        data-plasmic-name={"frame19"}
                        data-plasmic-override={overrides.frame19}
                        className={classNames(projectcss.all, sty.frame19)}
                      >
                        <div
                          data-plasmic-name={"frame2087329735"}
                          data-plasmic-override={overrides.frame2087329735}
                          className={classNames(
                            projectcss.all,
                            sty.frame2087329735
                          )}
                        >
                          <Group2087329733Icon
                            className={classNames(
                              projectcss.all,
                              sty.svg___2CqN
                            )}
                            role={"img"}
                          />
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__tobwo
                          )}
                        >
                          {"\u0411\u0435\u043d\u0435\u0444\u0438\u0442\u044b"}
                        </div>
                      </div>
                      <div
                        data-plasmic-name={"frame20"}
                        data-plasmic-override={overrides.frame20}
                        className={classNames(projectcss.all, sty.frame20)}
                      >
                        <div
                          data-plasmic-name={"maskGroup"}
                          data-plasmic-override={overrides.maskGroup}
                          className={classNames(projectcss.all, sty.maskGroup)}
                        >
                          <div
                            data-plasmic-name={
                              "realisticGiftIconBlueBlackOrangeJ8Gf1Wo9Qhsap8B8N9Vp32"
                            }
                            data-plasmic-override={
                              overrides.realisticGiftIconBlueBlackOrangeJ8Gf1Wo9Qhsap8B8N9Vp32
                            }
                            className={classNames(
                              projectcss.all,
                              sty.realisticGiftIconBlueBlackOrangeJ8Gf1Wo9Qhsap8B8N9Vp32
                            )}
                          />
                        </div>
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"frame21"}
                      data-plasmic-override={overrides.frame21}
                      className={classNames(projectcss.all, sty.frame21)}
                    >
                      {(() => {
                        try {
                          return $props.showCorporate;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          data-plasmic-name={
                            "\u043a\u043e\u0440\u043f\u043e\u0440\u0430\u0442\u0438\u0432\u044bBoolean"
                          }
                          data-plasmic-override={overrides.корпоративыBoolean}
                          className={classNames(
                            projectcss.all,
                            sty.корпоративыBoolean
                          )}
                        >
                          <div
                            data-plasmic-name={
                              "\u043b\u0435\u0439\u0431\u043b9"
                            }
                            data-plasmic-override={overrides.лейбл9}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.лейбл9
                            )}
                          >
                            {
                              "\u041a\u043e\u0440\u043f\u043e\u0440\u0430\u0442\u0438\u0432\u044b"
                            }
                          </div>
                          <div
                            data-plasmic-name={
                              "\u0442\u0435\u043a\u0441\u0442\u041a\u043e\u0440\u043f\u043e\u0440\u0430\u0442\u0438\u0432\u044b"
                            }
                            data-plasmic-override={overrides.текстКорпоративы}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.тексткорпоративы
                            )}
                          >
                            {
                              "\u041a\u043e\u0440\u043f\u043e\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0435 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u044f\n\u0422\u0438\u043c\u0431\u0438\u043b\u0434\u0438\u043d\u0433\u0438"
                            }
                          </div>
                        </div>
                      ) : null}
                      {(() => {
                        try {
                          return $props.showEducation;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          data-plasmic-name={
                            "\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435Boolean"
                          }
                          data-plasmic-override={overrides.обучениеBoolean}
                          className={classNames(
                            projectcss.all,
                            sty.обучениеBoolean
                          )}
                        >
                          <div
                            data-plasmic-name={
                              "\u043b\u0435\u0439\u0431\u043b10"
                            }
                            data-plasmic-override={overrides.лейбл10}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.лейбл10
                            )}
                          >
                            {"\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435"}
                          </div>
                          <div
                            data-plasmic-name={
                              "\u0442\u0435\u043a\u0441\u0442\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435"
                            }
                            data-plasmic-override={overrides.текстОбучение}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.текстобучение
                            )}
                          >
                            {
                              "\u0427\u0430\u0441\u0442\u0438\u0447\u043d\u0430\u044f \u043a\u043e\u043c\u043f\u0435\u043d\u0441\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0444\u0438\u043b\u044c\u043d\u044b\u0445, \u044f\u0437\u044b\u043a\u043e\u0432\u044b\u0445 \u043a\u0443\u0440\u0441\u043e\u0432\n\u0438 \u0441\u043f\u043e\u0440\u0442\u0438\u0432\u043d\u044b\u0445 \u0437\u0430\u043d\u044f\u0442\u0438\u0439 \u043d\u0430 \u0432\u044b\u0431\u043e\u0440\n\u0414\u043e\u0441\u0442\u0443\u043f \u043a \u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u043e\u0439 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0435"
                            }
                          </div>
                        </div>
                      ) : null}
                      {(() => {
                        try {
                          return $props.showSport;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          data-plasmic-name={
                            "\u0441\u043f\u043e\u0440\u0442Boolean"
                          }
                          data-plasmic-override={overrides.спортBoolean}
                          className={classNames(
                            projectcss.all,
                            sty.спортBoolean
                          )}
                        >
                          <div
                            data-plasmic-name={
                              "\u043b\u0435\u0439\u0431\u043b11"
                            }
                            data-plasmic-override={overrides.лейбл11}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.лейбл11
                            )}
                          >
                            {
                              "\u0421\u043f\u043e\u0440\u0442\u0438\u0432\u043d\u044b\u0435 \u043c\u0435\u0440\u043e\u043f\u0440\u0438\u044f\u0442\u0438\u044f"
                            }
                          </div>
                          <div
                            data-plasmic-name={
                              "\u0442\u0435\u043a\u0441\u0442\u0421\u043f\u043e\u0440\u0442"
                            }
                            data-plasmic-override={overrides.текстСпорт}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.текстспорт
                            )}
                          >
                            {
                              "\u041a\u043e\u043d\u0441\u0443\u043b\u044c\u0442\u0430\u0446\u0438\u0438 \u0443 \u0444\u0438\u0442\u043d\u0435\u0441-\u0442\u0440\u0435\u043d\u0435\u0440\u0430 \u043d\u0443\u0442\u0440\u0438\u0446\u0438\u043e\u043b\u043e\u0433\u0430, \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043f\u0438\u0442\u0430\u043d\u0438\u044f \u0438 \u0442\u0440\u0435\u043d\u0438\u0440\u043e\u0432\u043e\u043a"
                            }
                          </div>
                        </div>
                      ) : null}
                    </div>
                  </div>
                </div>
                <div
                  data-plasmic-name={"frame22"}
                  data-plasmic-override={overrides.frame22}
                  className={classNames(projectcss.all, sty.frame22)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__esyYm)}
                  >
                    <Line54Icon
                      className={classNames(projectcss.all, sty.svg__s4NvA)}
                      role={"img"}
                    />
                  </div>
                  <div
                    data-plasmic-name={"frame23"}
                    data-plasmic-override={overrides.frame23}
                    className={classNames(projectcss.all, sty.frame23)}
                  >
                    <div
                      data-plasmic-name={"frame24"}
                      data-plasmic-override={overrides.frame24}
                      className={classNames(projectcss.all, sty.frame24)}
                    >
                      <div
                        data-plasmic-name={"frame2087329778"}
                        data-plasmic-override={overrides.frame2087329778}
                        className={classNames(
                          projectcss.all,
                          sty.frame2087329778
                        )}
                      >
                        <Group2087329730Icon
                          className={classNames(
                            projectcss.all,
                            sty.svg___0UCiz
                          )}
                          role={"img"}
                        />
                      </div>
                      <div
                        data-plasmic-name={
                          "\u0443\u0441\u0442\u0430\u043b\u0438\u0418\u041d\u0443\u0436\u0435\u043d\u041e\u0442\u0434\u044b\u0445"
                        }
                        data-plasmic-override={overrides.усталиИНуженОтдых}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.усталиинуженотдых
                        )}
                      >
                        {"\u0447\u0435\u0442"}
                      </div>
                    </div>
                    <div
                      data-plasmic-name={"frame25"}
                      data-plasmic-override={overrides.frame25}
                      className={classNames(projectcss.all, sty.frame25)}
                    >
                      {(() => {
                        try {
                          return $props.showVacation;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          data-plasmic-name={
                            "\u043e\u0442\u043f\u0443\u0441\u043aBoolean"
                          }
                          data-plasmic-override={overrides.отпускBoolean}
                          className={classNames(
                            projectcss.all,
                            sty.отпускBoolean
                          )}
                        >
                          <div
                            data-plasmic-name={
                              "\u043b\u0435\u0439\u0431\u043b12"
                            }
                            data-plasmic-override={overrides.лейбл12}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.лейбл12
                            )}
                          >
                            {
                              "\u0414\u043d\u0438 \u043e\u0442\u043f\u0443\u0441\u043a\u0430"
                            }
                          </div>
                          <div
                            data-plasmic-name={
                              "\u0442\u0435\u043a\u0441\u0442\u041e\u0442\u043f\u0443\u0441\u043a"
                            }
                            data-plasmic-override={overrides.текстОтпуск}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.текстотпуск
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $props.vacation;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "28 \u0434\u043d\u0435\u0439 \u043e\u0442\u043f\u0443\u0441\u043a\u0430";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                      ) : null}
                      {(() => {
                        try {
                          return $props.showDms;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return true;
                          }
                          throw e;
                        }
                      })() ? (
                        <div
                          data-plasmic-name={"\u0434\u043c\u0441Boolean"}
                          data-plasmic-override={overrides.дмсBoolean}
                          className={classNames(projectcss.all, sty.дмсBoolean)}
                        >
                          <div
                            data-plasmic-name={
                              "\u043b\u0435\u0439\u0431\u043b13"
                            }
                            data-plasmic-override={overrides.лейбл13}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.лейбл13
                            )}
                          >
                            {"\u0414\u041c\u0421"}
                          </div>
                          <div
                            data-plasmic-name={
                              "\u0442\u0435\u043a\u0441\u0442\u0414\u043c\u0441"
                            }
                            data-plasmic-override={overrides.текстДмс}
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.текстдмс
                            )}
                          >
                            <React.Fragment>
                              {(() => {
                                try {
                                  return $props.dms;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "\u041f\u043e\u0441\u043b\u0435 \u0438\u0441\u043f\u044b\u0442\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u0440\u043e\u043a\u0430";
                                  }
                                  throw e;
                                }
                              })()}
                            </React.Fragment>
                          </div>
                        </div>
                      ) : null}
                    </div>
                    <div
                      data-plasmic-name={
                        "suitcaseHeEnteredIcon1E3C0B4Luzshs6Ur47I12"
                      }
                      data-plasmic-override={
                        overrides.suitcaseHeEnteredIcon1E3C0B4Luzshs6Ur47I12
                      }
                      className={classNames(
                        projectcss.all,
                        sty.suitcaseHeEnteredIcon1E3C0B4Luzshs6Ur47I12
                      )}
                    />
                  </div>
                </div>
              </div>
            </div>
          </div>
        ) : null}
        {(() => {
          try {
            return $props.showSalary;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div
            data-plasmic-name={"\u0431\u043b\u043e\u043a05Salary"}
            data-plasmic-override={overrides.блок05Salary}
            className={classNames(projectcss.all, sty.блок05Salary)}
          >
            <div
              data-plasmic-name={"frame29"}
              data-plasmic-override={overrides.frame29}
              className={classNames(projectcss.all, sty.frame29)}
            >
              <div
                data-plasmic-name={"frame30"}
                data-plasmic-override={overrides.frame30}
                className={classNames(projectcss.all, sty.frame30)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___8JZGv
                  )}
                >
                  {"\u0417\u0430\u0440\u043f\u043b\u0430\u0442\u0430"}
                </div>
                <div
                  data-plasmic-name={"liquidChromeShape71"}
                  data-plasmic-override={overrides.liquidChromeShape71}
                  className={classNames(
                    projectcss.all,
                    sty.liquidChromeShape71
                  )}
                />
              </div>
              <ЛогоIcon
                className={classNames(projectcss.all, sty.svg__mB5QZ)}
                role={"img"}
              />
            </div>
            <div
              data-plasmic-name={"frame31"}
              data-plasmic-override={overrides.frame31}
              className={classNames(projectcss.all, sty.frame31)}
            >
              <div
                data-plasmic-name={
                  "\u0437\u043f\u0418\u0441\u043f\u0421\u0440\u043e\u043a"
                }
                data-plasmic-override={overrides.зпИспСрок}
                className={classNames(projectcss.all, sty.зписпсрок)}
              >
                {(() => {
                  try {
                    return $props.showTrialSalary;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    data-plasmic-name={
                      "\u0437\u043f\u0418\u0441\u043f\u0421\u0440\u043e\u043aBoolean"
                    }
                    data-plasmic-override={overrides.зпИспСрокBoolean}
                    className={classNames(projectcss.all, sty.зписпсрокBoolean)}
                  >
                    <div
                      data-plasmic-name={"frame32"}
                      data-plasmic-override={overrides.frame32}
                      className={classNames(projectcss.all, sty.frame32)}
                    >
                      <div
                        data-plasmic-name={
                          "\u0432\u0430\u043b\u044e\u0442\u0430\u0414\u043e2"
                        }
                        data-plasmic-override={overrides.валютаДо2}
                        className={classNames(projectcss.all, sty.валютадо2)}
                      >
                        <div
                          data-plasmic-name={"\u0440\u0443\u0431\u043b\u044c"}
                          data-plasmic-override={overrides.рубль}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.рубль
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $props.currency;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "\u20bd";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                      <div
                        data-plasmic-name={
                          "\u0442\u0435\u043a\u0441\u0442\u0427\u0438\u0441\u043b\u043e2"
                        }
                        data-plasmic-override={overrides.текстЧисло2}
                        className={classNames(projectcss.all, sty.текстчисло2)}
                      >
                        <div
                          data-plasmic-name={
                            "\u043c\u044b\u0420\u0430\u0434\u044b\u0421\u0434\u0435\u043b\u0430\u0442\u044c\u0412\u0430\u043c4"
                          }
                          data-plasmic-override={overrides.мыРадыСделатьВам4}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.мырадысделатьвам4
                          )}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return $props.trialSalary;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "150 000";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </div>
                      </div>
                      <div
                        data-plasmic-name={
                          "\u0432\u0430\u043b\u044e\u0442\u0430\u041f\u043e\u0441\u043b\u04352"
                        }
                        data-plasmic-override={overrides.валютаПосле2}
                        className={classNames(projectcss.all, sty.валютапосле2)}
                      >
                        <div
                          data-plasmic-name={"\u0440\u0443\u0431\u043b\u044c2"}
                          data-plasmic-override={overrides.рубль2}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.рубль2
                          )}
                        >
                          {"\u20bd"}
                        </div>
                      </div>
                    </div>
                    <div
                      data-plasmic-name={
                        "\u043c\u044b\u0420\u0430\u0434\u044b\u0421\u0434\u0435\u043b\u0430\u0442\u044c\u0412\u0430\u043c"
                      }
                      data-plasmic-override={overrides.мыРадыСделатьВам}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.мырадысделатьвам
                      )}
                    >
                      {
                        "\u041d\u0430 \u043f\u0435\u0440\u0438\u043e\u0434 \u0438\u0441\u043f\u044b\u0442\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u0441\u0440\u043e\u043a\u0430"
                      }
                    </div>
                  </div>
                ) : null}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__buJqP)}>
                <div
                  data-plasmic-name={
                    "\u0437\u0430\u0440\u043f\u043b\u0430\u0442\u04302"
                  }
                  data-plasmic-override={overrides.зарплата2}
                  className={classNames(projectcss.all, sty.зарплата2)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox___4Qwog)}
                  >
                    <div
                      data-plasmic-name={
                        "\u0432\u0430\u043b\u044e\u0442\u0430\u0414\u043e3"
                      }
                      data-plasmic-override={overrides.валютаДо3}
                      className={classNames(projectcss.all, sty.валютадо3)}
                    >
                      <div
                        data-plasmic-name={"\u0440\u0443\u0431\u043b\u044c4"}
                        data-plasmic-override={overrides.рубль4}
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.рубль4
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return $props.currency;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u20bd";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                    </div>
                  </div>
                  <div
                    data-plasmic-name={
                      "\u0442\u0435\u043a\u0441\u0442\u0427\u0438\u0441\u043b\u043e3"
                    }
                    data-plasmic-override={overrides.текстЧисло3}
                    className={classNames(projectcss.all, sty.текстчисло3)}
                  >
                    <div
                      data-plasmic-name={"_301"}
                      data-plasmic-override={overrides._301}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty._301
                      )}
                      style={{ "white-space": "nowrap" }}
                    >
                      {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                        "300 000"
                      ) : (
                        <React.Fragment>
                          {(() => {
                            try {
                              return $props.salary;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "300 000";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        ) : null}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  mainComponentVer1: [
    "mainComponentVer1",
    "\u0431\u043b\u043e\u043a01Data",
    "\u0444\u043e\u043d",
    "rectangle240649526",
    "img",
    "\u0441\u0442\u0430\u0442\u0438\u0447\u043d\u044b\u0439\u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a",
    "\u0434\u0430\u0442\u0430\u041e\u0444\u0444\u0435\u0440\u0430",
    "ic",
    "frame",
    "frame2",
    "frame3",
    "\u043c\u0435\u0441\u044f\u0446Ru",
    "\u044f\u043d\u0432\u0430\u0440\u044c",
    "\u043c\u0435\u0441\u044f\u0446En",
    "january",
    "_31",
    "_2025",
    "\u0431\u043b\u043e\u043a\u0438",
    "\u0431\u043b\u043e\u043a02Offer",
    "frame4",
    "frame5",
    "\u043f\u043e\u0437\u0438\u0446\u0438\u044fBoolean",
    "\u043b\u0435\u0439\u0431\u043b",
    "\u0442\u0435\u043a\u0441\u0442\u041f\u043e\u0437\u0438\u0446\u0438\u044f",
    "\u043d\u0430\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044cBoolean",
    "\u043b\u0435\u0439\u0431\u043b2",
    "\u0442\u0435\u043a\u0441\u0442\u041d\u0430\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c",
    "\u043e\u0442\u0434\u0435\u043bBoolean",
    "\u043b\u0435\u0439\u0431\u043b3",
    "\u0442\u0435\u043a\u0441\u0442\u041e\u0442\u0434\u0435\u043b",
    "frame6",
    "\u0438\u043c\u044f\u0424\u0430\u043c\u0438\u043b\u0438\u044f",
    "\u0442\u0435\u043a\u0441\u0442\u0418\u043c\u044f\u0424\u0430\u043c\u0438\u043b\u0438\u044f",
    "\u0441\u0442\u0430\u0442\u0438\u0447\u043d\u044b\u0439\u0422\u0435\u043a\u0441\u04422",
    "\u0441\u0442\u0430\u0442\u0438\u0447\u043d\u044b\u0439\u0422\u0435\u043a\u0441\u04423",
    "\u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440",
    "frame7",
    "\u0442\u0435\u043a\u0441\u0442\u0422\u0433\u041d\u0438\u043a\u043d\u0435\u0439\u043c",
    "\u0431\u043b\u043e\u043a03Info",
    "frame12",
    "buttonYpwbaox5E6Nkkyq1L1H01",
    "frame8",
    "frame9",
    "changeTxt",
    "\u043c\u044b\u0420\u0430\u0434\u044b\u0421\u0434\u0435\u043b\u0430\u0442\u044c\u0412\u0430\u043c2",
    "\u043f\u043e\u043b\u044f",
    "\u043c\u0435\u0441\u0442\u043e\u0420\u0430\u0431\u043e\u0442\u044b",
    "\u043b\u0435\u0439\u0431\u043b4",
    "\u0442\u0435\u043a\u0441\u0442\u041c\u0435\u0441\u0442\u043e\u0420\u0430\u0431\u043e\u0442\u044b",
    "\u0438\u0441\u043f\u0421\u0440\u043e\u043a",
    "\u043b\u0435\u0439\u0431\u043b5",
    "\u0442\u0435\u043a\u0441\u0442\u0418\u0441\u043f\u0421\u0440\u043e\u043a",
    "\u0442\u0435\u043a\u0441\u0442\u0418\u0441\u043f\u0421\u0440\u043e\u043a2",
    "\u0433\u0440\u0430\u0444\u0438\u043a",
    "\u043b\u0435\u0439\u0431\u043b6",
    "frame10",
    "\u0442\u0435\u043a\u0441\u0442\u0414\u043d\u043852",
    "\u043c\u044b\u0420\u0430\u0434\u044b\u0421\u0434\u0435\u043b\u0430\u0442\u044c\u0412\u0430\u043c3",
    "\u0442\u0435\u043a\u0441\u0442\u0421\u0414\u043e\u04211000\u0414\u043e1500",
    "c1000\u0414\u043e200010\u042791\u0427\u041f\u0435\u0440\u0435\u0440\u044b\u0432\u04302",
    "eng\u041d\u0430\u0447\u0430\u043b\u043e\u041a\u043e\u043d\u0435\u04462",
    "c1000\u0414\u043e200010\u042791\u0427\u041f\u0435\u0440\u0435\u0440\u044b\u0432\u04303",
    "frame11",
    "buttonXnq8Xhka4Cls4Mo1Hw1H0",
    "\u0431\u043b\u043e\u043a04Bonuses",
    "frame13",
    "\u0441\u0442\u0430\u0442\u0438\u0447\u043d\u044b\u0439\u0422\u0435\u043a\u0441\u04424",
    "\u0441\u0442\u0430\u0442\u0438\u0447\u043d\u044b\u0439\u0422\u0435\u043a\u0441\u0442",
    "frame14",
    "\u0433\u0440\u0430\u0444\u0438\u043aBoolean",
    "frame15",
    "frame16",
    "\u0440\u0430\u0431\u043e\u0447\u0438\u0439\u0414\u0435\u043d\u044cBoolean",
    "\u043b\u0435\u0439\u0431\u043b7",
    "ru\u041d\u0430\u0447\u0430\u043b\u043e\u041a\u043e\u043d\u0435\u0446",
    "\u0442\u0435\u043a\u0441\u0442\u0421\u0413\u0440\u0430\u0444\u0438\u043a\u0430\u0420\u0430\u0431\u043e\u0442\u044b",
    "eng\u041d\u0430\u0447\u0430\u043b\u043e\u041a\u043e\u043d\u0435\u0446",
    "c1000\u0414\u043e200010\u042791\u0427\u041f\u0435\u0440\u0435\u0440\u044b\u0432\u0430",
    "\u0440\u0435\u043b\u043e\u043a\u0430\u0446\u0438\u044fBoolean",
    "\u043b\u0435\u0439\u0431\u043b8",
    "\u0442\u0435\u043a\u0441\u0442\u0420\u0435\u043b\u043e\u043a\u0430\u0446\u0438\u044f",
    "\u0431\u0435\u043d\u0435\u0444\u0438\u0442\u044bBoolean",
    "frame17",
    "frame18",
    "frame19",
    "frame2087329735",
    "frame20",
    "maskGroup",
    "realisticGiftIconBlueBlackOrangeJ8Gf1Wo9Qhsap8B8N9Vp32",
    "frame21",
    "\u043a\u043e\u0440\u043f\u043e\u0440\u0430\u0442\u0438\u0432\u044bBoolean",
    "\u043b\u0435\u0439\u0431\u043b9",
    "\u0442\u0435\u043a\u0441\u0442\u041a\u043e\u0440\u043f\u043e\u0440\u0430\u0442\u0438\u0432\u044b",
    "\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435Boolean",
    "\u043b\u0435\u0439\u0431\u043b10",
    "\u0442\u0435\u043a\u0441\u0442\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435",
    "\u0441\u043f\u043e\u0440\u0442Boolean",
    "\u043b\u0435\u0439\u0431\u043b11",
    "\u0442\u0435\u043a\u0441\u0442\u0421\u043f\u043e\u0440\u0442",
    "frame22",
    "frame23",
    "frame24",
    "frame2087329778",
    "\u0443\u0441\u0442\u0430\u043b\u0438\u0418\u041d\u0443\u0436\u0435\u043d\u041e\u0442\u0434\u044b\u0445",
    "frame25",
    "\u043e\u0442\u043f\u0443\u0441\u043aBoolean",
    "\u043b\u0435\u0439\u0431\u043b12",
    "\u0442\u0435\u043a\u0441\u0442\u041e\u0442\u043f\u0443\u0441\u043a",
    "\u0434\u043c\u0441Boolean",
    "\u043b\u0435\u0439\u0431\u043b13",
    "\u0442\u0435\u043a\u0441\u0442\u0414\u043c\u0441",
    "suitcaseHeEnteredIcon1E3C0B4Luzshs6Ur47I12",
    "\u0431\u043b\u043e\u043a05Salary",
    "frame29",
    "frame30",
    "liquidChromeShape71",
    "frame31",
    "\u0437\u043f\u0418\u0441\u043f\u0421\u0440\u043e\u043a",
    "\u0437\u043f\u0418\u0441\u043f\u0421\u0440\u043e\u043aBoolean",
    "frame32",
    "\u0432\u0430\u043b\u044e\u0442\u0430\u0414\u043e2",
    "\u0440\u0443\u0431\u043b\u044c",
    "\u0442\u0435\u043a\u0441\u0442\u0427\u0438\u0441\u043b\u043e2",
    "\u043c\u044b\u0420\u0430\u0434\u044b\u0421\u0434\u0435\u043b\u0430\u0442\u044c\u0412\u0430\u043c4",
    "\u0432\u0430\u043b\u044e\u0442\u0430\u041f\u043e\u0441\u043b\u04352",
    "\u0440\u0443\u0431\u043b\u044c2",
    "\u043c\u044b\u0420\u0430\u0434\u044b\u0421\u0434\u0435\u043b\u0430\u0442\u044c\u0412\u0430\u043c",
    "\u0437\u0430\u0440\u043f\u043b\u0430\u0442\u04302",
    "\u0432\u0430\u043b\u044e\u0442\u0430\u0414\u043e3",
    "\u0440\u0443\u0431\u043b\u044c4",
    "\u0442\u0435\u043a\u0441\u0442\u0427\u0438\u0441\u043b\u043e3",
    "_301"
  ],
  блок01Data: [
    "\u0431\u043b\u043e\u043a01Data",
    "\u0444\u043e\u043d",
    "rectangle240649526",
    "img",
    "\u0441\u0442\u0430\u0442\u0438\u0447\u043d\u044b\u0439\u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a",
    "\u0434\u0430\u0442\u0430\u041e\u0444\u0444\u0435\u0440\u0430",
    "ic",
    "frame",
    "frame2",
    "frame3",
    "\u043c\u0435\u0441\u044f\u0446Ru",
    "\u044f\u043d\u0432\u0430\u0440\u044c",
    "\u043c\u0435\u0441\u044f\u0446En",
    "january",
    "_31",
    "_2025"
  ],
  фон: ["\u0444\u043e\u043d", "rectangle240649526", "img"],
  rectangle240649526: ["rectangle240649526"],
  img: ["img"],
  статичныйЗаголовок: [
    "\u0441\u0442\u0430\u0442\u0438\u0447\u043d\u044b\u0439\u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a"
  ],
  датаОффера: [
    "\u0434\u0430\u0442\u0430\u041e\u0444\u0444\u0435\u0440\u0430",
    "ic",
    "frame",
    "frame2",
    "frame3",
    "\u043c\u0435\u0441\u044f\u0446Ru",
    "\u044f\u043d\u0432\u0430\u0440\u044c",
    "\u043c\u0435\u0441\u044f\u0446En",
    "january",
    "_31",
    "_2025"
  ],
  ic: ["ic"],
  frame: [
    "frame",
    "frame2",
    "frame3",
    "\u043c\u0435\u0441\u044f\u0446Ru",
    "\u044f\u043d\u0432\u0430\u0440\u044c",
    "\u043c\u0435\u0441\u044f\u0446En",
    "january",
    "_31",
    "_2025"
  ],
  frame2: [
    "frame2",
    "frame3",
    "\u043c\u0435\u0441\u044f\u0446Ru",
    "\u044f\u043d\u0432\u0430\u0440\u044c",
    "\u043c\u0435\u0441\u044f\u0446En",
    "january",
    "_31"
  ],
  frame3: [
    "frame3",
    "\u043c\u0435\u0441\u044f\u0446Ru",
    "\u044f\u043d\u0432\u0430\u0440\u044c",
    "\u043c\u0435\u0441\u044f\u0446En",
    "january",
    "_31"
  ],
  месяцRu: [
    "\u043c\u0435\u0441\u044f\u0446Ru",
    "\u044f\u043d\u0432\u0430\u0440\u044c"
  ],
  январь: ["\u044f\u043d\u0432\u0430\u0440\u044c"],
  месяцEn: ["\u043c\u0435\u0441\u044f\u0446En", "january"],
  january: ["january"],
  _31: ["_31"],
  _2025: ["_2025"],
  блоки: [
    "\u0431\u043b\u043e\u043a\u0438",
    "\u0431\u043b\u043e\u043a02Offer",
    "frame4",
    "frame5",
    "\u043f\u043e\u0437\u0438\u0446\u0438\u044fBoolean",
    "\u043b\u0435\u0439\u0431\u043b",
    "\u0442\u0435\u043a\u0441\u0442\u041f\u043e\u0437\u0438\u0446\u0438\u044f",
    "\u043d\u0430\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044cBoolean",
    "\u043b\u0435\u0439\u0431\u043b2",
    "\u0442\u0435\u043a\u0441\u0442\u041d\u0430\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c",
    "\u043e\u0442\u0434\u0435\u043bBoolean",
    "\u043b\u0435\u0439\u0431\u043b3",
    "\u0442\u0435\u043a\u0441\u0442\u041e\u0442\u0434\u0435\u043b",
    "frame6",
    "\u0438\u043c\u044f\u0424\u0430\u043c\u0438\u043b\u0438\u044f",
    "\u0442\u0435\u043a\u0441\u0442\u0418\u043c\u044f\u0424\u0430\u043c\u0438\u043b\u0438\u044f",
    "\u0441\u0442\u0430\u0442\u0438\u0447\u043d\u044b\u0439\u0422\u0435\u043a\u0441\u04422",
    "\u0441\u0442\u0430\u0442\u0438\u0447\u043d\u044b\u0439\u0422\u0435\u043a\u0441\u04423",
    "\u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440",
    "frame7",
    "\u0442\u0435\u043a\u0441\u0442\u0422\u0433\u041d\u0438\u043a\u043d\u0435\u0439\u043c",
    "\u0431\u043b\u043e\u043a03Info",
    "frame12",
    "buttonYpwbaox5E6Nkkyq1L1H01",
    "frame8",
    "frame9",
    "changeTxt",
    "\u043c\u044b\u0420\u0430\u0434\u044b\u0421\u0434\u0435\u043b\u0430\u0442\u044c\u0412\u0430\u043c2",
    "\u043f\u043e\u043b\u044f",
    "\u043c\u0435\u0441\u0442\u043e\u0420\u0430\u0431\u043e\u0442\u044b",
    "\u043b\u0435\u0439\u0431\u043b4",
    "\u0442\u0435\u043a\u0441\u0442\u041c\u0435\u0441\u0442\u043e\u0420\u0430\u0431\u043e\u0442\u044b",
    "\u0438\u0441\u043f\u0421\u0440\u043e\u043a",
    "\u043b\u0435\u0439\u0431\u043b5",
    "\u0442\u0435\u043a\u0441\u0442\u0418\u0441\u043f\u0421\u0440\u043e\u043a",
    "\u0442\u0435\u043a\u0441\u0442\u0418\u0441\u043f\u0421\u0440\u043e\u043a2",
    "\u0433\u0440\u0430\u0444\u0438\u043a",
    "\u043b\u0435\u0439\u0431\u043b6",
    "frame10",
    "\u0442\u0435\u043a\u0441\u0442\u0414\u043d\u043852",
    "\u043c\u044b\u0420\u0430\u0434\u044b\u0421\u0434\u0435\u043b\u0430\u0442\u044c\u0412\u0430\u043c3",
    "\u0442\u0435\u043a\u0441\u0442\u0421\u0414\u043e\u04211000\u0414\u043e1500",
    "c1000\u0414\u043e200010\u042791\u0427\u041f\u0435\u0440\u0435\u0440\u044b\u0432\u04302",
    "eng\u041d\u0430\u0447\u0430\u043b\u043e\u041a\u043e\u043d\u0435\u04462",
    "c1000\u0414\u043e200010\u042791\u0427\u041f\u0435\u0440\u0435\u0440\u044b\u0432\u04303",
    "frame11",
    "buttonXnq8Xhka4Cls4Mo1Hw1H0",
    "\u0431\u043b\u043e\u043a04Bonuses",
    "frame13",
    "\u0441\u0442\u0430\u0442\u0438\u0447\u043d\u044b\u0439\u0422\u0435\u043a\u0441\u04424",
    "\u0441\u0442\u0430\u0442\u0438\u0447\u043d\u044b\u0439\u0422\u0435\u043a\u0441\u0442",
    "frame14",
    "\u0433\u0440\u0430\u0444\u0438\u043aBoolean",
    "frame15",
    "frame16",
    "\u0440\u0430\u0431\u043e\u0447\u0438\u0439\u0414\u0435\u043d\u044cBoolean",
    "\u043b\u0435\u0439\u0431\u043b7",
    "ru\u041d\u0430\u0447\u0430\u043b\u043e\u041a\u043e\u043d\u0435\u0446",
    "\u0442\u0435\u043a\u0441\u0442\u0421\u0413\u0440\u0430\u0444\u0438\u043a\u0430\u0420\u0430\u0431\u043e\u0442\u044b",
    "eng\u041d\u0430\u0447\u0430\u043b\u043e\u041a\u043e\u043d\u0435\u0446",
    "c1000\u0414\u043e200010\u042791\u0427\u041f\u0435\u0440\u0435\u0440\u044b\u0432\u0430",
    "\u0440\u0435\u043b\u043e\u043a\u0430\u0446\u0438\u044fBoolean",
    "\u043b\u0435\u0439\u0431\u043b8",
    "\u0442\u0435\u043a\u0441\u0442\u0420\u0435\u043b\u043e\u043a\u0430\u0446\u0438\u044f",
    "\u0431\u0435\u043d\u0435\u0444\u0438\u0442\u044bBoolean",
    "frame17",
    "frame18",
    "frame19",
    "frame2087329735",
    "frame20",
    "maskGroup",
    "realisticGiftIconBlueBlackOrangeJ8Gf1Wo9Qhsap8B8N9Vp32",
    "frame21",
    "\u043a\u043e\u0440\u043f\u043e\u0440\u0430\u0442\u0438\u0432\u044bBoolean",
    "\u043b\u0435\u0439\u0431\u043b9",
    "\u0442\u0435\u043a\u0441\u0442\u041a\u043e\u0440\u043f\u043e\u0440\u0430\u0442\u0438\u0432\u044b",
    "\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435Boolean",
    "\u043b\u0435\u0439\u0431\u043b10",
    "\u0442\u0435\u043a\u0441\u0442\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435",
    "\u0441\u043f\u043e\u0440\u0442Boolean",
    "\u043b\u0435\u0439\u0431\u043b11",
    "\u0442\u0435\u043a\u0441\u0442\u0421\u043f\u043e\u0440\u0442",
    "frame22",
    "frame23",
    "frame24",
    "frame2087329778",
    "\u0443\u0441\u0442\u0430\u043b\u0438\u0418\u041d\u0443\u0436\u0435\u043d\u041e\u0442\u0434\u044b\u0445",
    "frame25",
    "\u043e\u0442\u043f\u0443\u0441\u043aBoolean",
    "\u043b\u0435\u0439\u0431\u043b12",
    "\u0442\u0435\u043a\u0441\u0442\u041e\u0442\u043f\u0443\u0441\u043a",
    "\u0434\u043c\u0441Boolean",
    "\u043b\u0435\u0439\u0431\u043b13",
    "\u0442\u0435\u043a\u0441\u0442\u0414\u043c\u0441",
    "suitcaseHeEnteredIcon1E3C0B4Luzshs6Ur47I12",
    "\u0431\u043b\u043e\u043a05Salary",
    "frame29",
    "frame30",
    "liquidChromeShape71",
    "frame31",
    "\u0437\u043f\u0418\u0441\u043f\u0421\u0440\u043e\u043a",
    "\u0437\u043f\u0418\u0441\u043f\u0421\u0440\u043e\u043aBoolean",
    "frame32",
    "\u0432\u0430\u043b\u044e\u0442\u0430\u0414\u043e2",
    "\u0440\u0443\u0431\u043b\u044c",
    "\u0442\u0435\u043a\u0441\u0442\u0427\u0438\u0441\u043b\u043e2",
    "\u043c\u044b\u0420\u0430\u0434\u044b\u0421\u0434\u0435\u043b\u0430\u0442\u044c\u0412\u0430\u043c4",
    "\u0432\u0430\u043b\u044e\u0442\u0430\u041f\u043e\u0441\u043b\u04352",
    "\u0440\u0443\u0431\u043b\u044c2",
    "\u043c\u044b\u0420\u0430\u0434\u044b\u0421\u0434\u0435\u043b\u0430\u0442\u044c\u0412\u0430\u043c",
    "\u0437\u0430\u0440\u043f\u043b\u0430\u0442\u04302",
    "\u0432\u0430\u043b\u044e\u0442\u0430\u0414\u043e3",
    "\u0440\u0443\u0431\u043b\u044c4",
    "\u0442\u0435\u043a\u0441\u0442\u0427\u0438\u0441\u043b\u043e3",
    "_301"
  ],
  блок02Offer: [
    "\u0431\u043b\u043e\u043a02Offer",
    "frame4",
    "frame5",
    "\u043f\u043e\u0437\u0438\u0446\u0438\u044fBoolean",
    "\u043b\u0435\u0439\u0431\u043b",
    "\u0442\u0435\u043a\u0441\u0442\u041f\u043e\u0437\u0438\u0446\u0438\u044f",
    "\u043d\u0430\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044cBoolean",
    "\u043b\u0435\u0439\u0431\u043b2",
    "\u0442\u0435\u043a\u0441\u0442\u041d\u0430\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c",
    "\u043e\u0442\u0434\u0435\u043bBoolean",
    "\u043b\u0435\u0439\u0431\u043b3",
    "\u0442\u0435\u043a\u0441\u0442\u041e\u0442\u0434\u0435\u043b",
    "frame6",
    "\u0438\u043c\u044f\u0424\u0430\u043c\u0438\u043b\u0438\u044f",
    "\u0442\u0435\u043a\u0441\u0442\u0418\u043c\u044f\u0424\u0430\u043c\u0438\u043b\u0438\u044f",
    "\u0441\u0442\u0430\u0442\u0438\u0447\u043d\u044b\u0439\u0422\u0435\u043a\u0441\u04422",
    "\u0441\u0442\u0430\u0442\u0438\u0447\u043d\u044b\u0439\u0422\u0435\u043a\u0441\u04423",
    "\u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440",
    "frame7",
    "\u0442\u0435\u043a\u0441\u0442\u0422\u0433\u041d\u0438\u043a\u043d\u0435\u0439\u043c"
  ],
  frame4: [
    "frame4",
    "frame5",
    "\u043f\u043e\u0437\u0438\u0446\u0438\u044fBoolean",
    "\u043b\u0435\u0439\u0431\u043b",
    "\u0442\u0435\u043a\u0441\u0442\u041f\u043e\u0437\u0438\u0446\u0438\u044f",
    "\u043d\u0430\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044cBoolean",
    "\u043b\u0435\u0439\u0431\u043b2",
    "\u0442\u0435\u043a\u0441\u0442\u041d\u0430\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c",
    "\u043e\u0442\u0434\u0435\u043bBoolean",
    "\u043b\u0435\u0439\u0431\u043b3",
    "\u0442\u0435\u043a\u0441\u0442\u041e\u0442\u0434\u0435\u043b",
    "frame6",
    "\u0438\u043c\u044f\u0424\u0430\u043c\u0438\u043b\u0438\u044f",
    "\u0442\u0435\u043a\u0441\u0442\u0418\u043c\u044f\u0424\u0430\u043c\u0438\u043b\u0438\u044f",
    "\u0441\u0442\u0430\u0442\u0438\u0447\u043d\u044b\u0439\u0422\u0435\u043a\u0441\u04422",
    "\u0441\u0442\u0430\u0442\u0438\u0447\u043d\u044b\u0439\u0422\u0435\u043a\u0441\u04423"
  ],
  frame5: [
    "frame5",
    "\u043f\u043e\u0437\u0438\u0446\u0438\u044fBoolean",
    "\u043b\u0435\u0439\u0431\u043b",
    "\u0442\u0435\u043a\u0441\u0442\u041f\u043e\u0437\u0438\u0446\u0438\u044f",
    "\u043d\u0430\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044cBoolean",
    "\u043b\u0435\u0439\u0431\u043b2",
    "\u0442\u0435\u043a\u0441\u0442\u041d\u0430\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c",
    "\u043e\u0442\u0434\u0435\u043bBoolean",
    "\u043b\u0435\u0439\u0431\u043b3",
    "\u0442\u0435\u043a\u0441\u0442\u041e\u0442\u0434\u0435\u043b"
  ],
  позицияBoolean: [
    "\u043f\u043e\u0437\u0438\u0446\u0438\u044fBoolean",
    "\u043b\u0435\u0439\u0431\u043b",
    "\u0442\u0435\u043a\u0441\u0442\u041f\u043e\u0437\u0438\u0446\u0438\u044f"
  ],
  лейбл: ["\u043b\u0435\u0439\u0431\u043b"],
  текстПозиция: [
    "\u0442\u0435\u043a\u0441\u0442\u041f\u043e\u0437\u0438\u0446\u0438\u044f"
  ],
  нанимательBoolean: [
    "\u043d\u0430\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044cBoolean",
    "\u043b\u0435\u0439\u0431\u043b2",
    "\u0442\u0435\u043a\u0441\u0442\u041d\u0430\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c"
  ],
  лейбл2: ["\u043b\u0435\u0439\u0431\u043b2"],
  текстНаниматель: [
    "\u0442\u0435\u043a\u0441\u0442\u041d\u0430\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c"
  ],
  отделBoolean: [
    "\u043e\u0442\u0434\u0435\u043bBoolean",
    "\u043b\u0435\u0439\u0431\u043b3",
    "\u0442\u0435\u043a\u0441\u0442\u041e\u0442\u0434\u0435\u043b"
  ],
  лейбл3: ["\u043b\u0435\u0439\u0431\u043b3"],
  текстОтдел: ["\u0442\u0435\u043a\u0441\u0442\u041e\u0442\u0434\u0435\u043b"],
  frame6: [
    "frame6",
    "\u0438\u043c\u044f\u0424\u0430\u043c\u0438\u043b\u0438\u044f",
    "\u0442\u0435\u043a\u0441\u0442\u0418\u043c\u044f\u0424\u0430\u043c\u0438\u043b\u0438\u044f",
    "\u0441\u0442\u0430\u0442\u0438\u0447\u043d\u044b\u0439\u0422\u0435\u043a\u0441\u04422",
    "\u0441\u0442\u0430\u0442\u0438\u0447\u043d\u044b\u0439\u0422\u0435\u043a\u0441\u04423"
  ],
  имяФамилия: [
    "\u0438\u043c\u044f\u0424\u0430\u043c\u0438\u043b\u0438\u044f",
    "\u0442\u0435\u043a\u0441\u0442\u0418\u043c\u044f\u0424\u0430\u043c\u0438\u043b\u0438\u044f"
  ],
  текстИмяФамилия: [
    "\u0442\u0435\u043a\u0441\u0442\u0418\u043c\u044f\u0424\u0430\u043c\u0438\u043b\u0438\u044f"
  ],
  статичныйТекст2: [
    "\u0441\u0442\u0430\u0442\u0438\u0447\u043d\u044b\u0439\u0422\u0435\u043a\u0441\u04422",
    "\u0441\u0442\u0430\u0442\u0438\u0447\u043d\u044b\u0439\u0422\u0435\u043a\u0441\u04423"
  ],
  статичныйТекст3: [
    "\u0441\u0442\u0430\u0442\u0438\u0447\u043d\u044b\u0439\u0422\u0435\u043a\u0441\u04423"
  ],
  менеджер: [
    "\u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440",
    "frame7",
    "\u0442\u0435\u043a\u0441\u0442\u0422\u0433\u041d\u0438\u043a\u043d\u0435\u0439\u043c"
  ],
  frame7: [
    "frame7",
    "\u0442\u0435\u043a\u0441\u0442\u0422\u0433\u041d\u0438\u043a\u043d\u0435\u0439\u043c"
  ],
  текстТгНикнейм: [
    "\u0442\u0435\u043a\u0441\u0442\u0422\u0433\u041d\u0438\u043a\u043d\u0435\u0439\u043c"
  ],
  блок03Info: [
    "\u0431\u043b\u043e\u043a03Info",
    "frame12",
    "buttonYpwbaox5E6Nkkyq1L1H01",
    "frame8",
    "frame9",
    "changeTxt",
    "\u043c\u044b\u0420\u0430\u0434\u044b\u0421\u0434\u0435\u043b\u0430\u0442\u044c\u0412\u0430\u043c2",
    "\u043f\u043e\u043b\u044f",
    "\u043c\u0435\u0441\u0442\u043e\u0420\u0430\u0431\u043e\u0442\u044b",
    "\u043b\u0435\u0439\u0431\u043b4",
    "\u0442\u0435\u043a\u0441\u0442\u041c\u0435\u0441\u0442\u043e\u0420\u0430\u0431\u043e\u0442\u044b",
    "\u0438\u0441\u043f\u0421\u0440\u043e\u043a",
    "\u043b\u0435\u0439\u0431\u043b5",
    "\u0442\u0435\u043a\u0441\u0442\u0418\u0441\u043f\u0421\u0440\u043e\u043a",
    "\u0442\u0435\u043a\u0441\u0442\u0418\u0441\u043f\u0421\u0440\u043e\u043a2",
    "\u0433\u0440\u0430\u0444\u0438\u043a",
    "\u043b\u0435\u0439\u0431\u043b6",
    "frame10",
    "\u0442\u0435\u043a\u0441\u0442\u0414\u043d\u043852",
    "\u043c\u044b\u0420\u0430\u0434\u044b\u0421\u0434\u0435\u043b\u0430\u0442\u044c\u0412\u0430\u043c3",
    "\u0442\u0435\u043a\u0441\u0442\u0421\u0414\u043e\u04211000\u0414\u043e1500",
    "c1000\u0414\u043e200010\u042791\u0427\u041f\u0435\u0440\u0435\u0440\u044b\u0432\u04302",
    "eng\u041d\u0430\u0447\u0430\u043b\u043e\u041a\u043e\u043d\u0435\u04462",
    "c1000\u0414\u043e200010\u042791\u0427\u041f\u0435\u0440\u0435\u0440\u044b\u0432\u04303",
    "frame11",
    "buttonXnq8Xhka4Cls4Mo1Hw1H0"
  ],
  frame12: ["frame12", "buttonYpwbaox5E6Nkkyq1L1H01"],
  buttonYpwbaox5E6Nkkyq1L1H01: ["buttonYpwbaox5E6Nkkyq1L1H01"],
  frame8: [
    "frame8",
    "frame9",
    "changeTxt",
    "\u043c\u044b\u0420\u0430\u0434\u044b\u0421\u0434\u0435\u043b\u0430\u0442\u044c\u0412\u0430\u043c2",
    "\u043f\u043e\u043b\u044f",
    "\u043c\u0435\u0441\u0442\u043e\u0420\u0430\u0431\u043e\u0442\u044b",
    "\u043b\u0435\u0439\u0431\u043b4",
    "\u0442\u0435\u043a\u0441\u0442\u041c\u0435\u0441\u0442\u043e\u0420\u0430\u0431\u043e\u0442\u044b",
    "\u0438\u0441\u043f\u0421\u0440\u043e\u043a",
    "\u043b\u0435\u0439\u0431\u043b5",
    "\u0442\u0435\u043a\u0441\u0442\u0418\u0441\u043f\u0421\u0440\u043e\u043a",
    "\u0442\u0435\u043a\u0441\u0442\u0418\u0441\u043f\u0421\u0440\u043e\u043a2",
    "\u0433\u0440\u0430\u0444\u0438\u043a",
    "\u043b\u0435\u0439\u0431\u043b6",
    "frame10",
    "\u0442\u0435\u043a\u0441\u0442\u0414\u043d\u043852",
    "\u043c\u044b\u0420\u0430\u0434\u044b\u0421\u0434\u0435\u043b\u0430\u0442\u044c\u0412\u0430\u043c3",
    "\u0442\u0435\u043a\u0441\u0442\u0421\u0414\u043e\u04211000\u0414\u043e1500",
    "c1000\u0414\u043e200010\u042791\u0427\u041f\u0435\u0440\u0435\u0440\u044b\u0432\u04302",
    "eng\u041d\u0430\u0447\u0430\u043b\u043e\u041a\u043e\u043d\u0435\u04462",
    "c1000\u0414\u043e200010\u042791\u0427\u041f\u0435\u0440\u0435\u0440\u044b\u0432\u04303"
  ],
  frame9: [
    "frame9",
    "changeTxt",
    "\u043c\u044b\u0420\u0430\u0434\u044b\u0421\u0434\u0435\u043b\u0430\u0442\u044c\u0412\u0430\u043c2"
  ],
  changeTxt: ["changeTxt"],
  мыРадыСделатьВам2: [
    "\u043c\u044b\u0420\u0430\u0434\u044b\u0421\u0434\u0435\u043b\u0430\u0442\u044c\u0412\u0430\u043c2"
  ],
  поля: [
    "\u043f\u043e\u043b\u044f",
    "\u043c\u0435\u0441\u0442\u043e\u0420\u0430\u0431\u043e\u0442\u044b",
    "\u043b\u0435\u0439\u0431\u043b4",
    "\u0442\u0435\u043a\u0441\u0442\u041c\u0435\u0441\u0442\u043e\u0420\u0430\u0431\u043e\u0442\u044b",
    "\u0438\u0441\u043f\u0421\u0440\u043e\u043a",
    "\u043b\u0435\u0439\u0431\u043b5",
    "\u0442\u0435\u043a\u0441\u0442\u0418\u0441\u043f\u0421\u0440\u043e\u043a",
    "\u0442\u0435\u043a\u0441\u0442\u0418\u0441\u043f\u0421\u0440\u043e\u043a2",
    "\u0433\u0440\u0430\u0444\u0438\u043a",
    "\u043b\u0435\u0439\u0431\u043b6",
    "frame10",
    "\u0442\u0435\u043a\u0441\u0442\u0414\u043d\u043852",
    "\u043c\u044b\u0420\u0430\u0434\u044b\u0421\u0434\u0435\u043b\u0430\u0442\u044c\u0412\u0430\u043c3",
    "\u0442\u0435\u043a\u0441\u0442\u0421\u0414\u043e\u04211000\u0414\u043e1500",
    "c1000\u0414\u043e200010\u042791\u0427\u041f\u0435\u0440\u0435\u0440\u044b\u0432\u04302",
    "eng\u041d\u0430\u0447\u0430\u043b\u043e\u041a\u043e\u043d\u0435\u04462",
    "c1000\u0414\u043e200010\u042791\u0427\u041f\u0435\u0440\u0435\u0440\u044b\u0432\u04303"
  ],
  местоРаботы: [
    "\u043c\u0435\u0441\u0442\u043e\u0420\u0430\u0431\u043e\u0442\u044b",
    "\u043b\u0435\u0439\u0431\u043b4",
    "\u0442\u0435\u043a\u0441\u0442\u041c\u0435\u0441\u0442\u043e\u0420\u0430\u0431\u043e\u0442\u044b"
  ],
  лейбл4: ["\u043b\u0435\u0439\u0431\u043b4"],
  текстМестоРаботы: [
    "\u0442\u0435\u043a\u0441\u0442\u041c\u0435\u0441\u0442\u043e\u0420\u0430\u0431\u043e\u0442\u044b"
  ],
  испСрок: [
    "\u0438\u0441\u043f\u0421\u0440\u043e\u043a",
    "\u043b\u0435\u0439\u0431\u043b5",
    "\u0442\u0435\u043a\u0441\u0442\u0418\u0441\u043f\u0421\u0440\u043e\u043a",
    "\u0442\u0435\u043a\u0441\u0442\u0418\u0441\u043f\u0421\u0440\u043e\u043a2"
  ],
  лейбл5: ["\u043b\u0435\u0439\u0431\u043b5"],
  текстИспСрок: [
    "\u0442\u0435\u043a\u0441\u0442\u0418\u0441\u043f\u0421\u0440\u043e\u043a"
  ],
  текстИспСрок2: [
    "\u0442\u0435\u043a\u0441\u0442\u0418\u0441\u043f\u0421\u0440\u043e\u043a2"
  ],
  график: [
    "\u0433\u0440\u0430\u0444\u0438\u043a",
    "\u043b\u0435\u0439\u0431\u043b6",
    "frame10",
    "\u0442\u0435\u043a\u0441\u0442\u0414\u043d\u043852",
    "\u043c\u044b\u0420\u0430\u0434\u044b\u0421\u0434\u0435\u043b\u0430\u0442\u044c\u0412\u0430\u043c3",
    "\u0442\u0435\u043a\u0441\u0442\u0421\u0414\u043e\u04211000\u0414\u043e1500",
    "c1000\u0414\u043e200010\u042791\u0427\u041f\u0435\u0440\u0435\u0440\u044b\u0432\u04302",
    "eng\u041d\u0430\u0447\u0430\u043b\u043e\u041a\u043e\u043d\u0435\u04462",
    "c1000\u0414\u043e200010\u042791\u0427\u041f\u0435\u0440\u0435\u0440\u044b\u0432\u04303"
  ],
  лейбл6: ["\u043b\u0435\u0439\u0431\u043b6"],
  frame10: [
    "frame10",
    "\u0442\u0435\u043a\u0441\u0442\u0414\u043d\u043852",
    "\u043c\u044b\u0420\u0430\u0434\u044b\u0421\u0434\u0435\u043b\u0430\u0442\u044c\u0412\u0430\u043c3",
    "\u0442\u0435\u043a\u0441\u0442\u0421\u0414\u043e\u04211000\u0414\u043e1500",
    "c1000\u0414\u043e200010\u042791\u0427\u041f\u0435\u0440\u0435\u0440\u044b\u0432\u04302",
    "eng\u041d\u0430\u0447\u0430\u043b\u043e\u041a\u043e\u043d\u0435\u04462",
    "c1000\u0414\u043e200010\u042791\u0427\u041f\u0435\u0440\u0435\u0440\u044b\u0432\u04303"
  ],
  текстДни52: [
    "\u0442\u0435\u043a\u0441\u0442\u0414\u043d\u043852",
    "\u043c\u044b\u0420\u0430\u0434\u044b\u0421\u0434\u0435\u043b\u0430\u0442\u044c\u0412\u0430\u043c3"
  ],
  мыРадыСделатьВам3: [
    "\u043c\u044b\u0420\u0430\u0434\u044b\u0421\u0434\u0435\u043b\u0430\u0442\u044c\u0412\u0430\u043c3"
  ],
  текстСДоС1000До1500: [
    "\u0442\u0435\u043a\u0441\u0442\u0421\u0414\u043e\u04211000\u0414\u043e1500",
    "c1000\u0414\u043e200010\u042791\u0427\u041f\u0435\u0440\u0435\u0440\u044b\u0432\u04302"
  ],
  c1000До200010Ч91ЧПерерыва2: [
    "c1000\u0414\u043e200010\u042791\u0427\u041f\u0435\u0440\u0435\u0440\u044b\u0432\u04302"
  ],
  engНачалоКонец2: [
    "eng\u041d\u0430\u0447\u0430\u043b\u043e\u041a\u043e\u043d\u0435\u04462",
    "c1000\u0414\u043e200010\u042791\u0427\u041f\u0435\u0440\u0435\u0440\u044b\u0432\u04303"
  ],
  c1000До200010Ч91ЧПерерыва3: [
    "c1000\u0414\u043e200010\u042791\u0427\u041f\u0435\u0440\u0435\u0440\u044b\u0432\u04303"
  ],
  frame11: ["frame11", "buttonXnq8Xhka4Cls4Mo1Hw1H0"],
  buttonXnq8Xhka4Cls4Mo1Hw1H0: ["buttonXnq8Xhka4Cls4Mo1Hw1H0"],
  блок04Bonuses: [
    "\u0431\u043b\u043e\u043a04Bonuses",
    "frame13",
    "\u0441\u0442\u0430\u0442\u0438\u0447\u043d\u044b\u0439\u0422\u0435\u043a\u0441\u04424",
    "\u0441\u0442\u0430\u0442\u0438\u0447\u043d\u044b\u0439\u0422\u0435\u043a\u0441\u0442",
    "frame14",
    "\u0433\u0440\u0430\u0444\u0438\u043aBoolean",
    "frame15",
    "frame16",
    "\u0440\u0430\u0431\u043e\u0447\u0438\u0439\u0414\u0435\u043d\u044cBoolean",
    "\u043b\u0435\u0439\u0431\u043b7",
    "ru\u041d\u0430\u0447\u0430\u043b\u043e\u041a\u043e\u043d\u0435\u0446",
    "\u0442\u0435\u043a\u0441\u0442\u0421\u0413\u0440\u0430\u0444\u0438\u043a\u0430\u0420\u0430\u0431\u043e\u0442\u044b",
    "eng\u041d\u0430\u0447\u0430\u043b\u043e\u041a\u043e\u043d\u0435\u0446",
    "c1000\u0414\u043e200010\u042791\u0427\u041f\u0435\u0440\u0435\u0440\u044b\u0432\u0430",
    "\u0440\u0435\u043b\u043e\u043a\u0430\u0446\u0438\u044fBoolean",
    "\u043b\u0435\u0439\u0431\u043b8",
    "\u0442\u0435\u043a\u0441\u0442\u0420\u0435\u043b\u043e\u043a\u0430\u0446\u0438\u044f",
    "\u0431\u0435\u043d\u0435\u0444\u0438\u0442\u044bBoolean",
    "frame17",
    "frame18",
    "frame19",
    "frame2087329735",
    "frame20",
    "maskGroup",
    "realisticGiftIconBlueBlackOrangeJ8Gf1Wo9Qhsap8B8N9Vp32",
    "frame21",
    "\u043a\u043e\u0440\u043f\u043e\u0440\u0430\u0442\u0438\u0432\u044bBoolean",
    "\u043b\u0435\u0439\u0431\u043b9",
    "\u0442\u0435\u043a\u0441\u0442\u041a\u043e\u0440\u043f\u043e\u0440\u0430\u0442\u0438\u0432\u044b",
    "\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435Boolean",
    "\u043b\u0435\u0439\u0431\u043b10",
    "\u0442\u0435\u043a\u0441\u0442\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435",
    "\u0441\u043f\u043e\u0440\u0442Boolean",
    "\u043b\u0435\u0439\u0431\u043b11",
    "\u0442\u0435\u043a\u0441\u0442\u0421\u043f\u043e\u0440\u0442",
    "frame22",
    "frame23",
    "frame24",
    "frame2087329778",
    "\u0443\u0441\u0442\u0430\u043b\u0438\u0418\u041d\u0443\u0436\u0435\u043d\u041e\u0442\u0434\u044b\u0445",
    "frame25",
    "\u043e\u0442\u043f\u0443\u0441\u043aBoolean",
    "\u043b\u0435\u0439\u0431\u043b12",
    "\u0442\u0435\u043a\u0441\u0442\u041e\u0442\u043f\u0443\u0441\u043a",
    "\u0434\u043c\u0441Boolean",
    "\u043b\u0435\u0439\u0431\u043b13",
    "\u0442\u0435\u043a\u0441\u0442\u0414\u043c\u0441",
    "suitcaseHeEnteredIcon1E3C0B4Luzshs6Ur47I12"
  ],
  frame13: [
    "frame13",
    "\u0441\u0442\u0430\u0442\u0438\u0447\u043d\u044b\u0439\u0422\u0435\u043a\u0441\u04424",
    "\u0441\u0442\u0430\u0442\u0438\u0447\u043d\u044b\u0439\u0422\u0435\u043a\u0441\u0442",
    "frame14",
    "\u0433\u0440\u0430\u0444\u0438\u043aBoolean",
    "frame15",
    "frame16",
    "\u0440\u0430\u0431\u043e\u0447\u0438\u0439\u0414\u0435\u043d\u044cBoolean",
    "\u043b\u0435\u0439\u0431\u043b7",
    "ru\u041d\u0430\u0447\u0430\u043b\u043e\u041a\u043e\u043d\u0435\u0446",
    "\u0442\u0435\u043a\u0441\u0442\u0421\u0413\u0440\u0430\u0444\u0438\u043a\u0430\u0420\u0430\u0431\u043e\u0442\u044b",
    "eng\u041d\u0430\u0447\u0430\u043b\u043e\u041a\u043e\u043d\u0435\u0446",
    "c1000\u0414\u043e200010\u042791\u0427\u041f\u0435\u0440\u0435\u0440\u044b\u0432\u0430",
    "\u0440\u0435\u043b\u043e\u043a\u0430\u0446\u0438\u044fBoolean",
    "\u043b\u0435\u0439\u0431\u043b8",
    "\u0442\u0435\u043a\u0441\u0442\u0420\u0435\u043b\u043e\u043a\u0430\u0446\u0438\u044f",
    "\u0431\u0435\u043d\u0435\u0444\u0438\u0442\u044bBoolean",
    "frame17",
    "frame18",
    "frame19",
    "frame2087329735",
    "frame20",
    "maskGroup",
    "realisticGiftIconBlueBlackOrangeJ8Gf1Wo9Qhsap8B8N9Vp32",
    "frame21",
    "\u043a\u043e\u0440\u043f\u043e\u0440\u0430\u0442\u0438\u0432\u044bBoolean",
    "\u043b\u0435\u0439\u0431\u043b9",
    "\u0442\u0435\u043a\u0441\u0442\u041a\u043e\u0440\u043f\u043e\u0440\u0430\u0442\u0438\u0432\u044b",
    "\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435Boolean",
    "\u043b\u0435\u0439\u0431\u043b10",
    "\u0442\u0435\u043a\u0441\u0442\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435",
    "\u0441\u043f\u043e\u0440\u0442Boolean",
    "\u043b\u0435\u0439\u0431\u043b11",
    "\u0442\u0435\u043a\u0441\u0442\u0421\u043f\u043e\u0440\u0442",
    "frame22",
    "frame23",
    "frame24",
    "frame2087329778",
    "\u0443\u0441\u0442\u0430\u043b\u0438\u0418\u041d\u0443\u0436\u0435\u043d\u041e\u0442\u0434\u044b\u0445",
    "frame25",
    "\u043e\u0442\u043f\u0443\u0441\u043aBoolean",
    "\u043b\u0435\u0439\u0431\u043b12",
    "\u0442\u0435\u043a\u0441\u0442\u041e\u0442\u043f\u0443\u0441\u043a",
    "\u0434\u043c\u0441Boolean",
    "\u043b\u0435\u0439\u0431\u043b13",
    "\u0442\u0435\u043a\u0441\u0442\u0414\u043c\u0441",
    "suitcaseHeEnteredIcon1E3C0B4Luzshs6Ur47I12"
  ],
  статичныйТекст4: [
    "\u0441\u0442\u0430\u0442\u0438\u0447\u043d\u044b\u0439\u0422\u0435\u043a\u0441\u04424",
    "\u0441\u0442\u0430\u0442\u0438\u0447\u043d\u044b\u0439\u0422\u0435\u043a\u0441\u0442"
  ],
  статичныйТекст: [
    "\u0441\u0442\u0430\u0442\u0438\u0447\u043d\u044b\u0439\u0422\u0435\u043a\u0441\u0442"
  ],
  frame14: [
    "frame14",
    "\u0433\u0440\u0430\u0444\u0438\u043aBoolean",
    "frame15",
    "frame16",
    "\u0440\u0430\u0431\u043e\u0447\u0438\u0439\u0414\u0435\u043d\u044cBoolean",
    "\u043b\u0435\u0439\u0431\u043b7",
    "ru\u041d\u0430\u0447\u0430\u043b\u043e\u041a\u043e\u043d\u0435\u0446",
    "\u0442\u0435\u043a\u0441\u0442\u0421\u0413\u0440\u0430\u0444\u0438\u043a\u0430\u0420\u0430\u0431\u043e\u0442\u044b",
    "eng\u041d\u0430\u0447\u0430\u043b\u043e\u041a\u043e\u043d\u0435\u0446",
    "c1000\u0414\u043e200010\u042791\u0427\u041f\u0435\u0440\u0435\u0440\u044b\u0432\u0430",
    "\u0440\u0435\u043b\u043e\u043a\u0430\u0446\u0438\u044fBoolean",
    "\u043b\u0435\u0439\u0431\u043b8",
    "\u0442\u0435\u043a\u0441\u0442\u0420\u0435\u043b\u043e\u043a\u0430\u0446\u0438\u044f",
    "\u0431\u0435\u043d\u0435\u0444\u0438\u0442\u044bBoolean",
    "frame17",
    "frame18",
    "frame19",
    "frame2087329735",
    "frame20",
    "maskGroup",
    "realisticGiftIconBlueBlackOrangeJ8Gf1Wo9Qhsap8B8N9Vp32",
    "frame21",
    "\u043a\u043e\u0440\u043f\u043e\u0440\u0430\u0442\u0438\u0432\u044bBoolean",
    "\u043b\u0435\u0439\u0431\u043b9",
    "\u0442\u0435\u043a\u0441\u0442\u041a\u043e\u0440\u043f\u043e\u0440\u0430\u0442\u0438\u0432\u044b",
    "\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435Boolean",
    "\u043b\u0435\u0439\u0431\u043b10",
    "\u0442\u0435\u043a\u0441\u0442\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435",
    "\u0441\u043f\u043e\u0440\u0442Boolean",
    "\u043b\u0435\u0439\u0431\u043b11",
    "\u0442\u0435\u043a\u0441\u0442\u0421\u043f\u043e\u0440\u0442",
    "frame22",
    "frame23",
    "frame24",
    "frame2087329778",
    "\u0443\u0441\u0442\u0430\u043b\u0438\u0418\u041d\u0443\u0436\u0435\u043d\u041e\u0442\u0434\u044b\u0445",
    "frame25",
    "\u043e\u0442\u043f\u0443\u0441\u043aBoolean",
    "\u043b\u0435\u0439\u0431\u043b12",
    "\u0442\u0435\u043a\u0441\u0442\u041e\u0442\u043f\u0443\u0441\u043a",
    "\u0434\u043c\u0441Boolean",
    "\u043b\u0435\u0439\u0431\u043b13",
    "\u0442\u0435\u043a\u0441\u0442\u0414\u043c\u0441",
    "suitcaseHeEnteredIcon1E3C0B4Luzshs6Ur47I12"
  ],
  графикBoolean: [
    "\u0433\u0440\u0430\u0444\u0438\u043aBoolean",
    "frame15",
    "frame16",
    "\u0440\u0430\u0431\u043e\u0447\u0438\u0439\u0414\u0435\u043d\u044cBoolean",
    "\u043b\u0435\u0439\u0431\u043b7",
    "ru\u041d\u0430\u0447\u0430\u043b\u043e\u041a\u043e\u043d\u0435\u0446",
    "\u0442\u0435\u043a\u0441\u0442\u0421\u0413\u0440\u0430\u0444\u0438\u043a\u0430\u0420\u0430\u0431\u043e\u0442\u044b",
    "eng\u041d\u0430\u0447\u0430\u043b\u043e\u041a\u043e\u043d\u0435\u0446",
    "c1000\u0414\u043e200010\u042791\u0427\u041f\u0435\u0440\u0435\u0440\u044b\u0432\u0430",
    "\u0440\u0435\u043b\u043e\u043a\u0430\u0446\u0438\u044fBoolean",
    "\u043b\u0435\u0439\u0431\u043b8",
    "\u0442\u0435\u043a\u0441\u0442\u0420\u0435\u043b\u043e\u043a\u0430\u0446\u0438\u044f"
  ],
  frame15: ["frame15"],
  frame16: [
    "frame16",
    "\u0440\u0430\u0431\u043e\u0447\u0438\u0439\u0414\u0435\u043d\u044cBoolean",
    "\u043b\u0435\u0439\u0431\u043b7",
    "ru\u041d\u0430\u0447\u0430\u043b\u043e\u041a\u043e\u043d\u0435\u0446",
    "\u0442\u0435\u043a\u0441\u0442\u0421\u0413\u0440\u0430\u0444\u0438\u043a\u0430\u0420\u0430\u0431\u043e\u0442\u044b",
    "eng\u041d\u0430\u0447\u0430\u043b\u043e\u041a\u043e\u043d\u0435\u0446",
    "c1000\u0414\u043e200010\u042791\u0427\u041f\u0435\u0440\u0435\u0440\u044b\u0432\u0430",
    "\u0440\u0435\u043b\u043e\u043a\u0430\u0446\u0438\u044fBoolean",
    "\u043b\u0435\u0439\u0431\u043b8",
    "\u0442\u0435\u043a\u0441\u0442\u0420\u0435\u043b\u043e\u043a\u0430\u0446\u0438\u044f"
  ],
  рабочийДеньBoolean: [
    "\u0440\u0430\u0431\u043e\u0447\u0438\u0439\u0414\u0435\u043d\u044cBoolean",
    "\u043b\u0435\u0439\u0431\u043b7",
    "ru\u041d\u0430\u0447\u0430\u043b\u043e\u041a\u043e\u043d\u0435\u0446",
    "\u0442\u0435\u043a\u0441\u0442\u0421\u0413\u0440\u0430\u0444\u0438\u043a\u0430\u0420\u0430\u0431\u043e\u0442\u044b",
    "eng\u041d\u0430\u0447\u0430\u043b\u043e\u041a\u043e\u043d\u0435\u0446",
    "c1000\u0414\u043e200010\u042791\u0427\u041f\u0435\u0440\u0435\u0440\u044b\u0432\u0430"
  ],
  лейбл7: ["\u043b\u0435\u0439\u0431\u043b7"],
  ruНачалоКонец: [
    "ru\u041d\u0430\u0447\u0430\u043b\u043e\u041a\u043e\u043d\u0435\u0446",
    "\u0442\u0435\u043a\u0441\u0442\u0421\u0413\u0440\u0430\u0444\u0438\u043a\u0430\u0420\u0430\u0431\u043e\u0442\u044b"
  ],
  текстСГрафикаРаботы: [
    "\u0442\u0435\u043a\u0441\u0442\u0421\u0413\u0440\u0430\u0444\u0438\u043a\u0430\u0420\u0430\u0431\u043e\u0442\u044b"
  ],
  engНачалоКонец: [
    "eng\u041d\u0430\u0447\u0430\u043b\u043e\u041a\u043e\u043d\u0435\u0446",
    "c1000\u0414\u043e200010\u042791\u0427\u041f\u0435\u0440\u0435\u0440\u044b\u0432\u0430"
  ],
  c1000До200010Ч91ЧПерерыва: [
    "c1000\u0414\u043e200010\u042791\u0427\u041f\u0435\u0440\u0435\u0440\u044b\u0432\u0430"
  ],
  релокацияBoolean: [
    "\u0440\u0435\u043b\u043e\u043a\u0430\u0446\u0438\u044fBoolean",
    "\u043b\u0435\u0439\u0431\u043b8",
    "\u0442\u0435\u043a\u0441\u0442\u0420\u0435\u043b\u043e\u043a\u0430\u0446\u0438\u044f"
  ],
  лейбл8: ["\u043b\u0435\u0439\u0431\u043b8"],
  текстРелокация: [
    "\u0442\u0435\u043a\u0441\u0442\u0420\u0435\u043b\u043e\u043a\u0430\u0446\u0438\u044f"
  ],
  бенефитыBoolean: [
    "\u0431\u0435\u043d\u0435\u0444\u0438\u0442\u044bBoolean",
    "frame17",
    "frame18",
    "frame19",
    "frame2087329735",
    "frame20",
    "maskGroup",
    "realisticGiftIconBlueBlackOrangeJ8Gf1Wo9Qhsap8B8N9Vp32",
    "frame21",
    "\u043a\u043e\u0440\u043f\u043e\u0440\u0430\u0442\u0438\u0432\u044bBoolean",
    "\u043b\u0435\u0439\u0431\u043b9",
    "\u0442\u0435\u043a\u0441\u0442\u041a\u043e\u0440\u043f\u043e\u0440\u0430\u0442\u0438\u0432\u044b",
    "\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435Boolean",
    "\u043b\u0435\u0439\u0431\u043b10",
    "\u0442\u0435\u043a\u0441\u0442\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435",
    "\u0441\u043f\u043e\u0440\u0442Boolean",
    "\u043b\u0435\u0439\u0431\u043b11",
    "\u0442\u0435\u043a\u0441\u0442\u0421\u043f\u043e\u0440\u0442"
  ],
  frame17: [
    "frame17",
    "frame18",
    "frame19",
    "frame2087329735",
    "frame20",
    "maskGroup",
    "realisticGiftIconBlueBlackOrangeJ8Gf1Wo9Qhsap8B8N9Vp32",
    "frame21",
    "\u043a\u043e\u0440\u043f\u043e\u0440\u0430\u0442\u0438\u0432\u044bBoolean",
    "\u043b\u0435\u0439\u0431\u043b9",
    "\u0442\u0435\u043a\u0441\u0442\u041a\u043e\u0440\u043f\u043e\u0440\u0430\u0442\u0438\u0432\u044b",
    "\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435Boolean",
    "\u043b\u0435\u0439\u0431\u043b10",
    "\u0442\u0435\u043a\u0441\u0442\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435",
    "\u0441\u043f\u043e\u0440\u0442Boolean",
    "\u043b\u0435\u0439\u0431\u043b11",
    "\u0442\u0435\u043a\u0441\u0442\u0421\u043f\u043e\u0440\u0442"
  ],
  frame18: [
    "frame18",
    "frame19",
    "frame2087329735",
    "frame20",
    "maskGroup",
    "realisticGiftIconBlueBlackOrangeJ8Gf1Wo9Qhsap8B8N9Vp32"
  ],
  frame19: ["frame19", "frame2087329735"],
  frame2087329735: ["frame2087329735"],
  frame20: [
    "frame20",
    "maskGroup",
    "realisticGiftIconBlueBlackOrangeJ8Gf1Wo9Qhsap8B8N9Vp32"
  ],
  maskGroup: [
    "maskGroup",
    "realisticGiftIconBlueBlackOrangeJ8Gf1Wo9Qhsap8B8N9Vp32"
  ],
  realisticGiftIconBlueBlackOrangeJ8Gf1Wo9Qhsap8B8N9Vp32: [
    "realisticGiftIconBlueBlackOrangeJ8Gf1Wo9Qhsap8B8N9Vp32"
  ],
  frame21: [
    "frame21",
    "\u043a\u043e\u0440\u043f\u043e\u0440\u0430\u0442\u0438\u0432\u044bBoolean",
    "\u043b\u0435\u0439\u0431\u043b9",
    "\u0442\u0435\u043a\u0441\u0442\u041a\u043e\u0440\u043f\u043e\u0440\u0430\u0442\u0438\u0432\u044b",
    "\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435Boolean",
    "\u043b\u0435\u0439\u0431\u043b10",
    "\u0442\u0435\u043a\u0441\u0442\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435",
    "\u0441\u043f\u043e\u0440\u0442Boolean",
    "\u043b\u0435\u0439\u0431\u043b11",
    "\u0442\u0435\u043a\u0441\u0442\u0421\u043f\u043e\u0440\u0442"
  ],
  корпоративыBoolean: [
    "\u043a\u043e\u0440\u043f\u043e\u0440\u0430\u0442\u0438\u0432\u044bBoolean",
    "\u043b\u0435\u0439\u0431\u043b9",
    "\u0442\u0435\u043a\u0441\u0442\u041a\u043e\u0440\u043f\u043e\u0440\u0430\u0442\u0438\u0432\u044b"
  ],
  лейбл9: ["\u043b\u0435\u0439\u0431\u043b9"],
  текстКорпоративы: [
    "\u0442\u0435\u043a\u0441\u0442\u041a\u043e\u0440\u043f\u043e\u0440\u0430\u0442\u0438\u0432\u044b"
  ],
  обучениеBoolean: [
    "\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435Boolean",
    "\u043b\u0435\u0439\u0431\u043b10",
    "\u0442\u0435\u043a\u0441\u0442\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435"
  ],
  лейбл10: ["\u043b\u0435\u0439\u0431\u043b10"],
  текстОбучение: [
    "\u0442\u0435\u043a\u0441\u0442\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435"
  ],
  спортBoolean: [
    "\u0441\u043f\u043e\u0440\u0442Boolean",
    "\u043b\u0435\u0439\u0431\u043b11",
    "\u0442\u0435\u043a\u0441\u0442\u0421\u043f\u043e\u0440\u0442"
  ],
  лейбл11: ["\u043b\u0435\u0439\u0431\u043b11"],
  текстСпорт: ["\u0442\u0435\u043a\u0441\u0442\u0421\u043f\u043e\u0440\u0442"],
  frame22: [
    "frame22",
    "frame23",
    "frame24",
    "frame2087329778",
    "\u0443\u0441\u0442\u0430\u043b\u0438\u0418\u041d\u0443\u0436\u0435\u043d\u041e\u0442\u0434\u044b\u0445",
    "frame25",
    "\u043e\u0442\u043f\u0443\u0441\u043aBoolean",
    "\u043b\u0435\u0439\u0431\u043b12",
    "\u0442\u0435\u043a\u0441\u0442\u041e\u0442\u043f\u0443\u0441\u043a",
    "\u0434\u043c\u0441Boolean",
    "\u043b\u0435\u0439\u0431\u043b13",
    "\u0442\u0435\u043a\u0441\u0442\u0414\u043c\u0441",
    "suitcaseHeEnteredIcon1E3C0B4Luzshs6Ur47I12"
  ],
  frame23: [
    "frame23",
    "frame24",
    "frame2087329778",
    "\u0443\u0441\u0442\u0430\u043b\u0438\u0418\u041d\u0443\u0436\u0435\u043d\u041e\u0442\u0434\u044b\u0445",
    "frame25",
    "\u043e\u0442\u043f\u0443\u0441\u043aBoolean",
    "\u043b\u0435\u0439\u0431\u043b12",
    "\u0442\u0435\u043a\u0441\u0442\u041e\u0442\u043f\u0443\u0441\u043a",
    "\u0434\u043c\u0441Boolean",
    "\u043b\u0435\u0439\u0431\u043b13",
    "\u0442\u0435\u043a\u0441\u0442\u0414\u043c\u0441",
    "suitcaseHeEnteredIcon1E3C0B4Luzshs6Ur47I12"
  ],
  frame24: [
    "frame24",
    "frame2087329778",
    "\u0443\u0441\u0442\u0430\u043b\u0438\u0418\u041d\u0443\u0436\u0435\u043d\u041e\u0442\u0434\u044b\u0445"
  ],
  frame2087329778: ["frame2087329778"],
  усталиИНуженОтдых: [
    "\u0443\u0441\u0442\u0430\u043b\u0438\u0418\u041d\u0443\u0436\u0435\u043d\u041e\u0442\u0434\u044b\u0445"
  ],
  frame25: [
    "frame25",
    "\u043e\u0442\u043f\u0443\u0441\u043aBoolean",
    "\u043b\u0435\u0439\u0431\u043b12",
    "\u0442\u0435\u043a\u0441\u0442\u041e\u0442\u043f\u0443\u0441\u043a",
    "\u0434\u043c\u0441Boolean",
    "\u043b\u0435\u0439\u0431\u043b13",
    "\u0442\u0435\u043a\u0441\u0442\u0414\u043c\u0441"
  ],
  отпускBoolean: [
    "\u043e\u0442\u043f\u0443\u0441\u043aBoolean",
    "\u043b\u0435\u0439\u0431\u043b12",
    "\u0442\u0435\u043a\u0441\u0442\u041e\u0442\u043f\u0443\u0441\u043a"
  ],
  лейбл12: ["\u043b\u0435\u0439\u0431\u043b12"],
  текстОтпуск: [
    "\u0442\u0435\u043a\u0441\u0442\u041e\u0442\u043f\u0443\u0441\u043a"
  ],
  дмсBoolean: [
    "\u0434\u043c\u0441Boolean",
    "\u043b\u0435\u0439\u0431\u043b13",
    "\u0442\u0435\u043a\u0441\u0442\u0414\u043c\u0441"
  ],
  лейбл13: ["\u043b\u0435\u0439\u0431\u043b13"],
  текстДмс: ["\u0442\u0435\u043a\u0441\u0442\u0414\u043c\u0441"],
  suitcaseHeEnteredIcon1E3C0B4Luzshs6Ur47I12: [
    "suitcaseHeEnteredIcon1E3C0B4Luzshs6Ur47I12"
  ],
  блок05Salary: [
    "\u0431\u043b\u043e\u043a05Salary",
    "frame29",
    "frame30",
    "liquidChromeShape71",
    "frame31",
    "\u0437\u043f\u0418\u0441\u043f\u0421\u0440\u043e\u043a",
    "\u0437\u043f\u0418\u0441\u043f\u0421\u0440\u043e\u043aBoolean",
    "frame32",
    "\u0432\u0430\u043b\u044e\u0442\u0430\u0414\u043e2",
    "\u0440\u0443\u0431\u043b\u044c",
    "\u0442\u0435\u043a\u0441\u0442\u0427\u0438\u0441\u043b\u043e2",
    "\u043c\u044b\u0420\u0430\u0434\u044b\u0421\u0434\u0435\u043b\u0430\u0442\u044c\u0412\u0430\u043c4",
    "\u0432\u0430\u043b\u044e\u0442\u0430\u041f\u043e\u0441\u043b\u04352",
    "\u0440\u0443\u0431\u043b\u044c2",
    "\u043c\u044b\u0420\u0430\u0434\u044b\u0421\u0434\u0435\u043b\u0430\u0442\u044c\u0412\u0430\u043c",
    "\u0437\u0430\u0440\u043f\u043b\u0430\u0442\u04302",
    "\u0432\u0430\u043b\u044e\u0442\u0430\u0414\u043e3",
    "\u0440\u0443\u0431\u043b\u044c4",
    "\u0442\u0435\u043a\u0441\u0442\u0427\u0438\u0441\u043b\u043e3",
    "_301"
  ],
  frame29: ["frame29", "frame30", "liquidChromeShape71"],
  frame30: ["frame30", "liquidChromeShape71"],
  liquidChromeShape71: ["liquidChromeShape71"],
  frame31: [
    "frame31",
    "\u0437\u043f\u0418\u0441\u043f\u0421\u0440\u043e\u043a",
    "\u0437\u043f\u0418\u0441\u043f\u0421\u0440\u043e\u043aBoolean",
    "frame32",
    "\u0432\u0430\u043b\u044e\u0442\u0430\u0414\u043e2",
    "\u0440\u0443\u0431\u043b\u044c",
    "\u0442\u0435\u043a\u0441\u0442\u0427\u0438\u0441\u043b\u043e2",
    "\u043c\u044b\u0420\u0430\u0434\u044b\u0421\u0434\u0435\u043b\u0430\u0442\u044c\u0412\u0430\u043c4",
    "\u0432\u0430\u043b\u044e\u0442\u0430\u041f\u043e\u0441\u043b\u04352",
    "\u0440\u0443\u0431\u043b\u044c2",
    "\u043c\u044b\u0420\u0430\u0434\u044b\u0421\u0434\u0435\u043b\u0430\u0442\u044c\u0412\u0430\u043c",
    "\u0437\u0430\u0440\u043f\u043b\u0430\u0442\u04302",
    "\u0432\u0430\u043b\u044e\u0442\u0430\u0414\u043e3",
    "\u0440\u0443\u0431\u043b\u044c4",
    "\u0442\u0435\u043a\u0441\u0442\u0427\u0438\u0441\u043b\u043e3",
    "_301"
  ],
  зпИспСрок: [
    "\u0437\u043f\u0418\u0441\u043f\u0421\u0440\u043e\u043a",
    "\u0437\u043f\u0418\u0441\u043f\u0421\u0440\u043e\u043aBoolean",
    "frame32",
    "\u0432\u0430\u043b\u044e\u0442\u0430\u0414\u043e2",
    "\u0440\u0443\u0431\u043b\u044c",
    "\u0442\u0435\u043a\u0441\u0442\u0427\u0438\u0441\u043b\u043e2",
    "\u043c\u044b\u0420\u0430\u0434\u044b\u0421\u0434\u0435\u043b\u0430\u0442\u044c\u0412\u0430\u043c4",
    "\u0432\u0430\u043b\u044e\u0442\u0430\u041f\u043e\u0441\u043b\u04352",
    "\u0440\u0443\u0431\u043b\u044c2",
    "\u043c\u044b\u0420\u0430\u0434\u044b\u0421\u0434\u0435\u043b\u0430\u0442\u044c\u0412\u0430\u043c"
  ],
  зпИспСрокBoolean: [
    "\u0437\u043f\u0418\u0441\u043f\u0421\u0440\u043e\u043aBoolean",
    "frame32",
    "\u0432\u0430\u043b\u044e\u0442\u0430\u0414\u043e2",
    "\u0440\u0443\u0431\u043b\u044c",
    "\u0442\u0435\u043a\u0441\u0442\u0427\u0438\u0441\u043b\u043e2",
    "\u043c\u044b\u0420\u0430\u0434\u044b\u0421\u0434\u0435\u043b\u0430\u0442\u044c\u0412\u0430\u043c4",
    "\u0432\u0430\u043b\u044e\u0442\u0430\u041f\u043e\u0441\u043b\u04352",
    "\u0440\u0443\u0431\u043b\u044c2",
    "\u043c\u044b\u0420\u0430\u0434\u044b\u0421\u0434\u0435\u043b\u0430\u0442\u044c\u0412\u0430\u043c"
  ],
  frame32: [
    "frame32",
    "\u0432\u0430\u043b\u044e\u0442\u0430\u0414\u043e2",
    "\u0440\u0443\u0431\u043b\u044c",
    "\u0442\u0435\u043a\u0441\u0442\u0427\u0438\u0441\u043b\u043e2",
    "\u043c\u044b\u0420\u0430\u0434\u044b\u0421\u0434\u0435\u043b\u0430\u0442\u044c\u0412\u0430\u043c4",
    "\u0432\u0430\u043b\u044e\u0442\u0430\u041f\u043e\u0441\u043b\u04352",
    "\u0440\u0443\u0431\u043b\u044c2"
  ],
  валютаДо2: [
    "\u0432\u0430\u043b\u044e\u0442\u0430\u0414\u043e2",
    "\u0440\u0443\u0431\u043b\u044c"
  ],
  рубль: ["\u0440\u0443\u0431\u043b\u044c"],
  текстЧисло2: [
    "\u0442\u0435\u043a\u0441\u0442\u0427\u0438\u0441\u043b\u043e2",
    "\u043c\u044b\u0420\u0430\u0434\u044b\u0421\u0434\u0435\u043b\u0430\u0442\u044c\u0412\u0430\u043c4"
  ],
  мыРадыСделатьВам4: [
    "\u043c\u044b\u0420\u0430\u0434\u044b\u0421\u0434\u0435\u043b\u0430\u0442\u044c\u0412\u0430\u043c4"
  ],
  валютаПосле2: [
    "\u0432\u0430\u043b\u044e\u0442\u0430\u041f\u043e\u0441\u043b\u04352",
    "\u0440\u0443\u0431\u043b\u044c2"
  ],
  рубль2: ["\u0440\u0443\u0431\u043b\u044c2"],
  мыРадыСделатьВам: [
    "\u043c\u044b\u0420\u0430\u0434\u044b\u0421\u0434\u0435\u043b\u0430\u0442\u044c\u0412\u0430\u043c"
  ],
  зарплата2: [
    "\u0437\u0430\u0440\u043f\u043b\u0430\u0442\u04302",
    "\u0432\u0430\u043b\u044e\u0442\u0430\u0414\u043e3",
    "\u0440\u0443\u0431\u043b\u044c4",
    "\u0442\u0435\u043a\u0441\u0442\u0427\u0438\u0441\u043b\u043e3",
    "_301"
  ],
  валютаДо3: [
    "\u0432\u0430\u043b\u044e\u0442\u0430\u0414\u043e3",
    "\u0440\u0443\u0431\u043b\u044c4"
  ],
  рубль4: ["\u0440\u0443\u0431\u043b\u044c4"],
  текстЧисло3: [
    "\u0442\u0435\u043a\u0441\u0442\u0427\u0438\u0441\u043b\u043e3",
    "_301"
  ],
  _301: ["_301"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  mainComponentVer1: "div";
  блок01Data: "div";
  фон: "div";
  rectangle240649526: "div";
  img: typeof PlasmicImg__;
  статичныйЗаголовок: "div";
  датаОффера: "div";
  ic: "div";
  frame: "div";
  frame2: "div";
  frame3: "div";
  месяцRu: "div";
  январь: "div";
  месяцEn: "div";
  january: "div";
  _31: "div";
  _2025: "div";
  блоки: "div";
  блок02Offer: "div";
  frame4: "div";
  frame5: "div";
  позицияBoolean: "div";
  лейбл: "div";
  текстПозиция: "div";
  нанимательBoolean: "div";
  лейбл2: "div";
  текстНаниматель: "div";
  отделBoolean: "div";
  лейбл3: "div";
  текстОтдел: "div";
  frame6: "div";
  имяФамилия: "div";
  текстИмяФамилия: "div";
  статичныйТекст2: "div";
  статичныйТекст3: "div";
  менеджер: "div";
  frame7: "div";
  текстТгНикнейм: "div";
  блок03Info: "div";
  frame12: "div";
  buttonYpwbaox5E6Nkkyq1L1H01: "div";
  frame8: "div";
  frame9: "div";
  changeTxt: "div";
  мыРадыСделатьВам2: "div";
  поля: "div";
  местоРаботы: "div";
  лейбл4: "div";
  текстМестоРаботы: "div";
  испСрок: "div";
  лейбл5: "div";
  текстИспСрок: "div";
  текстИспСрок2: "div";
  график: "div";
  лейбл6: "div";
  frame10: "div";
  текстДни52: "div";
  мыРадыСделатьВам3: "div";
  текстСДоС1000До1500: "div";
  c1000До200010Ч91ЧПерерыва2: "div";
  engНачалоКонец2: "div";
  c1000До200010Ч91ЧПерерыва3: "div";
  frame11: "div";
  buttonXnq8Xhka4Cls4Mo1Hw1H0: "div";
  блок04Bonuses: "div";
  frame13: "div";
  статичныйТекст4: "div";
  статичныйТекст: "div";
  frame14: "div";
  графикBoolean: "div";
  frame15: "div";
  frame16: "div";
  рабочийДеньBoolean: "div";
  лейбл7: "div";
  ruНачалоКонец: "div";
  текстСГрафикаРаботы: "div";
  engНачалоКонец: "div";
  c1000До200010Ч91ЧПерерыва: "div";
  релокацияBoolean: "div";
  лейбл8: "div";
  текстРелокация: "div";
  бенефитыBoolean: "div";
  frame17: "div";
  frame18: "div";
  frame19: "div";
  frame2087329735: "div";
  frame20: "div";
  maskGroup: "div";
  realisticGiftIconBlueBlackOrangeJ8Gf1Wo9Qhsap8B8N9Vp32: "div";
  frame21: "div";
  корпоративыBoolean: "div";
  лейбл9: "div";
  текстКорпоративы: "div";
  обучениеBoolean: "div";
  лейбл10: "div";
  текстОбучение: "div";
  спортBoolean: "div";
  лейбл11: "div";
  текстСпорт: "div";
  frame22: "div";
  frame23: "div";
  frame24: "div";
  frame2087329778: "div";
  усталиИНуженОтдых: "div";
  frame25: "div";
  отпускBoolean: "div";
  лейбл12: "div";
  текстОтпуск: "div";
  дмсBoolean: "div";
  лейбл13: "div";
  текстДмс: "div";
  suitcaseHeEnteredIcon1E3C0B4Luzshs6Ur47I12: "div";
  блок05Salary: "div";
  frame29: "div";
  frame30: "div";
  liquidChromeShape71: "div";
  frame31: "div";
  зпИспСрок: "div";
  зпИспСрокBoolean: "div";
  frame32: "div";
  валютаДо2: "div";
  рубль: "div";
  текстЧисло2: "div";
  мыРадыСделатьВам4: "div";
  валютаПосле2: "div";
  рубль2: "div";
  мыРадыСделатьВам: "div";
  зарплата2: "div";
  валютаДо3: "div";
  рубль4: "div";
  текстЧисло3: "div";
  _301: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMainComponentV1__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicMainComponentV1__VariantsArgs;
    args?: PlasmicMainComponentV1__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicMainComponentV1__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicMainComponentV1__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMainComponentV1__ArgProps,
          internalVariantPropNames: PlasmicMainComponentV1__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMainComponentV1__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "mainComponentVer1") {
    func.displayName = "PlasmicMainComponentV1";
  } else {
    func.displayName = `PlasmicMainComponentV1.${nodeName}`;
  }
  return func;
}

export const PlasmicMainComponentV1 = Object.assign(
  // Top-level PlasmicMainComponentV1 renders the root element
  makeNodeComponent("mainComponentVer1"),
  {
    // Helper components rendering sub-elements
    блок01Data: makeNodeComponent("\u0431\u043b\u043e\u043a01Data"),
    фон: makeNodeComponent("\u0444\u043e\u043d"),
    rectangle240649526: makeNodeComponent("rectangle240649526"),
    img: makeNodeComponent("img"),
    статичныйЗаголовок: makeNodeComponent(
      "\u0441\u0442\u0430\u0442\u0438\u0447\u043d\u044b\u0439\u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a"
    ),
    датаОффера: makeNodeComponent(
      "\u0434\u0430\u0442\u0430\u041e\u0444\u0444\u0435\u0440\u0430"
    ),
    ic: makeNodeComponent("ic"),
    frame: makeNodeComponent("frame"),
    frame2: makeNodeComponent("frame2"),
    frame3: makeNodeComponent("frame3"),
    месяцRu: makeNodeComponent("\u043c\u0435\u0441\u044f\u0446Ru"),
    январь: makeNodeComponent("\u044f\u043d\u0432\u0430\u0440\u044c"),
    месяцEn: makeNodeComponent("\u043c\u0435\u0441\u044f\u0446En"),
    january: makeNodeComponent("january"),
    _31: makeNodeComponent("_31"),
    _2025: makeNodeComponent("_2025"),
    блоки: makeNodeComponent("\u0431\u043b\u043e\u043a\u0438"),
    блок02Offer: makeNodeComponent("\u0431\u043b\u043e\u043a02Offer"),
    frame4: makeNodeComponent("frame4"),
    frame5: makeNodeComponent("frame5"),
    позицияBoolean: makeNodeComponent(
      "\u043f\u043e\u0437\u0438\u0446\u0438\u044fBoolean"
    ),
    лейбл: makeNodeComponent("\u043b\u0435\u0439\u0431\u043b"),
    текстПозиция: makeNodeComponent(
      "\u0442\u0435\u043a\u0441\u0442\u041f\u043e\u0437\u0438\u0446\u0438\u044f"
    ),
    нанимательBoolean: makeNodeComponent(
      "\u043d\u0430\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044cBoolean"
    ),
    лейбл2: makeNodeComponent("\u043b\u0435\u0439\u0431\u043b2"),
    текстНаниматель: makeNodeComponent(
      "\u0442\u0435\u043a\u0441\u0442\u041d\u0430\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c"
    ),
    отделBoolean: makeNodeComponent("\u043e\u0442\u0434\u0435\u043bBoolean"),
    лейбл3: makeNodeComponent("\u043b\u0435\u0439\u0431\u043b3"),
    текстОтдел: makeNodeComponent(
      "\u0442\u0435\u043a\u0441\u0442\u041e\u0442\u0434\u0435\u043b"
    ),
    frame6: makeNodeComponent("frame6"),
    имяФамилия: makeNodeComponent(
      "\u0438\u043c\u044f\u0424\u0430\u043c\u0438\u043b\u0438\u044f"
    ),
    текстИмяФамилия: makeNodeComponent(
      "\u0442\u0435\u043a\u0441\u0442\u0418\u043c\u044f\u0424\u0430\u043c\u0438\u043b\u0438\u044f"
    ),
    статичныйТекст2: makeNodeComponent(
      "\u0441\u0442\u0430\u0442\u0438\u0447\u043d\u044b\u0439\u0422\u0435\u043a\u0441\u04422"
    ),
    статичныйТекст3: makeNodeComponent(
      "\u0441\u0442\u0430\u0442\u0438\u0447\u043d\u044b\u0439\u0422\u0435\u043a\u0441\u04423"
    ),
    менеджер: makeNodeComponent(
      "\u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440"
    ),
    frame7: makeNodeComponent("frame7"),
    текстТгНикнейм: makeNodeComponent(
      "\u0442\u0435\u043a\u0441\u0442\u0422\u0433\u041d\u0438\u043a\u043d\u0435\u0439\u043c"
    ),
    блок03Info: makeNodeComponent("\u0431\u043b\u043e\u043a03Info"),
    frame12: makeNodeComponent("frame12"),
    buttonYpwbaox5E6Nkkyq1L1H01: makeNodeComponent(
      "buttonYpwbaox5E6Nkkyq1L1H01"
    ),
    frame8: makeNodeComponent("frame8"),
    frame9: makeNodeComponent("frame9"),
    changeTxt: makeNodeComponent("changeTxt"),
    мыРадыСделатьВам2: makeNodeComponent(
      "\u043c\u044b\u0420\u0430\u0434\u044b\u0421\u0434\u0435\u043b\u0430\u0442\u044c\u0412\u0430\u043c2"
    ),
    поля: makeNodeComponent("\u043f\u043e\u043b\u044f"),
    местоРаботы: makeNodeComponent(
      "\u043c\u0435\u0441\u0442\u043e\u0420\u0430\u0431\u043e\u0442\u044b"
    ),
    лейбл4: makeNodeComponent("\u043b\u0435\u0439\u0431\u043b4"),
    текстМестоРаботы: makeNodeComponent(
      "\u0442\u0435\u043a\u0441\u0442\u041c\u0435\u0441\u0442\u043e\u0420\u0430\u0431\u043e\u0442\u044b"
    ),
    испСрок: makeNodeComponent("\u0438\u0441\u043f\u0421\u0440\u043e\u043a"),
    лейбл5: makeNodeComponent("\u043b\u0435\u0439\u0431\u043b5"),
    текстИспСрок: makeNodeComponent(
      "\u0442\u0435\u043a\u0441\u0442\u0418\u0441\u043f\u0421\u0440\u043e\u043a"
    ),
    текстИспСрок2: makeNodeComponent(
      "\u0442\u0435\u043a\u0441\u0442\u0418\u0441\u043f\u0421\u0440\u043e\u043a2"
    ),
    график: makeNodeComponent("\u0433\u0440\u0430\u0444\u0438\u043a"),
    лейбл6: makeNodeComponent("\u043b\u0435\u0439\u0431\u043b6"),
    frame10: makeNodeComponent("frame10"),
    текстДни52: makeNodeComponent(
      "\u0442\u0435\u043a\u0441\u0442\u0414\u043d\u043852"
    ),
    мыРадыСделатьВам3: makeNodeComponent(
      "\u043c\u044b\u0420\u0430\u0434\u044b\u0421\u0434\u0435\u043b\u0430\u0442\u044c\u0412\u0430\u043c3"
    ),
    текстСДоС1000До1500: makeNodeComponent(
      "\u0442\u0435\u043a\u0441\u0442\u0421\u0414\u043e\u04211000\u0414\u043e1500"
    ),
    c1000До200010Ч91ЧПерерыва2: makeNodeComponent(
      "c1000\u0414\u043e200010\u042791\u0427\u041f\u0435\u0440\u0435\u0440\u044b\u0432\u04302"
    ),
    engНачалоКонец2: makeNodeComponent(
      "eng\u041d\u0430\u0447\u0430\u043b\u043e\u041a\u043e\u043d\u0435\u04462"
    ),
    c1000До200010Ч91ЧПерерыва3: makeNodeComponent(
      "c1000\u0414\u043e200010\u042791\u0427\u041f\u0435\u0440\u0435\u0440\u044b\u0432\u04303"
    ),
    frame11: makeNodeComponent("frame11"),
    buttonXnq8Xhka4Cls4Mo1Hw1H0: makeNodeComponent(
      "buttonXnq8Xhka4Cls4Mo1Hw1H0"
    ),
    блок04Bonuses: makeNodeComponent("\u0431\u043b\u043e\u043a04Bonuses"),
    frame13: makeNodeComponent("frame13"),
    статичныйТекст4: makeNodeComponent(
      "\u0441\u0442\u0430\u0442\u0438\u0447\u043d\u044b\u0439\u0422\u0435\u043a\u0441\u04424"
    ),
    статичныйТекст: makeNodeComponent(
      "\u0441\u0442\u0430\u0442\u0438\u0447\u043d\u044b\u0439\u0422\u0435\u043a\u0441\u0442"
    ),
    frame14: makeNodeComponent("frame14"),
    графикBoolean: makeNodeComponent(
      "\u0433\u0440\u0430\u0444\u0438\u043aBoolean"
    ),
    frame15: makeNodeComponent("frame15"),
    frame16: makeNodeComponent("frame16"),
    рабочийДеньBoolean: makeNodeComponent(
      "\u0440\u0430\u0431\u043e\u0447\u0438\u0439\u0414\u0435\u043d\u044cBoolean"
    ),
    лейбл7: makeNodeComponent("\u043b\u0435\u0439\u0431\u043b7"),
    ruНачалоКонец: makeNodeComponent(
      "ru\u041d\u0430\u0447\u0430\u043b\u043e\u041a\u043e\u043d\u0435\u0446"
    ),
    текстСГрафикаРаботы: makeNodeComponent(
      "\u0442\u0435\u043a\u0441\u0442\u0421\u0413\u0440\u0430\u0444\u0438\u043a\u0430\u0420\u0430\u0431\u043e\u0442\u044b"
    ),
    engНачалоКонец: makeNodeComponent(
      "eng\u041d\u0430\u0447\u0430\u043b\u043e\u041a\u043e\u043d\u0435\u0446"
    ),
    c1000До200010Ч91ЧПерерыва: makeNodeComponent(
      "c1000\u0414\u043e200010\u042791\u0427\u041f\u0435\u0440\u0435\u0440\u044b\u0432\u0430"
    ),
    релокацияBoolean: makeNodeComponent(
      "\u0440\u0435\u043b\u043e\u043a\u0430\u0446\u0438\u044fBoolean"
    ),
    лейбл8: makeNodeComponent("\u043b\u0435\u0439\u0431\u043b8"),
    текстРелокация: makeNodeComponent(
      "\u0442\u0435\u043a\u0441\u0442\u0420\u0435\u043b\u043e\u043a\u0430\u0446\u0438\u044f"
    ),
    бенефитыBoolean: makeNodeComponent(
      "\u0431\u0435\u043d\u0435\u0444\u0438\u0442\u044bBoolean"
    ),
    frame17: makeNodeComponent("frame17"),
    frame18: makeNodeComponent("frame18"),
    frame19: makeNodeComponent("frame19"),
    frame2087329735: makeNodeComponent("frame2087329735"),
    frame20: makeNodeComponent("frame20"),
    maskGroup: makeNodeComponent("maskGroup"),
    realisticGiftIconBlueBlackOrangeJ8Gf1Wo9Qhsap8B8N9Vp32: makeNodeComponent(
      "realisticGiftIconBlueBlackOrangeJ8Gf1Wo9Qhsap8B8N9Vp32"
    ),
    frame21: makeNodeComponent("frame21"),
    корпоративыBoolean: makeNodeComponent(
      "\u043a\u043e\u0440\u043f\u043e\u0440\u0430\u0442\u0438\u0432\u044bBoolean"
    ),
    лейбл9: makeNodeComponent("\u043b\u0435\u0439\u0431\u043b9"),
    текстКорпоративы: makeNodeComponent(
      "\u0442\u0435\u043a\u0441\u0442\u041a\u043e\u0440\u043f\u043e\u0440\u0430\u0442\u0438\u0432\u044b"
    ),
    обучениеBoolean: makeNodeComponent(
      "\u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0435Boolean"
    ),
    лейбл10: makeNodeComponent("\u043b\u0435\u0439\u0431\u043b10"),
    текстОбучение: makeNodeComponent(
      "\u0442\u0435\u043a\u0441\u0442\u041e\u0431\u0443\u0447\u0435\u043d\u0438\u0435"
    ),
    спортBoolean: makeNodeComponent("\u0441\u043f\u043e\u0440\u0442Boolean"),
    лейбл11: makeNodeComponent("\u043b\u0435\u0439\u0431\u043b11"),
    текстСпорт: makeNodeComponent(
      "\u0442\u0435\u043a\u0441\u0442\u0421\u043f\u043e\u0440\u0442"
    ),
    frame22: makeNodeComponent("frame22"),
    frame23: makeNodeComponent("frame23"),
    frame24: makeNodeComponent("frame24"),
    frame2087329778: makeNodeComponent("frame2087329778"),
    усталиИНуженОтдых: makeNodeComponent(
      "\u0443\u0441\u0442\u0430\u043b\u0438\u0418\u041d\u0443\u0436\u0435\u043d\u041e\u0442\u0434\u044b\u0445"
    ),
    frame25: makeNodeComponent("frame25"),
    отпускBoolean: makeNodeComponent(
      "\u043e\u0442\u043f\u0443\u0441\u043aBoolean"
    ),
    лейбл12: makeNodeComponent("\u043b\u0435\u0439\u0431\u043b12"),
    текстОтпуск: makeNodeComponent(
      "\u0442\u0435\u043a\u0441\u0442\u041e\u0442\u043f\u0443\u0441\u043a"
    ),
    дмсBoolean: makeNodeComponent("\u0434\u043c\u0441Boolean"),
    лейбл13: makeNodeComponent("\u043b\u0435\u0439\u0431\u043b13"),
    текстДмс: makeNodeComponent(
      "\u0442\u0435\u043a\u0441\u0442\u0414\u043c\u0441"
    ),
    suitcaseHeEnteredIcon1E3C0B4Luzshs6Ur47I12: makeNodeComponent(
      "suitcaseHeEnteredIcon1E3C0B4Luzshs6Ur47I12"
    ),
    блок05Salary: makeNodeComponent("\u0431\u043b\u043e\u043a05Salary"),
    frame29: makeNodeComponent("frame29"),
    frame30: makeNodeComponent("frame30"),
    liquidChromeShape71: makeNodeComponent("liquidChromeShape71"),
    frame31: makeNodeComponent("frame31"),
    зпИспСрок: makeNodeComponent(
      "\u0437\u043f\u0418\u0441\u043f\u0421\u0440\u043e\u043a"
    ),
    зпИспСрокBoolean: makeNodeComponent(
      "\u0437\u043f\u0418\u0441\u043f\u0421\u0440\u043e\u043aBoolean"
    ),
    frame32: makeNodeComponent("frame32"),
    валютаДо2: makeNodeComponent(
      "\u0432\u0430\u043b\u044e\u0442\u0430\u0414\u043e2"
    ),
    рубль: makeNodeComponent("\u0440\u0443\u0431\u043b\u044c"),
    текстЧисло2: makeNodeComponent(
      "\u0442\u0435\u043a\u0441\u0442\u0427\u0438\u0441\u043b\u043e2"
    ),
    мыРадыСделатьВам4: makeNodeComponent(
      "\u043c\u044b\u0420\u0430\u0434\u044b\u0421\u0434\u0435\u043b\u0430\u0442\u044c\u0412\u0430\u043c4"
    ),
    валютаПосле2: makeNodeComponent(
      "\u0432\u0430\u043b\u044e\u0442\u0430\u041f\u043e\u0441\u043b\u04352"
    ),
    рубль2: makeNodeComponent("\u0440\u0443\u0431\u043b\u044c2"),
    мыРадыСделатьВам: makeNodeComponent(
      "\u043c\u044b\u0420\u0430\u0434\u044b\u0421\u0434\u0435\u043b\u0430\u0442\u044c\u0412\u0430\u043c"
    ),
    зарплата2: makeNodeComponent(
      "\u0437\u0430\u0440\u043f\u043b\u0430\u0442\u04302"
    ),
    валютаДо3: makeNodeComponent(
      "\u0432\u0430\u043b\u044e\u0442\u0430\u0414\u043e3"
    ),
    рубль4: makeNodeComponent("\u0440\u0443\u0431\u043b\u044c4"),
    текстЧисло3: makeNodeComponent(
      "\u0442\u0435\u043a\u0441\u0442\u0427\u0438\u0441\u043b\u043e3"
    ),
    _301: makeNodeComponent("_301"),

    // Metadata about props expected for PlasmicMainComponentV1
    internalVariantProps: PlasmicMainComponentV1__VariantProps,
    internalArgProps: PlasmicMainComponentV1__ArgProps
  }
);

export default PlasmicMainComponentV1;
/* prettier-ignore-end */
